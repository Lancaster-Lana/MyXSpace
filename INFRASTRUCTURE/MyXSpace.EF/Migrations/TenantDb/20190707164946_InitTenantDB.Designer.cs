// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyXSpace.EF;

namespace MyXSpace.EF.Migrations.TenantDb
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20190707164946_InitTenantDB")]
    partial class InitTenantDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Agency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AgencyCode");

                    b.Property<string>("AgencyName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Index");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("RoleType");

                    b.Property<bool>("Status");

                    b.Property<int>("TenantId");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("TenantRoles");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProviderName");

                    b.Property<string>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<bool>("Invited");

                    b.Property<string>("ProfileId");

                    b.Property<int>("Status");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ApeCode");

                    b.Property<string>("ApeCodeCode");

                    b.Property<string>("City")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int>("ClientType");

                    b.Property<string>("Contact1Civility")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Contact1Name")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Contact2Civility")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Contact2Name")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Contact3Civility")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Contact3Name")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DataUpdated");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Index")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("MedecineCode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("MedecineName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("MissionCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<decimal?>("PaymentMode2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PaymentMode3")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int?>("PaymentMode4");

                    b.Property<string>("SiretNumber")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Telephone")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Client")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClientCode", "AgencyFileCode")
                        .HasName("IX_Client_Opt1");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Consent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ConsentContent")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ConsentDate");

                    b.Property<string>("ConsentLangage")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ConsentType")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ConsentVersion")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ConsentType", "ConsentVersion")
                        .HasName("IX_Opt1");

                    b.ToTable("Consent");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.ConsentAgreement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("ConsentAgreementDate");

                    b.Property<string>("ConsentId")
                        .HasColumnName("Consent_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserProfileId")
                        .HasColumnName("UserProfile_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ConsentId")
                        .HasName("IX_Consent_Id");

                    b.HasIndex("UserProfileId")
                        .HasName("IX_UserProfile_Id");

                    b.HasIndex("ConsentAgreementDate", "UserProfileId", "ConsentId")
                        .HasName("nci_wi_ConsentAgreement_C1E33A85D2F31DF212DB5EFB52DA8BDF");

                    b.ToTable("ConsentAgreement");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Contract", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgencyCompanyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFusionCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<bool>("Agreed");

                    b.Property<string>("AmendmentCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<bool?>("Available");

                    b.Property<string>("ClientCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("ClientId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<decimal?>("Coefficient")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CompanyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ContractCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("ContractDetailId")
                        .HasColumnName("ContractDetail_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int?>("ContractOrigin");

                    b.Property<string>("ContractSignedId")
                        .HasColumnName("ContractSigned_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DataUpdated");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<bool>("Deleted");

                    b.Property<string>("End")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("IdAdvContract")
                        .HasColumnName("Id_Adv_Contract")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("Index")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("MissionCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("OriginAgencyCdi")
                        .HasColumnName("OriginAgencyCDI")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundZipCode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PrintDate");

                    b.Property<bool>("Processed");

                    b.Property<string>("SalesmanCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int?>("SignOrigin");

                    b.Property<bool>("Signed");

                    b.Property<DateTime?>("SigningDate");

                    b.Property<string>("Source")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("TypeContractCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserCategory")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserCode")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("UserPosition")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserProfileId")
                        .HasColumnName("UserProfile_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("UserQualificationCode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ValidationDate");

                    b.Property<decimal?>("ValueReference")
                        .HasColumnType("decimal(11, 4)");

                    b.Property<string>("Week")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<decimal?>("WeeklyDuration")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.Contract")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClientId")
                        .HasName("IX_ClientId");

                    b.HasIndex("ContractDetailId")
                        .HasName("IX_ContractDetail_Id");

                    b.HasIndex("ContractSignedId")
                        .HasName("IX_ContractSigned_Id");

                    b.HasIndex("StartDate");

                    b.HasIndex("UserProfileId")
                        .HasName("IX_UserProfile_Id");

                    b.HasIndex("UserProfileId", "ClientId")
                        .HasName("IX_VScopeAlertClient");

                    b.HasIndex("ContractCode", "AgencyFileCode", "AmendmentCode")
                        .HasName("IX_Contract_Opt2");

                    b.HasIndex("ContractCode", "AgencyFileCode", "ClientCode", "AmendmentCode")
                        .HasName("IX_Contract_Opt3");

                    b.HasIndex("Signed", "Available", "AgencyFileCode", "End", "SigningDate")
                        .HasName("IX_Contract_Opt4");

                    b.HasIndex("AgencyFileCode", "AmendmentCode", "ClientCode", "ContractCode", "Index", "UserCode")
                        .HasName("IX_Contract_Opt1");

                    b.HasIndex("AgencyCompanyCode", "AmendmentCode", "ClientCode", "ContractCode", "ContractDetailId", "End", "EndDate", "Id", "StartDate", "UserCode", "ValidationDate", "AgencyFileCode", "Available", "Deleted", "Signed")
                        .HasName("nci_wi_Contract_02E4F62C8629B2C6FF8AF955F046FE72");

                    b.HasIndex("AmendmentCode", "ClientCode", "ContractCode", "ContractDetailId", "Deleted", "End", "EndDate", "Id", "StartDate", "TypeContractCode", "UserCode", "ValueReference", "WeeklyDuration", "AgencyFileCode", "Available", "Signed")
                        .HasName("nci_wi_Contract_040B5AF619A9E386762AE2198F1367D7");

                    b.HasIndex("AgencyCompanyCode", "AmendmentCode", "ClientCode", "ContractCode", "ContractDetailId", "ContractSignedId", "End", "EndDate", "Id", "OriginAgencyCdi", "Source", "StartDate", "TypeContractCode", "UserCode", "ValueReference", "WeeklyDuration", "Deleted", "AgencyFileCode", "Available", "Signed")
                        .HasName("nci_wi_Contract_699EB96DEAAA2D778443594B59E8E0A6");

                    b.HasIndex("AgencyFileCode", "AmendmentCode", "ClientCode", "Coefficient", "ContractCode", "ContractDetailId", "ContractSignedId", "Deleted", "End", "EndDate", "Id", "OriginAgencyCdi", "PensionFundAddress", "PensionFundCity", "PensionFundName", "PensionFundZipCode", "SigningDate", "StartDate", "TypeContractCode", "UserPosition", "UserQualificationCode", "ValueReference", "WeeklyDuration", "UserCode", "Available", "Signed")
                        .HasName("IX_Contract_Opt5");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.ContractDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Access")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentReason")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentType")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<decimal?>("BilledAmount")
                        .HasColumnType("decimal(11, 4)");

                    b.Property<string>("Category")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ClientCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ContractCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("CycleCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DataUpdated");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("End")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("EndDateFlexibility");

                    b.Property<decimal?>("EndFlexibility")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Equipment")
                        .HasMaxLength(2005)
                        .IsUnicode(false);

                    b.Property<string>("FullRubric")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Index")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Installations")
                        .HasMaxLength(2005)
                        .IsUnicode(false);

                    b.Property<string>("JobCharacteristics")
                        .HasMaxLength(3005)
                        .IsUnicode(false);

                    b.Property<string>("LawQuoted")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("MissionCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("NonWorkedPeriod")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("OrigineAgenceCdi")
                        .HasColumnName("OrigineAgenceCDI")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("PayedAmount")
                        .HasColumnType("decimal(11, 4)");

                    b.Property<string>("PersonToAsk")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("ReasonCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ReasonLabel")
                        .HasMaxLength(5010)
                        .IsUnicode(false);

                    b.Property<decimal?>("ReferenceHoursNumber")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RepresentingPerson")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("Risks")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("RubricCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("SalaryReference")
                        .HasMaxLength(2005)
                        .IsUnicode(false);

                    b.Property<string>("SalesmanCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Schedule")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("SiteCity")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SiteName")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SiteZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("StartDateFlexibility");

                    b.Property<decimal?>("StartFlexibility")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TrialDuration")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnitRubric")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserFreeQualificationLabel")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("UserQualificationCode")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_dbo.ContractDetail")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Id")
                        .HasName("IX_PK")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Id", "EndDate")
                        .HasName("IX_VUserProfileRecent");

                    b.HasIndex("AgencyFileCode", "AmendmentCode", "ClientCode", "ContractCode", "Index")
                        .HasName("IX_OptMultiColumn");

                    b.ToTable("ContractDetail");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.ContractSigned", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AdequatMedCdiiAddress")
                        .HasMaxLength(130)
                        .IsUnicode(false);

                    b.Property<string>("AdequatMedCdiiName")
                        .HasMaxLength(130)
                        .IsUnicode(false);

                    b.Property<string>("AdequatMedecineAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AdequatMedecineName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiCity")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiFaxNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiSiretNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AgeCdiiZipCode")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AgencyAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyApeCodeLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyCdiiApeCodeLabel")
                        .HasMaxLength(130)
                        .IsUnicode(false);

                    b.Property<string>("AgencyCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFaxNumber")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AgencyId")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgencyName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyPhoneNumber")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencySigningDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencySiretNumber")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("AgencyZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentCode")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentReason")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("AmendmentType")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Characteristics")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientApeCodeLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientMedecineName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ClientZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ContractSchedule")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ContributionCenterCdiiLabel")
                        .HasMaxLength(130)
                        .IsUnicode(false);

                    b.Property<string>("ContributionCenterLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<bool>("Deleted");

                    b.Property<string>("End")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("EndDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Equipment")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ExternalOrderRequestId")
                        .HasColumnName("externalOrderRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("ExternalSignatureRequestId")
                        .HasColumnName("externalSignatureRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<string>("FinancialGuarantorCdiiLabel")
                        .HasMaxLength(130)
                        .IsUnicode(false);

                    b.Property<string>("FinancialGuarantorLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("FlexibilityEndDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("FlexibilityStartDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("FullCode")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<string>("HourReference")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("InitialOrAmendment")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("InitialStartAndEndDates")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Installation")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("IssueDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("IssuePlace")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Justifications")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("LawQuoted")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("MedicalVisitDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("OffPeriod")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("OrderRequestId")
                        .HasColumnName("orderRequestId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("PensionFundZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("PersonToAsk")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("QualificationLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<decimal?>("ReferenceHourNumber")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RepresentingPerson")
                        .HasMaxLength(35)
                        .IsUnicode(false);

                    b.Property<string>("Risks")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("RubricNames")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SalaryReference1")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SalaryValues")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SignatureRequestId")
                        .HasColumnName("signatureRequestId")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SiteAccess")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SiteCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SiteName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("SiteZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("StartDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("TrialDuration")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("TypeContractCode")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserAddress")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserBirthDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserBirthPlace")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserCategory")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserCity")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserCivility")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserCode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserFirstName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserLastName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserNationalityLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserNumber")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserPaymentModeLabel")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserPosition")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserSigningDate")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UserZipCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("ValueReference")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Week")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("WeeklyDuration")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FullCode")
                        .HasName("IX_Contract_Opt1");

                    b.HasIndex("ClientName", "FullCode", "UserCivility", "UserFirstName", "UserLastName", "UserSigningDate", "AgencyFileCode")
                        .HasName("nci_wi_ContractSigned_D68BB9D9555B793C3FA3552F9C710F28");

                    b.ToTable("ContractSigned");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.FaqCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.ToTable("FaqCategory");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.FaqQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Detail")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("FaqCategoryId")
                        .HasColumnName("FaqCategory_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FaqCategoryId")
                        .HasName("IX_FaqCategory_Id");

                    b.ToTable("FaqQuestion");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Flow", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DataUpdated");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<int>("Source");

                    b.Property<int>("Type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Flow");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.LoggingTryout", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime>("LastTry")
                        .HasColumnName("LastTry ");

                    b.Property<int>("Tryout");

                    b.Property<string>("UnlockCode")
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserLogin")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK__LoggingT__3214EC0665957100")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("LoggingTryout");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.MockEmail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("From")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("MailHtml")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("To")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("MockEmail");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.MockSms", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("From")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("To")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("MockSms");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("ContractId")
                        .HasColumnName("Contract_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<DateTime>("ExecutionDate");

                    b.Property<string>("From")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int>("Mode");

                    b.Property<bool>("NotifyUnregisteredUsers");

                    b.Property<int>("Receiver");

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("To")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("PK_dbo.Notification")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ContractId")
                        .HasName("IX_Contract_Id");

                    b.HasIndex("ExecutionDate")
                        .HasName("IX_ExecutionDate");

                    b.HasIndex("To")
                        .HasName("IX_Opt_To");

                    b.HasIndex("Mode", "State")
                        .HasName("nci_wi_Notification_9EBAC34AC273FFC7782169241F11BD48");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuperAdmins");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId");

                    b.Property<string>("AdminId1");

                    b.Property<string>("BrandName");

                    b.Property<string>("ConnectionString");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("Host");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int?>("SuperAdminId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AdminId1");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserCode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("AgencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("AgencyFileCode")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("MatriculeCode")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserId")
                        .HasColumnName("User_Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("PK_dbo.UserCode")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MatriculeCode");

                    b.HasIndex("UserId")
                        .HasName("IX_User_Id");

                    b.HasIndex("UserId", "AgencyFileCode")
                        .HasName("IX_UserCode_Opt1");

                    b.ToTable("UserCode");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Nationality")
                        .HasMaxLength(8000)
                        .IsUnicode(false);

                    b.Property<string>("Ssnumber")
                        .HasColumnName("SSNumber")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<string>("UserId");

                    b.HasKey("Id")
                        .HasName("PK_dbo.UserProfile")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("BirthDate")
                        .HasName("IX_BirthDate");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_Email")
                        .HasFilter("([Email] IS NOT NULL AND [Email]<>'')");

                    b.HasIndex("FirstName")
                        .HasName("IX_FirstName");

                    b.HasIndex("LastName")
                        .HasName("IX_LastName");

                    b.HasIndex("Ssnumber")
                        .HasName("IX_SSNumber");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserRole_Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name");

                    b.Property<int>("RoleId");

                    b.Property<int>("RolePermissionGroupId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("RolePermissionGroupId");

                    b.ToTable("UserRole_Permission");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserRole_PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("UserRole_PermissionGroup");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserSupport", b =>
                {
                    b.Property<int>("Id")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .HasMaxLength(75)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateUpdated");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("Registered");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("UserSupport");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppRole")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyXSpace.Core.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Agency", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.Customer", "Customer")
                        .WithMany("Agencies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.AppRole", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.AppUser", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Candidate", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.ConsentAgreement", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.Consent", "Consent")
                        .WithMany("ConsentAgreement")
                        .HasForeignKey("ConsentId")
                        .HasConstraintName("FK_dbo.ConsentAgreement_dbo.Consent_Consent_Id");

                    b.HasOne("MyXSpace.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Contract", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_dbo.Contract_dbo.Client_ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyXSpace.Core.Entities.ContractDetail", "ContractDetail")
                        .WithMany("Contract")
                        .HasForeignKey("ContractDetailId")
                        .HasConstraintName("FK_dbo.Contract_dbo.ContractDetail_ContractDetail_Id");

                    b.HasOne("MyXSpace.Core.Entities.ContractSigned", "ContractSigned")
                        .WithMany("Contract")
                        .HasForeignKey("ContractSignedId")
                        .HasConstraintName("FK_dbo.Contract_dbo.ContractSigned_ContractSigned_Id");

                    b.HasOne("MyXSpace.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Customer", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.FaqQuestion", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.FaqCategory", "FaqCategory")
                        .WithMany("FaqQuestion")
                        .HasForeignKey("FaqCategoryId")
                        .HasConstraintName("FK_dbo.FaqQuestion_dbo.FaqCategory_FaqCategory_Id");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Notification", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.Contract", "Contract")
                        .WithMany("Notification")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_dbo.Notification_dbo.Contract_Contract_Id");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.SuperAdmin", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.Tenant", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId1");

                    b.HasOne("MyXSpace.Core.Entities.SuperAdmin")
                        .WithMany("Tenants")
                        .HasForeignKey("SuperAdminId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserRole_Permission", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.UserRole_PermissionGroup", "RolePermissionGroup")
                        .WithMany()
                        .HasForeignKey("RolePermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyXSpace.Core.Entities.UserSupport", b =>
                {
                    b.HasOne("MyXSpace.Core.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
