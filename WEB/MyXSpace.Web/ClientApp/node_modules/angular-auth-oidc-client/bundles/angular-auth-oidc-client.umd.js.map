{"version":3,"file":"angular-auth-oidc-client.umd.js.map","sources":["ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/services/platform.provider.ts","ng://angular-auth-oidc-client/lib/services/auth-configuration.provider.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"sourcesContent":["import { AuthorizationState } from './authorization-state.enum';\nimport { ValidationResult } from './validation-result.enum';\n\nexport class AuthorizationResult {\n    constructor(\n        public authorizationState: AuthorizationState,\n        public validationResult: ValidationResult\n    ) {}\n}\n","export enum AuthorizationState {\n    authorized = 'authorized',\n    forbidden = 'forbidden',\n    unauthorized = 'unauthorized'\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError'\n}\n","import { ValidationResult } from './validation-result.enum';\n\nexport class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class PlatformProvider {\n    get isBrowser() {\n        return isPlatformBrowser(this.platformId);\n    }\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { OpenIdConfiguration, OpenIdInternalConfiguration } from '../models/auth.configuration';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { PlatformProvider } from './platform.provider';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurationProvider {\n    private DEFAULT_CONFIG: OpenIdInternalConfiguration = {\n        stsServer: 'https://please_set',\n        redirect_url: 'https://please_set',\n        client_id: 'please_set',\n        response_type: 'code',\n        scope: 'openid email profile',\n        hd_param: '',\n        post_logout_redirect_uri: 'https://please_set',\n        start_checksession: false,\n        silent_renew: false,\n        silent_renew_url: 'https://please_set',\n        silent_renew_offset_in_seconds: 0,\n        post_login_route: '/',\n        forbidden_route: '/forbidden',\n        unauthorized_route: '/unauthorized',\n        auto_userinfo: true,\n        auto_clean_state_after_authentication: true,\n        trigger_authorization_result_event: false,\n        log_console_warning_active: true,\n        log_console_debug_active: false,\n        iss_validation_off: false,\n        history_cleanup_off: false,\n        max_id_token_iat_offset_allowed_in_seconds: 3,\n        disable_iat_offset_validation: false,\n        storage: typeof Storage !== 'undefined' ? sessionStorage : null,\n    };\n\n    private INITIAL_AUTHWELLKNOWN: AuthWellKnownEndpoints = {\n        issuer: '',\n        jwks_uri: '',\n        authorization_endpoint: '',\n        token_endpoint: '',\n        userinfo_endpoint: '',\n        end_session_endpoint: '',\n        check_session_iframe: '',\n        revocation_endpoint: '',\n        introspection_endpoint: '',\n    };\n\n    private mergedOpenIdConfiguration: OpenIdInternalConfiguration = this.DEFAULT_CONFIG;\n    private authWellKnownEndpoints: AuthWellKnownEndpoints = this.INITIAL_AUTHWELLKNOWN;\n\n    private onConfigurationChangeInternal = new Subject<OpenIdConfiguration>();\n\n    get openIDConfiguration(): OpenIdInternalConfiguration {\n        return this.mergedOpenIdConfiguration;\n    }\n\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\n        return this.authWellKnownEndpoints;\n    }\n\n    get onConfigurationChange() {\n        return this.onConfigurationChangeInternal.asObservable();\n    }\n\n    constructor(private platformProvider: PlatformProvider) {}\n\n    setup(passedOpenIfConfiguration: OpenIdConfiguration, passedAuthWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.mergedOpenIdConfiguration = { ...this.mergedOpenIdConfiguration, ...passedOpenIfConfiguration };\n        this.setSpecialCases(this.mergedOpenIdConfiguration);\n        this.authWellKnownEndpoints = { ...passedAuthWellKnownEndpoints };\n        this.onConfigurationChangeInternal.next({ ...this.mergedOpenIdConfiguration });\n    }\n\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\n        if (!this.platformProvider.isBrowser) {\n            currentConfig.start_checksession = false;\n            currentConfig.silent_renew = false;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from './auth-configuration.provider';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private configurationProvider: ConfigurationProvider) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.configurationProvider.openIDConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.configurationProvider.openIDConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string) {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n\n        if (iFrameOnParent) {\n            return iFrameOnParent;\n        }\n\n        return this.getIFrameFromWindow(identifier);\n    }\n\n    addIFrameToWindowBody(identifier: string) {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string) {\n        try {\n            return window.parent.document.getElementById(identifier);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private getIFrameFromWindow(identifier: string) {\n        return window.document.getElementById(identifier);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityHelperService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(decoded.split('')\n                .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                .join(''));\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has t have exact three dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from './auth-configuration.provider';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private configProvider: ConfigurationProvider) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.configProvider.openIDConfiguration.storage.getItem(key + '_' + this.configProvider.openIDConfiguration.client_id));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.configProvider.openIDConfiguration.storage.setItem(\n                key + '_' + this.configProvider.openIDConfiguration.client_id,\n                JSON.stringify(value)\n            );\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class OidcSecurityCommon {\n    private storage_auth_result = 'authorizationResult';\n\n    public get authResult(): any {\n        return this.retrieve(this.storage_auth_result);\n    }\n\n    public set authResult(value: any) {\n        this.store(this.storage_auth_result, value);\n    }\n\n    private storage_access_token = 'authorizationData';\n\n    public get accessToken(): string {\n        return this.retrieve(this.storage_access_token) || '';\n    }\n\n    public set accessToken(value: string) {\n        this.store(this.storage_access_token, value);\n    }\n\n    private storage_id_token = 'authorizationDataIdToken';\n\n    public get idToken(): string {\n        return this.retrieve(this.storage_id_token) || '';\n    }\n\n    public set idToken(value: string) {\n        this.store(this.storage_id_token, value);\n    }\n\n    private storage_is_authorized = '_isAuthorized';\n\n    public get isAuthorized(): boolean | undefined {\n        return this.retrieve(this.storage_is_authorized);\n    }\n\n    public set isAuthorized(value: boolean | undefined) {\n        this.store(this.storage_is_authorized, value);\n    }\n\n    private storage_user_data = 'userData';\n\n    public get userData(): any {\n        return this.retrieve(this.storage_user_data);\n    }\n\n    public set userData(value: any) {\n        this.store(this.storage_user_data, value);\n    }\n\n    private storage_auth_nonce = 'authNonce';\n\n    public get authNonce(): string {\n        return this.retrieve(this.storage_auth_nonce) || '';\n    }\n\n    public set authNonce(value: string) {\n        this.store(this.storage_auth_nonce, value);\n    }\n\n    private storage_code_verifier = 'code_verifier';\n\n    public get code_verifier(): string {\n        return this.retrieve(this.storage_code_verifier) || '';\n    }\n\n    public set code_verifier(value: string) {\n        this.store(this.storage_code_verifier, value);\n    }\n\n    private storage_auth_state_control = 'authStateControl';\n\n    public get authStateControl(): string {\n        return this.retrieve(this.storage_auth_state_control) || '';\n    }\n\n    public set authStateControl(value: string) {\n        this.store(this.storage_auth_state_control, value);\n    }\n\n    private storage_session_state = 'session_state';\n\n    public get sessionState(): any {\n        return this.retrieve(this.storage_session_state);\n    }\n\n    public set sessionState(value: any) {\n        this.store(this.storage_session_state, value);\n    }\n\n    private storage_silent_renew_running = 'storage_silent_renew_running';\n\n    public get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storage_silent_renew_running) || '';\n    }\n\n    public set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storage_silent_renew_running, value);\n    }\n\n    private storage_custom_request_params = 'storage_custom_request_params';\n\n    public get customRequestParams(): {\n        [key: string]: string | number | boolean;\n    } {\n        return this.retrieve(this.storage_custom_request_params);\n    }\n\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\n        this.store(this.storage_custom_request_params, value);\n    }\n\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n\n    private retrieve(key: string): any {\n        return this.oidcSecurityStorage.read(key);\n    }\n\n    private store(key: string, value: any) {\n        this.oidcSecurityStorage.write(key, value);\n    }\n\n    resetStorageData(isRenewProcess: boolean) {\n        if (!isRenewProcess) {\n            this.store(this.storage_auth_result, '');\n            this.store(this.storage_session_state, '');\n            this.store(this.storage_silent_renew_running, '');\n            this.store(this.storage_is_authorized, false);\n            this.store(this.storage_access_token, '');\n            this.store(this.storage_id_token, '');\n            this.store(this.storage_user_data, '');\n            this.store(this.storage_code_verifier, '');\n        }\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storage_access_token);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storage_id_token);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign';\nimport { EqualityHelperService } from './oidc-equality-helper.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n\n@Injectable()\nexport class OidcSecurityValidation {\n    constructor(\n        private arrayHelperService: EqualityHelperService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\n    // in UTC until the date/ time.\n    validate_required_id_token(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validate_id_token_iat_max_offset(dataIdToken: any,\n        max_offset_allowed_in_seconds: number,\n        disable_iat_offset_validation: boolean): boolean {\n\n        if (disable_iat_offset_validation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n\n        if (dateTime_iat_id_token == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\n                ' < ' +\n                max_offset_allowed_in_seconds * 1000\n        );\n        return new Date().valueOf() - dateTime_iat_id_token.valueOf() < max_offset_allowed_in_seconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\n        if (dataIdToken.nonce !== local_nonce) {\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                    dataIdToken.iss +\n                    ' authWellKnownEndpoints issuer:' +\n                    authWellKnownEndpoints_issuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n        if (dataIdToken.aud instanceof Array) {\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n\n            if (!result) {\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\n        if ((state as string) !== (local_state as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\n            return false;\n        }\n\n        return true;\n    }\n\n    validate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const header_data = this.tokenHelperService.getHeaderFromToken(id_token, false);\n\n        if (Object.keys(header_data).length === 0 && header_data.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = header_data.kid;\n        const alg = header_data.alg;\n\n        if ('RS256' !== (alg as string)) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n\n        let isValid = false;\n\n        if (!header_data.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            } else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            } else {\n                for (const key of jwtkeys.keys) {\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                        const publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n                        if (!isValid) {\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    config_validate_response_type(response_type: string): boolean {\n        if (response_type === 'id_token token' || response_type === 'id_token') {\n            return true;\n        }\n\n        if (response_type === 'code') {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + response_type);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validate_id_token_at_hash(access_token: any, at_hash: any, isCodeFlow: boolean): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + at_hash);\n\n        // The at_hash is optional for the code flow\n        if (isCodeFlow) {\n            if (!(at_hash as string)) {\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n                return true;\n            }\n        }\n\n        const testdata = this.generate_at_hash('' + access_token);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (at_hash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (at_hash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generate_at_hash(access_token: any): string {\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generate_code_verifier(code_challenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(code_challenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\n\n@Injectable()\nexport class StateValidationService {\n    constructor(\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult();\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\n            this.configurationProvider.openIDConfiguration.response_type === 'code'\n        ) {\n            toReturn.access_token = result.access_token;\n        }\n\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\n\n        if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\n            this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n            toReturn.state = ValidationResult.SignatureFailed;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_nonce(toReturn.decoded_id_token, this.oidcSecurityCommon.authNonce)) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            toReturn.state = ValidationResult.IncorrectNonce;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\n            this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n            toReturn.state = ValidationResult.RequiredPropertyMissing;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.configurationProvider.openIDConfiguration.max_id_token_iat_offset_allowed_in_seconds,\n                this.configurationProvider.openIDConfiguration.disable_iat_offset_validation\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n            toReturn.state = ValidationResult.MaxOffsetExpired;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (this.configurationProvider.wellKnownEndpoints) {\n            if (this.configurationProvider.openIDConfiguration.iss_validation_off) {\n                this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n            } else if (\n                !this.configurationProvider.openIDConfiguration.iss_validation_off &&\n                !this.oidcSecurityValidation.validate_id_token_iss(toReturn.decoded_id_token, this.configurationProvider.wellKnownEndpoints.issuer)\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_aud(toReturn.decoded_id_token, this.configurationProvider.openIDConfiguration.client_id)) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            toReturn.state = ValidationResult.IncorrectAud;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            toReturn.state = ValidationResult.TokenExpired;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (\n            this.configurationProvider.openIDConfiguration.response_type !== 'id_token token' &&\n            this.configurationProvider.openIDConfiguration.response_type !== 'code'\n        ) {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash,\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { from, Observable, Observer, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class OidcSecurityCheckSession {\n    private sessionIframe: any;\n    private iframeMessageEvent: any;\n    private scheduledHeartBeat: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n    private _onCheckSessionChanged = new Subject<any>();\n\n    public get onCheckSessionChanged(): Observable<any> {\n        return this._onCheckSessionChanged.asObservable();\n    }\n\n    constructor(\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    private doesSessionExist(): boolean {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n\n        if (!existingIFrame) {\n            return false;\n        }\n\n        this.sessionIframe = existingIFrame;\n        return true;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return from([this]);\n        }\n\n        if (!this.doesSessionExist()) {\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n            this.iframeMessageEvent = this.messageHandler.bind(this);\n            window.addEventListener('message', this.iframeMessageEvent, false);\n        }\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n            return;\n        }\n\n        if (this.configurationProvider.wellKnownEndpoints.check_session_iframe) {\n            this.sessionIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.check_session_iframe);\n        } else {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n        }\n\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\n            this.sessionIframe.onload = () => {\n                this.lastIFrameRefresh = Date.now();\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n\n    startCheckingSession(clientId: string): void {\n        if (this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.pollServerSession(clientId);\n    }\n\n    stopCheckingSession(): void {\n        if (!this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n    }\n\n    private pollServerSession(clientId: string) {\n        const _pollServerSessionRecur = () => {\n            this.init()\n                .pipe(take(1))\n                .subscribe(() => {\n                    if (this.sessionIframe && clientId) {\n                        this.loggerService.logDebug(this.sessionIframe);\n                        const session_state = this.oidcSecurityCommon.sessionState;\n                        if (session_state) {\n                            this.outstandingMessages++;\n                            this.sessionIframe.contentWindow.postMessage(\n                                clientId + ' ' + session_state,\n                                this.configurationProvider.openIDConfiguration.stsServer\n                            );\n                        } else {\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                            this._onCheckSessionChanged.next();\n                        }\n                    } else {\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\n                        this.loggerService.logDebug(clientId);\n                        this.loggerService.logDebug(this.sessionIframe);\n                        // this.init();\n                    }\n\n                    // after sending three messages with no response, fail.\n                    if (this.outstandingMessages > 3) {\n                        this.loggerService.logError(\n                            `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${\n                                this.outstandingMessages\n                            }. Server unreachable?`\n                        );\n                        this._onCheckSessionChanged.next();\n                    }\n\n                    this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\n                });\n        };\n\n        this.outstandingMessages = 0;\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeat);\n        this.scheduledHeartBeat = null;\n    }\n\n    private messageHandler(e: any) {\n        this.outstandingMessages = 0;\n        if (\n            this.sessionIframe &&\n            e.origin === this.configurationProvider.openIDConfiguration.stsServer &&\n            e.source === this.sessionIframe.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this._onCheckSessionChanged.next();\n            } else {\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nexport interface ConfigResult {\n    authWellknownEndpoints: any;\n    customConfig: any;\n}\n\n@Injectable()\nexport class OidcConfigService {\n    private configurationLoadedInternal = new ReplaySubject<ConfigResult>(1);\n\n    public get onConfigurationLoaded(): Observable<ConfigResult> {\n        return this.configurationLoadedInternal.asObservable();\n    }\n\n    constructor(private readonly httpClient: HttpClient) { }\n\n    load(configUrl: string) {\n        return this.httpClient\n            .get(configUrl)\n            .pipe(\n                switchMap(clientConfiguration => {\n                    return this.loadUsingConfiguration(clientConfiguration);\n                }),\n                catchError(error => {\n                    console.error(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\n                    this.configurationLoadedInternal.next(undefined);\n                    return of(false);\n                })\n            )\n            .toPromise();\n    }\n\n    load_using_stsServer(stsServer: string) {\n        return this.loadUsingConfiguration({ stsServer }).toPromise();\n    }\n\n    load_using_custom_stsServer(url: string) {\n        return this.httpClient\n            .get(url)\n            .pipe(\n                switchMap(wellKnownEndpoints => {\n                    this.configurationLoadedInternal.next({\n                        authWellknownEndpoints: wellKnownEndpoints,\n                        customConfig: { stsServer: url },\n                    });\n                    return of(true);\n                }),\n                catchError(error => {\n                    console.error(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\n                    this.configurationLoadedInternal.next(undefined);\n                    return of(false);\n                })\n            )\n            .toPromise();\n    }\n\n    private loadUsingConfiguration(clientConfig: any) {\n        if (!clientConfig.stsServer) {\n            console.error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`, clientConfig);\n            throw new Error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`);\n        }\n\n        const url = `${clientConfig.stsServer}/.well-known/openid-configuration`;\n\n        return this.httpClient.get(url).pipe(\n            switchMap(wellKnownEndpoints => {\n                this.configurationLoadedInternal.next({\n                    authWellknownEndpoints: wellKnownEndpoints,\n                    customConfig: clientConfig,\n                });\n                return of(true);\n            }),\n            catchError(error => {\n                console.error(`OidcConfigService 'load_using_stsServer' threw an error on calling ${url}`, error);\n                this.configurationLoadedInternal.next(undefined);\n                return of(false);\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class OidcSecuritySilentRenew {\n    private sessionIframe: any;\n    private isRenewInitialized = false;\n\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\n\n    initRenew() {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n\n        if (!existingIFrame) {\n            this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n\n        this.isRenewInitialized = true;\n    }\n\n    startRenew(url: string): Observable<any> {\n        if (!this.isRenewInitialized) {\n            this.initRenew();\n        }\n\n        this.sessionIframe = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n\n        this.loggerService.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.contentWindow.location.replace(url);\n\n        return Observable.create((observer: Observer<any>) => {\n            this.sessionIframe.onload = () => {\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\n@Injectable()\nexport class OidcSecurityUserService {\n    private userData: any = '';\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    initUserData() {\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\n    }\n\n    getUserData(): any {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n\n        return this.userData;\n    }\n\n    setUserData(value: any): void {\n        this.userData = value;\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.oidcSecurityCommon.getAccessToken();\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            throw Error('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData =\n            this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.userinfo_endpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.getIdentityUserData(this.configurationProvider.wellKnownEndpoints.userinfo_endpoint || '', token);\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, from, Observable, of, Subject, throwError as observableThrowError, timer } from 'rxjs';\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { OpenIdConfiguration } from '../models/auth.configuration';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { AuthorizationResult } from '../models/authorization-result';\nimport { AuthorizationState } from '../models/authorization-state.enum';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { StateValidationService } from './oidc-security-state-validation.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { UriEncoder } from './uri-encoder';\n\n@Injectable()\nexport class OidcSecurityService {\n    private _onModuleSetup = new Subject<boolean>();\n    private _onCheckSessionChanged = new Subject<boolean>();\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\n\n    public get onModuleSetup(): Observable<boolean> {\n        return this._onModuleSetup.asObservable();\n    }\n\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\n        return this._onAuthorizationResult.asObservable();\n    }\n\n    public get onCheckSessionChanged(): Observable<boolean> {\n        return this._onCheckSessionChanged.asObservable();\n    }\n\n    public get onConfigurationChange(): Observable<OpenIdConfiguration> {\n        return this.configurationProvider.onConfigurationChange;\n    }\n\n    checkSessionChanged = false;\n    moduleSetup = false;\n\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\n\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\n    private _isSetupAndAuthorized: Observable<boolean>;\n\n    private _userData = new BehaviorSubject<any>('');\n    private authWellKnownEndpointsLoaded = false;\n    private runTokenValidationRunning = false;\n    private _scheduledHeartBeat: any;\n    private boundSilentRenewEvent: any;\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private stateValidationService: StateValidationService,\n        private router: Router,\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n        private oidcSecurityUserService: OidcSecurityUserService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private zone: NgZone,\n        private readonly httpClient: HttpClient,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\n            this.moduleSetup = true;\n            this._isModuleSetup.next(true);\n        });\n\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\n            filter((isModuleSetup: boolean) => isModuleSetup),\n            switchMap(() => {\n                if (!this.configurationProvider.openIDConfiguration.silent_renew) {\n                    this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`);\n                    return from([true]);\n                }\n\n                const race$ = this._isAuthorized.asObservable().pipe(\n                    filter((isAuthorized: boolean) => isAuthorized),\n                    take(1),\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\n                    race(\n                        this._onAuthorizationResult.pipe(\n                            take(1),\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\n                            map(() => true)\n                        ),\n                        timer(5000).pipe(\n                            // backup, if nothing happens after 5 seconds stop waiting and emit\n                            tap(() => {\n                                this.resetAuthorizationData(false);\n                                this.oidcSecurityCommon.authNonce = '';\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\n                            }),\n                            map(() => true)\n                        )\n                    )\n                );\n\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\n                    // login not running, or a second silent renew, user must login first before this will work.\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\n                    this.refreshSession();\n                }\n\n                return race$;\n            }),\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\n            switchMapTo(this._isAuthorized.asObservable()),\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\n            shareReplay(1)\n        );\n\n        this._isSetupAndAuthorized\n            .pipe(filter(() => this.configurationProvider.openIDConfiguration.start_checksession))\n            .subscribe(isSetupAndAuthorized => {\n                if (isSetupAndAuthorized) {\n                    this.oidcSecurityCheckSession.startCheckingSession(this.configurationProvider.openIDConfiguration.client_id);\n                } else {\n                    this.oidcSecurityCheckSession.stopCheckingSession();\n                }\n            });\n    }\n\n    setupModule(openIdConfiguration: OpenIdConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\n        this.configurationProvider.setup(openIdConfiguration, authWellKnownEndpoints);\n\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\n            this.loggerService.logDebug('onCheckSessionChanged');\n            this.checkSessionChanged = true;\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\n        });\n\n        const userData = this.oidcSecurityCommon.userData;\n        if (userData) {\n            this.setUserData(userData);\n        }\n\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\n        if (isAuthorized) {\n            this.loggerService.logDebug('IsAuthorized setup module');\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n            if (\n                this.oidcSecurityValidation.isTokenExpired(\n                    this.oidcSecurityCommon.idToken,\n                    this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\n                )\n            ) {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n            } else {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n                this.setIsAuthorized(isAuthorized);\n            }\n            this.runTokenValidation();\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\n\n        this._onModuleSetup.next();\n\n        if (this.configurationProvider.openIDConfiguration.silent_renew) {\n            this.oidcSecuritySilentRenew.initRenew();\n\n            // Support authorization via DOM events.\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\n            //      We only ever want the latest setup service to be reacting to this event.\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\n\n            const instanceId = Math.random();\n\n            const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\n                if (e.detail !== instanceId) {\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\n                }\n            }).bind(this);\n\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\n\n            window.dispatchEvent(\n                new CustomEvent('oidc-silent-renew-init', {\n                    detail: instanceId,\n                })\n            );\n        }\n    }\n\n    getUserData(): Observable<any> {\n        return this._userData.asObservable();\n    }\n\n    getIsModuleSetup(): Observable<boolean> {\n        return this._isModuleSetup.asObservable();\n    }\n\n    getIsAuthorized(): Observable<boolean> {\n        return this._isSetupAndAuthorized;\n    }\n\n    getToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    getState(): string {\n        return this.oidcSecurityCommon.authStateControl;\n    }\n\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\n        this.oidcSecurityCommon.customRequestParams = params;\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(urlHandler?: (url: string) => any) {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            this.authWellKnownEndpointsLoaded = true;\n        }\n\n        if (!this.authWellKnownEndpointsLoaded) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.configurationProvider.openIDConfiguration.response_type)) {\n            // invalid response_type\n            return;\n        }\n\n        this.resetAuthorizationData(false);\n\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (!state) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n        // Code Flow\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    true,\n                    code_challenge,\n                    this.configurationProvider.openIDConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        } else {\n            // Implicit Flow\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    false,\n                    '',\n                    this.configurationProvider.openIDConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectTo(url);\n        }\n    }\n\n    // Code Flow\n    authorizedCallbackWithCode(urlToCheck: string) {\n        const urlParts = urlToCheck.split('?');\n        const params = new HttpParams({\n            fromString: urlParts[1],\n        });\n        const code = params.get('code');\n        const state = params.get('state');\n        const session_state = params.get('session_state');\n\n        if (code && state) {\n            this.requestTokensWithCode(code, state, session_state);\n        }\n    }\n\n    // Code Flow\n    requestTokensWithCode(code: string, state: string, session_state: string | null) {\n        this._isModuleSetup\n            .pipe(\n                filter((isModuleSetup: boolean) => isModuleSetup),\n                take(1)\n            )\n            .subscribe(() => {\n                this.requestTokensWithCodeProcedure(code, state, session_state);\n            });\n    }\n\n    // Code Flow with PCKE\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null) {\n        let tokenRequestUrl = '';\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\n        }\n\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            // ValidationResult.StatesDoNotMatch;\n            return;\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        let data =\n            `grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}` +\n            `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${\n                this.configurationProvider.openIDConfiguration.redirect_url\n            }`;\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\n            data =\n                `grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}` +\n                `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${\n                    this.configurationProvider.openIDConfiguration.silent_renew_url\n                }`;\n        }\n\n        this.httpClient\n            .post(tokenRequestUrl, data, { headers: headers })\n            .pipe(\n                map(response => {\n                    let obj: any = new Object();\n                    obj = response;\n                    obj.state = state;\n                    obj.session_state = session_state;\n\n                    this.authorizedCodeFlowCallbackProcedure(obj);\n                }),\n                catchError(error => {\n                    this.loggerService.logError(error);\n                    this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\n                    return of(false);\n                })\n            )\n            .subscribe();\n    }\n\n    // Code Flow\n    private authorizedCodeFlowCallbackProcedure(result: any) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n\n        hash = hash || window.location.hash.substr(1);\n\n        const result: any = hash.split('&').reduce(function(resultData: any, item: string) {\n            const parts = item.split('=');\n            resultData[<string>parts.shift()] = parts.join('=');\n            return resultData;\n        }, {});\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    authorizedImplicitFlowCallback(hash?: string) {\n        this._isModuleSetup\n            .pipe(\n                filter((isModuleSetup: boolean) => isModuleSetup),\n                take(1)\n            )\n            .subscribe(() => {\n                this.authorizedImplicitFlowCallbackProcedure(hash);\n            });\n    }\n\n    private redirectTo(url: string) {\n        window.location.href = url;\n    }\n\n    // Implicit Flow\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\n        this.oidcSecurityCommon.authResult = result;\n\n        if (!this.configurationProvider.openIDConfiguration.history_cleanup_off && !isRenewProcess) {\n            // reset the history to remove the tokens\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (result.error) {\n            if (isRenewProcess) {\n                this.loggerService.logDebug(result);\n            } else {\n                this.loggerService.logWarning(result);\n            }\n\n            if ((result.error as string) === 'login_required') {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\n            } else {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError));\n            }\n\n            this.resetAuthorizationData(false);\n            this.oidcSecurityCommon.authNonce = '';\n\n            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n            }\n        } else {\n            this.loggerService.logDebug(result);\n\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n            this.getSigningKeys().subscribe(\n                jwtKeys => {\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\n\n                    if (validationResult.authResponseIsValid) {\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\n                                response => {\n                                    if (response) {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state)\n                                        );\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\n                                        }\n                                    } else {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state)\n                                        );\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n                                        }\n                                    }\n                                },\n                                err => {\n                                    /* Something went wrong while getting signing key */\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\n                                }\n                            );\n                        } else {\n                            if (!isRenewProcess) {\n                                // userData is set to the id_token decoded, auto get user data set to false\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\n                            }\n\n                            this.runTokenValidation();\n\n                            this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.authorized, validationResult.state));\n                            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\n                            }\n                        }\n                    } else {\n                        // something went wrong\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\n                        this.loggerService.logWarning(window.location.hash);\n                        this.resetAuthorizationData(false);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state));\n                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n                        }\n                    }\n                },\n                err => {\n                    /* Something went wrong while getting signing key */\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\n                    this.oidcSecurityCommon.silentRenewRunning = '';\n                }\n            );\n        }\n    }\n\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\n        result = result ? result : this.oidcSecurityCommon.authResult;\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\n\n        return new Observable<boolean>(observer => {\n            // flow id_token token\n            if (\n                this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\n            ) {\n                if (isRenewProcess && this._userData.value) {\n                    this.oidcSecurityCommon.sessionState = result.session_state;\n                    observer.next(true);\n                    observer.complete();\n                } else {\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\n\n                        const userData = this.oidcSecurityUserService.getUserData();\n\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\n                            this.setUserData(userData);\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\n\n                            this.oidcSecurityCommon.sessionState = result.session_state;\n\n                            this.runTokenValidation();\n                            observer.next(true);\n                        } else {\n                            // something went wrong, userdata sub does not match that from id_token\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                            this.resetAuthorizationData(false);\n                            observer.next(false);\n                        }\n                        observer.complete();\n                    });\n                }\n            } else {\n                // flow id_token\n                this.loggerService.logDebug('authorizedCallback id_token flow');\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n\n                // userData is set to the id_token decoded. No access_token.\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\n                this.setUserData(this.oidcSecurityUserService.getUserData());\n\n                this.oidcSecurityCommon.sessionState = result.session_state;\n\n                this.runTokenValidation();\n\n                observer.next(true);\n                observer.complete();\n            }\n        });\n    }\n\n    logoff(urlHandler?: (url: string) => any) {\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n        if (this.configurationProvider.wellKnownEndpoints) {\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n\n                this.resetAuthorizationData(false);\n\n                if (this.configurationProvider.openIDConfiguration.start_checksession && this.checkSessionChanged) {\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\n                } else if (urlHandler) {\n                    urlHandler(url);\n                } else {\n                    this.redirectTo(url);\n                }\n            } else {\n                this.resetAuthorizationData(false);\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        }\n    }\n\n    refreshSession(): Observable<any> {\n        if (!this.configurationProvider.openIDConfiguration.silent_renew) {\n            return from([false]);\n        }\n\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (state === '' || state === null) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n\n        // Code Flow\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    true,\n                    code_challenge,\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        } else {\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    false,\n                    '',\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\n        return this.oidcSecuritySilentRenew.startRenew(url);\n    }\n\n    handleError(error: any) {\n        this.loggerService.logError(error);\n        if (error.status === 403 || error.status === '403') {\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\n            } else {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.forbidden_route]);\n            }\n        } else if (error.status === 401 || error.status === '401') {\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n\n            this.resetAuthorizationData(!!silentRenew);\n\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\n            } else {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n            }\n        }\n    }\n\n    startCheckingSilentRenew(): void {\n        this.runTokenValidation();\n    }\n\n    stopCheckingSilentRenew(): void {\n        if (this._scheduledHeartBeat) {\n            clearTimeout(this._scheduledHeartBeat);\n            this._scheduledHeartBeat = null;\n            this.runTokenValidationRunning = false;\n        }\n    }\n\n    resetAuthorizationData(isRenewProcess: boolean): void {\n        if (!isRenewProcess) {\n            if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\n                // Clear user data. Fixes #97.\n                this.setUserData('');\n            }\n\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n            this.checkSessionChanged = false;\n            this.setIsAuthorized(false);\n        }\n    }\n\n    getEndSessionUrl(): string | undefined {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n            }\n        }\n    }\n\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        if (result.error) {\n            return new ValidateStateResult('', '', false, {});\n        }\n\n        return this.stateValidationService.validateState(result, jwtKeys);\n    }\n\n    private setUserData(userData: any): void {\n        this.oidcSecurityCommon.userData = userData;\n        this._userData.next(userData);\n    }\n\n    private setIsAuthorized(isAuthorized: boolean): void {\n        this._isAuthorized.next(isAuthorized);\n    }\n\n    private setAuthorizationData(access_token: any, id_token: any) {\n        if (this.oidcSecurityCommon.accessToken !== '') {\n            this.oidcSecurityCommon.accessToken = '';\n        }\n\n        this.loggerService.logDebug(access_token);\n        this.loggerService.logDebug(id_token);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n        this.oidcSecurityCommon.accessToken = access_token;\n        this.oidcSecurityCommon.idToken = id_token;\n        this.setIsAuthorized(true);\n        this.oidcSecurityCommon.isAuthorized = true;\n    }\n\n    private createAuthorizeUrl(\n        isCodeFlow: boolean,\n        code_challenge: string,\n        redirect_url: string,\n        nonce: string,\n        state: string,\n        authorization_endpoint: string,\n        prompt?: string\n    ): string {\n        const urlParts = authorization_endpoint.split('?');\n        const authorizationUrl = urlParts[0];\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('client_id', this.configurationProvider.openIDConfiguration.client_id);\n        params = params.append('redirect_uri', redirect_url);\n        params = params.append('response_type', this.configurationProvider.openIDConfiguration.response_type);\n        params = params.append('scope', this.configurationProvider.openIDConfiguration.scope);\n        params = params.append('nonce', nonce);\n        params = params.append('state', state);\n\n        if (isCodeFlow) {\n            params = params.append('code_challenge', code_challenge);\n            params = params.append('code_challenge_method', 'S256');\n        }\n\n        if (prompt) {\n            params = params.append('prompt', prompt);\n        }\n\n        if (this.configurationProvider.openIDConfiguration.hd_param) {\n            params = params.append('hd', this.configurationProvider.openIDConfiguration.hd_param);\n        }\n\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\n\n        Object.keys(customParams).forEach(key => {\n            params = params.append(key, customParams[key].toString());\n        });\n\n        return `${authorizationUrl}?${params}`;\n    }\n\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\n        const urlParts = end_session_endpoint.split('?');\n\n        const authorizationEndsessionUrl = urlParts[0];\n\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('id_token_hint', id_token_hint);\n        params = params.append('post_logout_redirect_uri', this.configurationProvider.openIDConfiguration.post_logout_redirect_uri);\n\n        return `${authorizationEndsessionUrl}?${params}`;\n    }\n\n    private getSigningKeys(): Observable<JwtKeys> {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logDebug('jwks_uri: ' + this.configurationProvider.wellKnownEndpoints.jwks_uri);\n\n            return this.oidcDataService\n                .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwks_uri || '')\n                .pipe(catchError(this.handleErrorGetSigningKeys));\n        } else {\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\n        }\n\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\n    }\n\n    private handleErrorGetSigningKeys(error: Response | any) {\n        let errMsg: string;\n        if (error instanceof Response) {\n            const body = error.json() || {};\n            const err = JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return observableThrowError(errMsg);\n    }\n\n    private runTokenValidation() {\n        if (this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silent_renew) {\n            return;\n        }\n        this.runTokenValidationRunning = true;\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\n\n        /**\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\n         */\n        const silentRenewHeartBeatCheck = () => {\n            this.loggerService.logDebug(\n                'silentRenewHeartBeatCheck\\r\\n' +\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\n                    `\\t_userData.value: ${!!this._userData.value}`\n            );\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\n                if (\n                    this.oidcSecurityValidation.isTokenExpired(\n                        this.oidcSecurityCommon.idToken,\n                        this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\n                    )\n                ) {\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n\n                    if (this.configurationProvider.openIDConfiguration.silent_renew) {\n                        this.refreshSession().subscribe(\n                            () => {\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            },\n                            (err: any) => {\n                                this.loggerService.logError('Error: ' + err);\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            }\n                        );\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\n                        We don't want to schedule another check so we have to return here */\n                        return;\n                    } else {\n                        this.resetAuthorizationData(false);\n                    }\n                }\n            }\n\n            /* Delay 3 seconds and do the next check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n        };\n\n        this.zone.runOutsideAngular(() => {\n            /* Initial heartbeat check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\n        });\n    }\n\n    private silentRenewEventHandler(e: CustomEvent) {\n        this.loggerService.logDebug('silentRenewEventHandler');\n\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            const urlParts = e.detail.toString().split('?');\n            const params = new HttpParams({\n                fromString: urlParts[1],\n            });\n            const code = params.get('code');\n            const state = params.get('state');\n            const session_state = params.get('session_state');\n            const error = params.get('error');\n            if (code && state) {\n                this.requestTokensWithCodeProcedure(code, state, session_state);\n            }\n            if (error) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\n                this.resetAuthorizationData(false);\n                this.oidcSecurityCommon.authNonce = '';\n                this.loggerService.logDebug(e.detail.toString());\n            }\n        } else {\n            // ImplicitFlow\n            this.authorizedImplicitFlowCallback(e.detail);\n        }\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { IFrameService } from '../services/existing-iframe.service';\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityHelperService,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage,\n                },\n            ],\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n"],"names":["HttpHeaders","Injectable","HttpClient","isPlatformBrowser","Inject","PLATFORM_ID","Subject","tslib_1.__values","KEYUTIL","KJUR","hextob64u","from","Observable","take","NgZone","ReplaySubject","switchMap","catchError","of","map","router","BehaviorSubject","filter","tap","race","timer","switchMapTo","shareReplay","HttpParams","observableThrowError","Router","NgModule"],"mappings":"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"}
