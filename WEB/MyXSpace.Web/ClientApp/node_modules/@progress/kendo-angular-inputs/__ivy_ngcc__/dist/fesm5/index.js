import { ChangeDetectorRef, Component, ContentChild, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, Injector, Input, NgModule, NgZone, Optional, Output, Renderer2, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, forwardRef, isDevMode } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { Observable, Subscription, fromEvent, interval, merge } from 'rxjs';
import { concatMap, filter, skip, startWith, takeUntil } from 'rxjs/operators';
import { SliderModel, SliderUtil } from '@telerik/kendo-inputs-common';
import { __extends } from 'tslib';
import { ComponentMessages, L10N_PREFIX, LocalizationService, RTL } from '@progress/kendo-angular-l10n';
import { DraggableModule, EventsModule, KendoInput, Keys, ResizeSensorModule, anyChanged, guid, hasObservers, isChanged, isDocumentAvailable } from '@progress/kendo-angular-common';
import { browser, mobileOS } from '@progress/kendo-common';
import { IntlService } from '@progress/kendo-angular-intl';
import { CommonModule } from '@angular/common';
import { PopupModule, PopupService } from '@progress/kendo-angular-popup';
import { Color, namedColors, parseColor } from '@progress/kendo-drawing';

/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-common';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["wrap"];
const _c1 = ["track"];
const _c2 = ["draghandle"];
const _c3 = ["sliderSelection"];
const _c4 = ["ticks"];
const _c5 = ["decreaseButton"];
const _c6 = ["increaseButton"];
const _c7 = ["kendoSliderLocalizedMessages", "", 6, "increment", "decrement", "dragHandle"];
var I18N_8;
if (ngI18nClosureMode) {
    /**
     * @desc The title of the **Increase** button of the Slider.
     * @meaning kendo.slider.increment
     */ 
    const MSG_EXTERNAL_8302125540024939132$$DIST_FESM5_INDEX_JS_9 = goog.getMsg("increment");
    I18N_8 = MSG_EXTERNAL_8302125540024939132$$DIST_FESM5_INDEX_JS_9;
}
else {
    I18N_8 = ɵngcc0.ɵɵi18nLocalize("increment");
}
var I18N_10;
if (ngI18nClosureMode) {
    /**
     * @desc The title of the **Decrease** button of the Slider.
     * @meaning kendo.slider.decrement
     */ 
    const MSG_EXTERNAL_652458644240352212$$DIST_FESM5_INDEX_JS_11 = goog.getMsg("decrement");
    I18N_10 = MSG_EXTERNAL_652458644240352212$$DIST_FESM5_INDEX_JS_11;
}
else {
    I18N_10 = ɵngcc0.ɵɵi18nLocalize("decrement");
}
var I18N_12;
if (ngI18nClosureMode) {
    /**
     * @desc The title of the drag handle of the Slider.
     * @meaning kendo.slider.dragHandle
     */ 
    const MSG_EXTERNAL_9117416417579607469$$DIST_FESM5_INDEX_JS_13 = goog.getMsg("Drag");
    I18N_12 = MSG_EXTERNAL_9117416417579607469$$DIST_FESM5_INDEX_JS_13;
}
else {
    I18N_12 = ɵngcc0.ɵɵi18nLocalize("Drag");
}
const _c14 = ["increment", I18N_8, "decrement", I18N_10, "dragHandle", I18N_12];
const _c15 = [1, "k-slider-wrap", 3, "id", "kendoEventsOutsideAngular"];
const _c16 = ["wrap", ""];
const _c17 = ["class", "k-button k-button-decrease", 3, "title", 4, "ngIf"];
const _c18 = ["class", "k-button k-button-increase", 3, "title", 4, "ngIf"];
const _c19 = ["kendoSliderTicks", "", 3, "tickTitle", "vertical", "step", "largeStep", "min", "max", "labelTemplate", 4, "ngIf"];
const _c20 = [1, "k-slider-track"];
const _c21 = ["track", ""];
const _c22 = [1, "k-slider-selection"];
const _c23 = ["sliderSelection", ""];
const _c24 = ["kendoDraggable", "", 1, "k-draghandle", 3, "title", "kendoPress", "kendoDrag", "kendoRelease"];
const _c25 = ["draghandle", ""];
const _c26 = [3, "resize"];
const _c27 = [1, "k-button", "k-button-decrease", 3, "title"];
const _c28 = ["decreaseButton", ""];
const _c29 = [1, "k-icon"];
function SliderComponent_a_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", _c27, _c28);
    ɵngcc0.ɵɵelementStart(2, "span", _c29);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r153 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ctx_r153.decrementMessage);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r153.decrementMessage);
    ɵngcc0.ɵɵselect(2);
    ɵngcc0.ɵɵclassProp("k-i-arrow-w", !ctx_r153.vertical);
    ɵngcc0.ɵɵclassProp("k-i-arrow-s", ctx_r153.vertical);
    ɵngcc0.ɵɵstylingApply();
} }
const _c30 = [1, "k-button", "k-button-increase", 3, "title"];
const _c31 = ["increaseButton", ""];
function SliderComponent_a_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", _c30, _c31);
    ɵngcc0.ɵɵelementStart(2, "span", _c29);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r154 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ctx_r154.incrementMessage);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r154.incrementMessage);
    ɵngcc0.ɵɵselect(2);
    ɵngcc0.ɵɵclassProp("k-i-arrow-e", !ctx_r154.vertical);
    ɵngcc0.ɵɵclassProp("k-i-arrow-n", ctx_r154.vertical);
    ɵngcc0.ɵɵstylingApply();
} }
const _c32 = ["kendoSliderTicks", "", 3, "tickTitle", "vertical", "step", "largeStep", "min", "max", "labelTemplate"];
const _c33 = ["ticks", ""];
function SliderComponent_ul_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ul", _c32, _c33);
} if (rf & 2) {
    const ctx_r155 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("tickTitle", ctx_r155.title)("vertical", ctx_r155.vertical)("step", ctx_r155.smallStep)("largeStep", ctx_r155.largeStep)("min", ctx_r155.min)("max", ctx_r155.max)("labelTemplate", ctx_r155.labelTemplate == null ? null : ctx_r155.labelTemplate.templateRef);
} }
const _c34 = function (a0, a1, a2, a3) { return { focus: a0, blur: a1, click: a2, keydown: a3 }; };
const _c35 = ["wrapper"];
const _c36 = ["kendoSwitchLocalizedMessages", "", 6, "on", "off"];
var I18N_37;
if (ngI18nClosureMode) {
    /**
     * @desc The **On** label of the Switch.
     * @meaning kendo.switch.on
     */ 
    const MSG_EXTERNAL_818154782831456441$$DIST_FESM5_INDEX_JS_38 = goog.getMsg("ON");
    I18N_37 = MSG_EXTERNAL_818154782831456441$$DIST_FESM5_INDEX_JS_38;
}
else {
    I18N_37 = ɵngcc0.ɵɵi18nLocalize("ON");
}
var I18N_39;
if (ngI18nClosureMode) {
    /**
     * @desc The **Off** label of the Switch.
     * @meaning kendo.switch.off
     */ 
    const MSG_EXTERNAL_759820891948194060$$DIST_FESM5_INDEX_JS_40 = goog.getMsg("OFF");
    I18N_39 = MSG_EXTERNAL_759820891948194060$$DIST_FESM5_INDEX_JS_40;
}
else {
    I18N_39 = ɵngcc0.ɵɵi18nLocalize("OFF");
}
const _c41 = ["on", I18N_37, "off", I18N_39];
const _c42 = [1, "k-switch-container", 3, "id", "kendoEventsOutsideAngular"];
const _c43 = ["wrapper", ""];
const _c44 = [1, "k-switch-label-on"];
const _c45 = [1, "k-switch-label-off"];
const _c46 = [1, "k-switch-handle"];
const _c47 = function (a0, a1, a2, a3) { return { click: a0, keydown: a1, focus: a2, blur: a3 }; };
const _c48 = ["class", "k-label", 3, "for", 4, "ngIf"];
const _c49 = [1, "k-label", 3, "for"];
function TextBoxContainerComponent_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", _c49);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r163 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("for", ctx_r163.id);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r163.floatingLabel);
} }
const _c50 = ["*"];
const _c51 = ["numericInput"];
const _c52 = ["numericWrap"];
const _c53 = ["kendoNumericTextBoxLocalizedMessages", "", 6, "increment", "decrement"];
var I18N_54;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the **Increment** button in the NumericTextBox
     * @meaning kendo.numerictextbox.increment
     */ 
    const MSG_EXTERNAL_4467784268438010275$$DIST_FESM5_INDEX_JS_55 = goog.getMsg("Increase value");
    I18N_54 = MSG_EXTERNAL_4467784268438010275$$DIST_FESM5_INDEX_JS_55;
}
else {
    I18N_54 = ɵngcc0.ɵɵi18nLocalize("Increase value");
}
var I18N_56;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the **Decrement** button in the NumericTextBox
     * @meaning kendo.numerictextbox.decrement
     */ 
    const MSG_EXTERNAL_3960022057994897997$$DIST_FESM5_INDEX_JS_57 = goog.getMsg("Decrease value");
    I18N_56 = MSG_EXTERNAL_3960022057994897997$$DIST_FESM5_INDEX_JS_57;
}
else {
    I18N_56 = ɵngcc0.ɵɵi18nLocalize("Decrease value");
}
const _c58 = ["increment", I18N_54, "decrement", I18N_56];
const _c59 = [1, "k-numeric-wrap", 3, "kendoEventsOutsideAngular"];
const _c60 = ["numericWrap", ""];
const _c61 = ["role", "spinbutton", "autocomplete", "off", "autocorrect", "off", 1, "k-input", "k-formatted-value", 3, "id", "tabindex", "disabled", "readonly", "kendoEventsOutsideAngular"];
const _c62 = ["numericInput", ""];
const _c63 = ["class", "k-select", 3, "kendoEventsOutsideAngular", 4, "ngIf"];
const _c64 = [1, "k-select", 3, "kendoEventsOutsideAngular"];
const _c65 = [1, "k-link", "k-link-increase", 3, "kendoEventsOutsideAngular", "title"];
const _c66 = [1, "k-icon", "k-i-arrow-n"];
const _c67 = [1, "k-link", "k-link-decrease", 3, "kendoEventsOutsideAngular", "title"];
const _c68 = [1, "k-icon", "k-i-arrow-s"];
const _c69 = function (a0, a1) { return { mouseup: a0, mouseleave: a1 }; };
const _c70 = function (a0) { return { mousedown: a0 }; };
function NumericTextBoxComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", _c64);
    ɵngcc0.ɵɵelementStart(1, "span", _c65);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelement(2, "span", _c66);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", _c67);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelement(4, "span", _c68);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r166 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(9, _c69, ctx_r166.releaseArrow, ctx_r166.releaseArrow));
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵclassProp("k-state-active", ctx_r166.arrowDirection === ctx_r166.ArrowDirection.Up);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(12, _c70, ctx_r166.increasePress))("title", ctx_r166.incrementTitle);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r166.incrementTitle);
    ɵngcc0.ɵɵselect(3);
    ɵngcc0.ɵɵclassProp("k-state-active", ctx_r166.arrowDirection === ctx_r166.ArrowDirection.Down);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction1(14, _c70, ctx_r166.decreasePress))("title", ctx_r166.decrementTitle);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r166.decrementTitle);
} }
const _c71 = function (a0, a1) { return { mousewheel: a0, DOMMouseScroll: a1 }; };
const _c72 = function (a0, a1, a2, a3, a4, a5) { return { dragenter: a0, keydown: a1, input: a2, focus: a3, blur: a4, paste: a5 }; };
const _c73 = ["input"];
const _c74 = ["type", "text", "autocomplete", "off", "autocorrect", "off", "autocapitalize", "off", "spellcheck", "false", 1, "k-textbox", 3, "id", "tabindex", "disabled", "readonly", "kendoEventsOutsideAngular"];
const _c75 = ["input", ""];
const _c76 = function (a0, a1, a2, a3, a4) { return { focus: a0, blur: a1, click: a2, dragstart: a3, drop: a4 }; };
const _c77 = ["tickElement"];
const _c78 = ["kendoSliderTicks", ""];
const _c79 = ["role", "presentation", 3, "ngClass", "title", 4, "ngFor", "ngForOf"];
const _c80 = ["defaultLabel", ""];
const _c81 = ["role", "presentation", 3, "ngClass", "title"];
const _c82 = ["tickElement", ""];
const _c83 = [3, "ngSwitch"];
const _c84 = ["class", "k-label", 4, "ngSwitchCase"];
const _c85 = [4, "ngSwitchCase"];
const _c86 = [1, "k-label"];
const _c87 = [3, "ngTemplateOutlet", "ngTemplateOutletContext"];
function SliderTicksComponent_li_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", _c86);
    ɵngcc0.ɵɵelementContainer(1, _c87);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tick_r171 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r173 = ɵngcc0.ɵɵnextContext();
    const _r169 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r173.labelTemplate || _r169)("ngTemplateOutletContext", tick_r171);
} }
function SliderTicksComponent_li_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, "\u00A0");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SliderTicksComponent_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", _c81, _c82);
    ɵngcc0.ɵɵelementContainerStart(2, _c83);
    ɵngcc0.ɵɵtemplate(3, SliderTicksComponent_li_0_span_3_Template, 2, 2, "span", _c84);
    ɵngcc0.ɵɵtemplate(4, SliderTicksComponent_li_0_ng_container_4_Template, 2, 0, "ng-container", _c85);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tick_r171 = ctx.$implicit;
    const ctx_r168 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r168.tickTitle(tick_r171.value));
    ɵngcc0.ɵɵproperty("ngClass", tick_r171.classes);
    ɵngcc0.ɵɵselect(2);
    ɵngcc0.ɵɵproperty("ngSwitch", tick_r171.large);
    ɵngcc0.ɵɵselect(3);
    ɵngcc0.ɵɵproperty("ngSwitchCase", true);
    ɵngcc0.ɵɵselect(4);
    ɵngcc0.ɵɵproperty("ngSwitchCase", false);
} }
function SliderTicksComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const value_r176 = ctx.value;
    const ctx_r170 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r170.tickTitle(value_r176), " ");
} }
const _c88 = ["palette"];
const _c89 = ["container"];
const _c90 = ["popupTemplate"];
const _c91 = [3, "ngClass", "focus", "blur", "mousedown", "keydown"];
const _c92 = ["class", "k-selected-color", 3, "background-color", "click", 4, "ngIf"];
const _c93 = ["class", "k-tool-icon", 3, "ngClass", "click", 4, "ngIf"];
const _c94 = [1, "k-select", 3, "click"];
const _c95 = ["popupTemplate", ""];
const _c96 = ["container", ""];
const _c97 = [1, "k-selected-color", 3, "click"];
const _c98 = ["class", "k-icon k-i-line", 4, "ngIf"];
const _c99 = [1, "k-icon", "k-i-line"];
function ColorPickerComponent_span_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", _c99);
} }
function ColorPickerComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r185 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", _c97);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_span_2_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r185); const ctx_r184 = ɵngcc0.ɵɵnextContext(); return ctx_r184.handleActiveColorClick(); });
    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_span_2_span_1_Template, 1, 0, "span", _c98);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r178 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("background-color", ctx_r178.value);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r178.value);
} }
const _c100 = [1, "k-tool-icon", 3, "ngClass", "click"];
const _c101 = [1, "k-selected-color"];
function ColorPickerComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r187 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", _c100);
    ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_span_3_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r187); const ctx_r186 = ɵngcc0.ɵɵnextContext(); return ctx_r186.handleActiveColorClick(); });
    ɵngcc0.ɵɵelementStart(1, "span", _c101);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r179 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r179.iconStyles);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵstyleProp("background-color", ctx_r179.value);
    ɵngcc0.ɵɵstylingApply();
} }
const _c102 = ["kendoFocusOnDomReady", "", 3, "value", "format", "opacity", "focusout", "valueChange", "keydown", 4, "ngIf"];
const _c103 = ["kendoFocusOnDomReady", "", 3, "palette", "columns", "tileSize", "format", "value", "blur", "cellSelection", "mousedown", "keydown", 4, "ngIf"];
const _c104 = ["kendoFocusOnDomReady", "", 3, "value", "format", "opacity", "focusout", "valueChange", "keydown"];
function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template(rf, ctx) { if (rf & 1) {
    const _r191 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-colorgradient", _c104);
    ɵngcc0.ɵɵlistener("focusout", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_focusout_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r191); const ctx_r190 = ɵngcc0.ɵɵnextContext(2); return ctx_r190.handlePopupBlur($event); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r191); const ctx_r192 = ɵngcc0.ɵɵnextContext(2); return ctx_r192.handleValueChange($event, false); });
    ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template_kendo_colorgradient_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r191); const ctx_r193 = ɵngcc0.ɵɵnextContext(2); return ctx_r193.handlePopupKeyDown($event.keyCode); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r188 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r188.value)("format", ctx_r188.format)("opacity", ctx_r188.gradientSettings.opacity);
} }
const _c105 = ["kendoFocusOnDomReady", "", 3, "palette", "columns", "tileSize", "format", "value", "blur", "cellSelection", "mousedown", "keydown"];
const _c106 = ["palette", ""];
function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template(rf, ctx) { if (rf & 1) {
    const _r196 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-colorpalette", _c105, _c106);
    ɵngcc0.ɵɵlistener("blur", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r196); const ctx_r195 = ɵngcc0.ɵɵnextContext(2); return ctx_r195.handlePopupBlur($event); });
    ɵngcc0.ɵɵlistener("cellSelection", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_cellSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r196); const ctx_r197 = ɵngcc0.ɵɵnextContext(2); return ctx_r197.handleValueChange($event, true); });
    ɵngcc0.ɵɵlistener("mousedown", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r196); return $event.preventDefault(); });
    ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template_kendo_colorpalette_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r196); const ctx_r199 = ɵngcc0.ɵɵnextContext(2); return ctx_r199.handlePopupKeyDown($event.keyCode); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r189 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("palette", ctx_r189.paletteSettings.palette)("columns", ctx_r189.paletteSettings.columns)("tileSize", ctx_r189.paletteSettings.tileSize)("format", ctx_r189.format)("value", ctx_r189.value);
} }
function ColorPickerComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ColorPickerComponent_ng_template_6_kendo_colorgradient_0_Template, 1, 3, "kendo-colorgradient", _c102);
    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_ng_template_6_kendo_colorpalette_1_Template, 2, 5, "kendo-colorpalette", _c103);
} if (rf & 2) {
    const ctx_r181 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r181.view === "gradient" || ctx_r181.view === "combo");
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r181.view === "palette" || ctx_r181.view === "combo");
} }
const _c107 = function (a1, a2, a3) { return { "k-picker-wrap": true, "k-state-default": a1, "k-state-disabled": a2, "k-state-focused": a3 }; };
const _c108 = ["role", "grid"];
const _c109 = ["role", "presentation", 1, "k-palette", "k-reset"];
const _c110 = ["role", "row", 4, "ngFor", "ngForOf"];
const _c111 = ["role", "row"];
const _c112 = ["class", "k-item", 3, "k-state-selected", "ngStyle", "click", 4, "ngFor", "ngForOf"];
const _c113 = [1, "k-item", 3, "ngStyle", "click"];
const _c114 = function (a0, a1, a2, a3) { return { backgroundColor: a0, width: a1, height: a2, minWidth: a3 }; };
function ColorPaletteComponent_tr_3_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r208 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", _c113);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵlistener("click", function ColorPaletteComponent_tr_3_td_1_Template_td_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r208); const color_r204 = ctx.$implicit; const colIndex_r205 = ctx.index; const rowIndex_r202 = ɵngcc0.ɵɵnextContext().index; const ctx_r206 = ɵngcc0.ɵɵnextContext(); return ctx_r206.handleCellSelection(color_r204, { row: rowIndex_r202, col: colIndex_r205 }); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const color_r204 = ctx.$implicit;
    const colIndex_r205 = ctx.index;
    const rowIndex_r202 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r203 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("k-state-selected", (ctx_r203.focusedCell == null ? null : ctx_r203.focusedCell.row) === rowIndex_r202 && (ctx_r203.focusedCell == null ? null : ctx_r203.focusedCell.col) === colIndex_r205);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction4(3, _c114, color_r204, ctx_r203.tileLayout.width + "px", ctx_r203.tileLayout.height + "px", ctx_r203.tileLayout.width + "px"));
    ɵngcc0.ɵɵattribute("value", color_r204);
} }
function ColorPaletteComponent_tr_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", _c111);
    ɵngcc0.ɵɵtemplate(1, ColorPaletteComponent_tr_3_td_1_Template, 1, 8, "td", _c112);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r201 = ctx.$implicit;
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngForOf", row_r201);
} }
const _c115 = ["alphaSlider"];
const _c116 = ["gradientWrapper"];
const _c117 = ["dragHandle"];
const _c118 = [1, "k-hsv-wrap", "k-horizontal"];
const _c119 = [1, "k-hsv-rectangle"];
const _c120 = ["kendoDraggable", "", 1, "k-hsv-gradient", 3, "click", "kendoPress", "kendoDrag", "kendoRelease"];
const _c121 = ["gradientWrapper", ""];
const _c122 = [1, "k-draghandle"];
const _c123 = ["dragHandle", ""];
const _c124 = [1, "k-hue-slider", 3, "disabled", "readonly", "showButtons", "tickPlacement", "vertical", "min", "max", "smallStep", "largeStep", "value", "valueChange"];
const _c125 = ["class", "k-transparency-slider k-alpha-slider", 3, "disabled", "readonly", "showButtons", "tickPlacement", "vertical", "min", "max", "smallStep", "largeStep", "value", "valueChange", 4, "ngIf"];
const _c126 = [3, "opacity", "value", "disabled", "readonly", "valueChange"];
const _c127 = [1, "k-transparency-slider", "k-alpha-slider", 3, "disabled", "readonly", "showButtons", "tickPlacement", "vertical", "min", "max", "smallStep", "largeStep", "value", "valueChange"];
const _c128 = ["alphaSlider", ""];
function ColorGradientComponent_kendo_slider_7_Template(rf, ctx) { if (rf & 1) {
    const _r215 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-slider", _c127, _c128);
    ɵngcc0.ɵɵlistener("valueChange", function ColorGradientComponent_kendo_slider_7_Template_kendo_slider_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r215); const ctx_r214 = ɵngcc0.ɵɵnextContext(); return ctx_r214.handleAlphaSliderChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r212 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r212.disabled)("readonly", ctx_r212.readonly)("showButtons", false)("tickPlacement", "none")("vertical", true)("min", 0)("max", 100)("smallStep", 1)("largeStep", 10)("value", ctx_r212.alphaSliderValue);
} }
const _c129 = [1, "k-horizontal", "k-gradient-values"];
const _c130 = [1, "k-textbox", "k-hex-value", 3, "disabled", "readonly", "value", "blur", "input"];
const _c131 = ["hexInput", ""];
const _c132 = [3, "disabled", "readonly", "min", "max", "value", "autoCorrect", "spinners", "format", "decimals", "valueChange", "blur"];
const _c133 = [3, "disabled", "readonly", "min", "max", "value", "autoCorrect", "spinners", "step", "format", "decimals", "valueChange", "blur", 4, "ngIf"];
const _c134 = [1, "k-hex-value"];
const _c135 = [4, "ngIf"];
const _c136 = [3, "disabled", "readonly", "min", "max", "value", "autoCorrect", "spinners", "step", "format", "decimals", "valueChange", "blur"];
function ColorInputComponent_kendo_numerictextbox_6_Template(rf, ctx) { if (rf & 1) {
    const _r220 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-numerictextbox", _c136);
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r220); const ctx_r219 = ɵngcc0.ɵɵnextContext(); return ctx_r219.rgba.a = $event; });
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r220); const ctx_r221 = ɵngcc0.ɵɵnextContext(); return ctx_r221.handleRgbaInputBlur(); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_kendo_numerictextbox_6_Template_kendo_numerictextbox_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r220); const ctx_r222 = ɵngcc0.ɵɵnextContext(); return ctx_r222.handleRgbaValueChange(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r217 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r217.disabled)("readonly", ctx_r217.readonly)("min", 0)("max", 1)("value", ctx_r217.rgba.a)("autoCorrect", true)("spinners", false)("step", 0.01)("format", "n2")("decimals", 2);
} }
function ColorInputComponent_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1, "a");
    ɵngcc0.ɵɵelementEnd();
} }
var MAX_PRECISION = 20;
/**
 * @hidden
 */
var limitPrecision = function (precision) { return Math.min(precision, MAX_PRECISION); };
/**
 * @hidden
 */
var fractionLength = function (value) {
    return (String(value).split('.')[1] || "").length;
};
var maxFractionLength = function (value1, value2) {
    return Math.max(fractionLength(value1), fractionLength(value2));
};
/**
 * @hidden
 */
var toFixedPrecision = function (value, precision) {
    var maxPrecision = limitPrecision(precision);
    return parseFloat(value.toFixed(maxPrecision));
};
/**
 * @hidden
 */
var add = function (value1, value2) {
    var maxPrecision = maxFractionLength(value1, value2);
    return toFixedPrecision(value1 + value2, maxPrecision);
};
/**
 * @hidden
 */
var subtract = function (value1, value2) {
    return add(value1, -value2);
};
/**
 * @hidden
 */
var multiply = function (value1, value2) {
    var maxPrecision = fractionLength(value1) + fractionLength(value2);
    return toFixedPrecision(value1 * value2, maxPrecision);
};
/**
 * @hidden
 */
var divide = function (dividend, divisor) {
    if (divisor === 0) {
        return NaN;
    }
    var power = maxFractionLength(dividend, divisor);
    var correctionValue = Math.pow(10, power);
    return ((correctionValue * dividend) / (correctionValue * divisor));
};
/**
 * @hidden
 */
var remainder = function (dividend, divisor) {
    return Math.abs(subtract(dividend, multiply(divisor, Math.floor(divide(dividend, divisor)))));
};

function elementOffset(element) {
    var box = element.getBoundingClientRect();
    var documentElement = document.documentElement;
    return {
        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0),
        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0)
    };
}
function limitValue(value, min, max) {
    return Math.max(Math.min(value, max), min);
}
/**
 * @hidden
 */
function decreaseValueToStep(value, _a, large) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, largeStep = _a.largeStep;
    if (large === void 0) { large = false; }
    var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;
    var stepValue = subtract(value, min);
    var result;
    var stepRemainder = remainder(stepValue, step);
    if (stepRemainder === 0) {
        result = subtract(stepValue, step);
    }
    else {
        result = subtract(stepValue, stepRemainder);
    }
    return limitValue(add(result, min), min, max);
}
/**
 * @hidden
 */
function increaseValueToStep(value, _a, large) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, largeStep = _a.largeStep;
    if (large === void 0) { large = false; }
    var step = large && largeStep ? multiply(smallStep, largeStep) : smallStep;
    var stepValue = subtract(value, min);
    var stepRemainder = remainder(stepValue, step);
    var result = add(subtract(stepValue, stepRemainder), step);
    return limitValue(add(result, min), min, max);
}
/**
 * @hidden
 */
function snapValue(value, options) {
    var smallStep = options.smallStep, min = options.min, max = options.max;
    var limitted = limitValue(value, min, max);
    if (value !== limitted) {
        return limitted;
    }
    var left = decreaseValueToStep(value, options);
    var right = increaseValueToStep(value, options);
    if ((value - min) % smallStep === 0) {
        return value;
    }
    if (right - value <= (right - left) / 2) {
        return right;
    }
    return left;
}
/**
 * @hidden
 */
function eventValue(eventArgs, scaleElement, options) {
    var min = options.min, max = options.max, vertical = options.vertical, rtl = options.rtl;
    var trackOffset = elementOffset(scaleElement);
    var offset = vertical ? eventArgs.pageY - trackOffset.top : eventArgs.pageX - trackOffset.left;
    var scale = (max - min) / (vertical ? scaleElement.clientHeight : scaleElement.clientWidth);
    var offsetValue = offset * scale;
    var value = rtl || vertical ? max - offsetValue : min + offsetValue;
    var stepFractionLength = fractionLength(options.smallStep);
    value = toFixedPrecision(value, stepFractionLength + 1);
    return snapValue(value, options);
}
/**
 * @hidden
 */
function isButton(element) {
    return element.className.indexOf('k-button-increase') >= 0 || element.className.indexOf('k-button-decrease') >= 0;
}
/**
 * @hidden
 */
function increment(options) {
    return increaseValueToStep(options.value, options);
}
/**
 * @hidden
 */
function decrement(options) {
    return decreaseValueToStep(options.value, options);
}
/**
 * @hidden
 */
function incrementLarge(options) {
    return increaseValueToStep(options.value, options, true);
}
/**
 * @hidden
 */
function decrementLarge(options) {
    return decreaseValueToStep(options.value, options, true);
}
/**
 * @hidden
 */
function calculateValueFromTick(index, _a) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep, reverse = _a.reverse, vertical = _a.vertical;
    var value = add(min, multiply(index, smallStep));
    return vertical || reverse ? Math.abs(subtract(value, max)) : value;
}
/**
 * @hidden
 */
function calculateTicksCount(min, max, smallStep) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 0; }
    if (smallStep === void 0) { smallStep = 1; }
    if (smallStep <= 0) {
        throw new Error("Invalid argument: smallStep must be a positive number");
    }
    return add(divide(Math.abs(subtract(max, min)), smallStep), 1);
}

/**
 * @hidden
 */
var SliderModel$1 = /** @class */ (function (_super) {
    __extends(SliderModel$$1, _super);
    function SliderModel$$1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SliderModel$$1.prototype.getTickSizes = function () {
        var _a = this.props, min = _a.min, max = _a.max, smallStep = _a.smallStep;
        var count = calculateTicksCount(min, max, smallStep);
        var trackSize = this.trackWidth();
        var distStep = trackSize / subtract(max, min);
        var result = [];
        var usedSpace = 0;
        var endPoint = 0;
        for (var i = 0; i < count; i++) {
            if (i === 0 || i === count - 1) {
                endPoint += (smallStep / 2) * distStep;
            }
            else {
                endPoint += smallStep * distStep;
            }
            var size = Math.round(endPoint - usedSpace);
            result.push(size);
            usedSpace += size;
        }
        return result;
    };
    return SliderModel$$1;
}(SliderModel));

/**
 * Represents the template for the labels of the Slider.
 * To define the labels template, nest an `<ng-template>` tag with the `kendoSliderLabelTemplate` directive inside
 * the `<kendo-slider>` tag. The template context is passed to the `label` value.
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *         <kendo-slider [largeStep]="2">
 *           <ng-template kendoSliderLabelTemplate let-value="value">
 *             <b>{{value}}</b>
 *           </ng-template>
 *         </kendo-slider>
 *     `
 * })
 *
 * class AppComponent {
 * }
 *
 * ```
 */
var LabelTemplateDirective = /** @class */ (function () {
    function LabelTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    /** @nocollapse */
    LabelTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Optional }] }
    ]; };
LabelTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: LabelTemplateDirective, selectors: [["", "kendoSliderLabelTemplate", ""]], factory: function LabelTemplateDirective_Factory(t) { return new (t || LabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef, 8)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LabelTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoSliderLabelTemplate]'
            }]
    }], function () { return [{ type: TemplateRef, decorators: [{
                type: Optional
            }] }]; }, { templateRef: [] });
    return LabelTemplateDirective;
}());

/**
 * @hidden
 */
var isPresent = function (value) { return value !== null && value !== undefined; };
/**
 * @hidden
 */
var areSame = function (value1, value2) {
    return value1 === value2 || (value1 === null && value2 === undefined) || (value1 === undefined && value2 === null);
};
/**
 * @hidden
 */
var requiresZoneOnBlur = function (ngControl) { return ngControl &&
    (!ngControl.touched || (ngControl.control && ngControl.control.updateOn === 'blur')); };
/**
 * @hidden
 *
 * Fits the contender number into the specified bounds. If the number is NaN or null, the min is returned.
 *
 * @param contender Represents the number you want to fit into specified bounds.
 * @param min The inclusive lower bound number.
 * @param max The inclusive upper bound number.
 */
var fitIntoBounds = function (contender, min, max) {
    if (!isPresent(contender) || isNaN(contender)) {
        return min;
    }
    return contender <= min ? min : contender >= max ? max : contender;
};

var UNTOUCHED = 'ng-untouched';
var toClassList = function (classNames) { return String(classNames).trim().split(' '); };
/**
 * @hidden
 */
var hasClass = function (element, className) {
    return Boolean(toClassList(element.className).find(function (name) { return name === className; }));
};
/**
 * @hidden
 */
function invokeElementMethod(element, name) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (element && element.nativeElement) {
        return element.nativeElement[name].apply(element.nativeElement, args);
    }
}
/**
 * @hidden
 */
var isUntouched = function (element) {
    return element && element.nativeElement && hasClass(element.nativeElement, UNTOUCHED);
};
/**
 * @hidden
 */
var containsFocus = function (hostElement, contender) {
    return hostElement && contender && (hostElement === contender || hostElement.contains(contender));
};

var FOCUSED = 'k-state-focused';
var PRESSED = 'k-pressed';
/**
 * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).
 */
var SliderComponent = /** @class */ (function () {
    function SliderComponent(localizationService, injector, renderer, ngZone, hostElement) {
        var _this = this;
        this.localizationService = localizationService;
        this.injector = injector;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).
         * When `showButtons` is set to `false`, the buttons are not displayed.
         */
        this.showButtons = true;
        /**
         * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).
         *
         * The available options are:
         * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.
         * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.
         * * `both`&mdash;The tick marks are located on both sides of the track.
         * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.
         */
        this.tickPlacement = 'both';
        /**
         * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title
         * for each tick is its Slider value. If you use a callback function, the function accepts an argument
         * that holds the value of the component and returns a string with the new title.
         */
        this.title = SliderUtil.identity;
        /**
         * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical
         * ([see example]({% slug orientation_slider %})).
         */
        this.vertical = false;
        /**
         * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * The attribute accepts both integers and floating-point numbers.
         */
        this.min = 0;
        /**
         * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * The attribute accepts both integers and floating-point numbers.
         */
        this.max = 10;
        /**
         * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).
         * Accepts positive values only. Can be an integer or a floating-point number.
         */
        this.smallStep = 1;
        /**
         * Specifies that every n<sup>th</sup> tick will be large and will have a label
         * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).
         * Accepts positive integer values only.
         */
        this.largeStep = null;
        /**
         * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).
         */
        this.disabled = false;
        /**
         * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).
         */
        this.readonly = false;
        /**
         * The current value of the Slider when it is initially displayed.
         * The component can use either NgModel or the `value` binding but not both of them at the same time.
         */
        this.value = 0;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.subscriptions = new Subscription();
        /**
         * @hidden
         */
        this.handleFocus = function () {
            _this.focused = true;
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.focused = false;
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.onBlur.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.onWrapClick = function (args) {
            var target = args.target;
            if (!_this.isDisabled && !(isButton(target) || isButton(target.parentNode))) {
                var value = eventValue(args, _this.track.nativeElement, _this.getProps());
                _this.changeValue(value);
            }
        };
        /**
         * @hidden
         */
        this.ifEnabled = function (callback, event) {
            if (!_this.isDisabled) {
                callback.call(_this, event);
            }
        };
        /**
         * @hidden
         */
        this.onKeyDown = function (e) {
            var options = _this.getProps();
            var max = options.max, min = options.min;
            var handler = _this.keyBinding[e.keyCode];
            if (_this.isDisabled || !handler) {
                return;
            }
            var value = handler(options);
            _this.changeValue(SliderUtil.trimValue(max, min, value));
            e.preventDefault();
        };
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        this.decreaseValue = function () {
            _this.changeValue(decreaseValueToStep(_this.value, _this.getProps()));
        };
        this.increaseValue = function () {
            _this.changeValue(increaseValueToStep(_this.value, _this.getProps()));
        };
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(SliderComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "horizontalClass", {
        get: function () {
            return !this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "verticalClass", {
        get: function () {
            return this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "sliderClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "transitionsClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "widgetClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "stateDefaultClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ariaMin", {
        get: function () {
            return this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ariaMax", {
        get: function () {
            return this.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "ariaValue", {
        get: function () {
            return this.value ? this.value : this.min;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    SliderComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    SliderComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.localizationService
            .changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
            _this.sizeComponent(false);
        }));
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
    };
    /**
     * Focuses the Slider.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="slider.focus()">Focus</button>
     *  <kendo-slider #slider></kendo-slider>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    SliderComponent.prototype.focus = function () {
        invokeElementMethod(this.wrapper, 'focus');
    };
    /**
     * Blurs the Slider.
     */
    SliderComponent.prototype.blur = function () {
        invokeElementMethod(this.wrapper, 'blur');
    };
    SliderComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged('value', changes)) {
            this.sizeComponent(false);
        }
    };
    SliderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!isDocumentAvailable()) {
            return;
        }
        if (this.showButtons) {
            this.setValueChangeInterval(this.increaseButton.nativeElement, function () { return _this.increaseValue(); });
            this.setValueChangeInterval(this.decreaseButton.nativeElement, function () { return _this.decreaseValue(); });
        }
        this.sizeComponent(false);
        if (this.ticks) {
            this.ticks.tickElements
                .changes
                .subscribe(function () { return _this.sizeComponent(false); });
        }
    };
    SliderComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    Object.defineProperty(SliderComponent.prototype, "incrementMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.incrementTitle || this.localizationService.get('increment');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "decrementMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.decrementTitle || this.localizationService.get('decrement');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "dragHandleMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.dragHandleTitle || this.localizationService.get('dragHandle');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    SliderComponent.prototype.handleDragPress = function (args) {
        if (args.originalEvent) {
            args.originalEvent.preventDefault();
        }
        this.focus();
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.onHandleDrag = function (args) {
        this.dragging = true;
        this.changeValue(eventValue(args, this.track.nativeElement, this.getProps()));
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.onHandleRelease = function () {
        this.dragging = false; //needed for animation
    };
    //ngModel binding
    /**
     * @hidden
     */
    SliderComponent.prototype.writeValue = function (value) {
        this.value = value;
        this.sizeComponent(true);
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.changeValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.sizeComponent(true);
            });
        }
    };
    /**
     * @hidden
     */
    SliderComponent.prototype.sizeComponent = function (animate) {
        if (!isDocumentAvailable()) {
            return;
        }
        var wrapper = this.wrapper.nativeElement;
        var props = this.getProps();
        var model = new SliderModel$1(props, wrapper, this.track.nativeElement);
        model.resizeTrack();
        if (this.ticks) { //for case when tickPlacement: none
            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) { return element.nativeElement; }));
        }
        this.handleAnimation(animate); //first time the widget is initialized the selection should not be animated
        model.positionHandle(this.draghandle.nativeElement);
        model.positionSelection(this.draghandle.nativeElement, this.sliderSelection.nativeElement);
        if (this.fixedTickWidth) {
            model.resizeWrapper();
        }
    };
    Object.defineProperty(SliderComponent.prototype, "isDisabled", {
        /**
         * @hidden
         */
        get: function () {
            return this.disabled || this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    SliderComponent.prototype.isEmpty = function () {
        return false;
    };
    Object.defineProperty(SliderComponent.prototype, "reverse", {
        get: function () {
            return this.localizationService.rtl && !this.vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "keyBinding", {
        get: function () {
            var _a;
            var reverse = this.reverse;
            return _a = {}, _a[Keys.ArrowLeft] = reverse ? increment : decrement, _a[Keys.ArrowRight] = reverse ? decrement : increment, _a[Keys.ArrowDown] = decrement, _a[Keys.ArrowUp] = increment, _a[Keys.PageUp] = incrementLarge, _a[Keys.PageDown] = decrementLarge, _a[Keys.Home] = function (_a) {
                    var min = _a.min;
                    return min;
                }, _a[Keys.End] = function (_a) {
                    var max = _a.max;
                    return max;
                }, _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "focused", {
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(element, FOCUSED);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "dragging", {
        set: function (value) {
            if (this.isDragged !== value && this.sliderSelection && this.draghandle) {
                var sliderSelection = this.sliderSelection.nativeElement;
                var draghandle = this.draghandle.nativeElement;
                if (value) {
                    this.renderer.addClass(sliderSelection, PRESSED);
                    this.renderer.addClass(draghandle, PRESSED);
                }
                else {
                    this.renderer.removeClass(sliderSelection, PRESSED);
                    this.renderer.removeClass(draghandle, PRESSED);
                }
                this.isDragged = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    SliderComponent.prototype.setValueChangeInterval = function (element, callback) {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var mousedown = fromEvent(element, 'mousedown');
            var mouseup = fromEvent(element, 'mouseup');
            var mouseout = fromEvent(element, 'mouseout');
            var subscription = mousedown.pipe(filter(function (e) { return e.button === 0 && !_this.isDisabled; }), concatMap(function () {
                return interval(150).pipe(startWith(-1), takeUntil(merge(mouseup, mouseout)));
            })).subscribe(function () {
                _this.focus();
                callback();
            });
            _this.subscriptions.add(subscription);
        });
    };
    SliderComponent.prototype.handleAnimation = function (animate) {
        var transition = '';
        if (!animate) {
            transition = 'none';
        }
        this.draghandle.nativeElement.style.transition = transition;
        this.sliderSelection.nativeElement.style.transition = transition;
    };
    SliderComponent.prototype.getProps = function () {
        return {
            buttons: this.showButtons,
            disabled: this.disabled,
            fixedTickWidth: this.fixedTickWidth,
            largeStep: this.largeStep,
            max: this.max,
            min: this.min,
            readonly: this.readonly,
            reverse: this.reverse,
            rtl: this.localizationService.rtl,
            smallStep: this.smallStep,
            value: SliderUtil.trimValue(this.max, this.min, this.value),
            vertical: this.vertical
        };
    };
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return [
        { type: LocalizationService },
        { type: Injector },
        { type: Renderer2 },
        { type: NgZone },
        { type: ElementRef }
    ]; };
    SliderComponent.propDecorators = {
        focusableId: [{ type: Input }],
        incrementTitle: [{ type: Input }],
        decrementTitle: [{ type: Input }],
        showButtons: [{ type: Input }],
        tickPlacement: [{ type: Input }],
        title: [{ type: Input }],
        dragHandleTitle: [{ type: Input }],
        vertical: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        smallStep: [{ type: Input }],
        largeStep: [{ type: Input }],
        fixedTickWidth: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        value: [{ type: Input }],
        tabindex: [{ type: Input }],
        tabIndex: [{ type: Input }],
        onFocus: [{ type: Output, args: ['focus',] }],
        onBlur: [{ type: Output, args: ['blur',] }],
        valueChange: [{ type: Output }],
        wrapper: [{ type: ViewChild, args: ['wrap',] }],
        track: [{ type: ViewChild, args: ['track',] }],
        draghandle: [{ type: ViewChild, args: ['draghandle',] }],
        sliderSelection: [{ type: ViewChild, args: ['sliderSelection',] }],
        ticksContainer: [{ type: ViewChild, args: ['ticks', { read: ElementRef },] }],
        ticks: [{ type: ViewChild, args: ['ticks',] }],
        decreaseButton: [{ type: ViewChild, args: ['decreaseButton',] }],
        increaseButton: [{ type: ViewChild, args: ['increaseButton',] }],
        labelTemplate: [{ type: ContentChild, args: [LabelTemplateDirective,] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        horizontalClass: [{ type: HostBinding, args: ['class.k-slider-horizontal',] }],
        verticalClass: [{ type: HostBinding, args: ['class.k-slider-vertical',] }],
        sliderClass: [{ type: HostBinding, args: ['class.k-slider',] }],
        transitionsClass: [{ type: HostBinding, args: ['class.k-slider-transitions',] }],
        widgetClass: [{ type: HostBinding, args: ['class.k-widget',] }],
        stateDefaultClass: [{ type: HostBinding, args: ['class.k-state-default',] }],
        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],
        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
        ariaReadonly: [{ type: HostBinding, args: ['attr.aria-readonly',] }],
        ariaMin: [{ type: HostBinding, args: ['attr.aria-valuemin',] }],
        ariaMax: [{ type: HostBinding, args: ['attr.aria-valuemax',] }],
        ariaValue: [{ type: HostBinding, args: ['attr.aria-valuenow',] }]
    };
SliderComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: SliderComponent, selectors: [["kendo-slider"]], factory: function SliderComponent_Factory(t) { return new (t || SliderComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, contentQueries: function SliderComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, LabelTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx.labelTemplate = _t.first);
    } }, viewQuery: function SliderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
        ɵngcc0.ɵɵviewQuery(_c4, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c4, true);
        ɵngcc0.ɵɵviewQuery(_c5, true);
        ɵngcc0.ɵɵviewQuery(_c6, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.wrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.track = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.draghandle = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.sliderSelection = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.ticksContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.ticks = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.decreaseButton = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.increaseButton = _t.first);
    } }, hostBindings: function SliderComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(13);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction)("aria-disabled", ctx.ariaDisabled)("aria-readonly", ctx.ariaReadonly)("aria-valuemin", ctx.ariaMin)("aria-valuemax", ctx.ariaMax)("aria-valuenow", ctx.ariaValue);
        ɵngcc0.ɵɵclassProp("k-slider-horizontal", ctx.horizontalClass);
        ɵngcc0.ɵɵclassProp("k-slider-vertical", ctx.verticalClass);
        ɵngcc0.ɵɵclassProp("k-slider", ctx.sliderClass);
        ɵngcc0.ɵɵclassProp("k-slider-transitions", ctx.transitionsClass);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClass);
        ɵngcc0.ɵɵclassProp("k-state-default", ctx.stateDefaultClass);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.disabledClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { focusableId: "focusableId", showButtons: "showButtons", tickPlacement: "tickPlacement", title: "title", vertical: "vertical", min: "min", max: "max", smallStep: "smallStep", largeStep: "largeStep", disabled: "disabled", readonly: "readonly", value: "value", tabindex: "tabindex", tabIndex: "tabIndex", incrementTitle: "incrementTitle", decrementTitle: "decrementTitle", dragHandleTitle: "dragHandleTitle", fixedTickWidth: "fixedTickWidth" }, outputs: { onFocus: "focus", onBlur: "blur", valueChange: "valueChange" }, exportAs: ["kendoSlider"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            { provide: L10N_PREFIX, useValue: 'kendo.slider' },
            { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return SliderComponent; }) },
            { provide: KendoInput, useExisting: forwardRef(function () { return SliderComponent; }) }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 14, vars: 16, template: function SliderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, _c7);
        ɵngcc0.ɵɵi18nAttributes(1, _c14);
        ɵngcc0.ɵɵelementStart(2, "div", _c15, _c16);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵtemplate(4, SliderComponent_a_4_Template, 3, 4, "a", _c17);
        ɵngcc0.ɵɵtemplate(5, SliderComponent_a_5_Template, 3, 4, "a", _c18);
        ɵngcc0.ɵɵtemplate(6, SliderComponent_ul_6_Template, 2, 7, "ul", _c19);
        ɵngcc0.ɵɵelementStart(7, "div", _c20, _c21);
        ɵngcc0.ɵɵelement(9, "div", _c22, _c23);
        ɵngcc0.ɵɵelementStart(11, "a", _c24, _c25);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵlistener("kendoPress", function SliderComponent_Template_a_kendoPress_11_listener($event) { return ctx.ifEnabled(ctx.handleDragPress, $event); });
        ɵngcc0.ɵɵlistener("kendoDrag", function SliderComponent_Template_a_kendoDrag_11_listener($event) { return ctx.ifEnabled(ctx.onHandleDrag, $event); });
        ɵngcc0.ɵɵlistener("kendoRelease", function SliderComponent_Template_a_kendoRelease_11_listener($event) { return ctx.ifEnabled(ctx.onHandleRelease, $event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "kendo-resize-sensor", _c26);
        ɵngcc0.ɵɵlistener("resize", function SliderComponent_Template_kendo_resize_sensor_resize_13_listener($event) { return ctx.sizeComponent(false); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵclassProp("k-slider-buttons", ctx.showButtons);
        ɵngcc0.ɵɵclassProp("k-slider-topleft", ctx.tickPlacement === "before");
        ɵngcc0.ɵɵclassProp("k-slider-bottomright", ctx.tickPlacement === "after");
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction4(11, _c34, ctx.handleFocus, ctx.handleBlur, ctx.onWrapClick, ctx.onKeyDown));
        ɵngcc0.ɵɵattribute("tabindex", ctx.disabled ? undefined : ctx.tabIndex);
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showButtons);
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showButtons);
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.tickPlacement !== "none");
        ɵngcc0.ɵɵselect(11);
        ɵngcc0.ɵɵstyleProp("touch-action", ctx.isDisabled ? "" : "none");
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵproperty("title", ctx.dragHandleMessage);
    } }, directives: function () { return [LocalizedMessagesDirective, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgIf, ɵngcc1.DraggableDirective, ɵngcc1.ResizeSensorComponent, SliderTicksComponent]; }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SliderComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoSlider',
                providers: [
                    LocalizationService,
                    { provide: L10N_PREFIX, useValue: 'kendo.slider' },
                    { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return SliderComponent; }) },
                    { provide: KendoInput, useExisting: forwardRef(function () { return SliderComponent; }) }
                ],
                selector: 'kendo-slider',
                template: "\n        <ng-container kendoSliderLocalizedMessages\n            i18n-increment=\"kendo.slider.increment|The title of the **Increase** button of the Slider.\"\n            increment=\"increment\"\n            i18n-decrement=\"kendo.slider.decrement|The title of the **Decrease** button of the Slider.\"\n            decrement=\"decrement\"\n            i18n-dragHandle=\"kendo.slider.dragHandle|The title of the drag handle of the Slider.\"\n            dragHandle=\"Drag\"\n        >\n\n        <div class=\"k-slider-wrap\" #wrap\n            [id]=\"focusableId\"\n            [class.k-slider-buttons]=\"showButtons\"\n            [class.k-slider-topleft]=\"tickPlacement === 'before'\"\n            [class.k-slider-bottomright]=\"tickPlacement === 'after'\"\n            [attr.tabindex]=\"(this.disabled ? undefined : tabIndex)\"\n            [kendoEventsOutsideAngular]=\"{ focus: handleFocus, blur: handleBlur, click: onWrapClick, keydown: onKeyDown }\"\n            >\n            <a\n                #decreaseButton\n                *ngIf=\"showButtons\"\n                class=\"k-button k-button-decrease\"\n                [title]=\"decrementMessage\"\n                [attr.aria-label]=\"decrementMessage\"\n            >\n                <span class=\"k-icon\"\n                    [class.k-i-arrow-w]=\"!vertical\"\n                    [class.k-i-arrow-s]=\"vertical\"\n                >\n                </span>\n            </a>\n            <a\n                *ngIf=\"showButtons\"\n                #increaseButton\n                class=\"k-button k-button-increase\"\n                [title]=\"incrementMessage\"\n                [attr.aria-label]=\"incrementMessage\"\n            >\n                <span class=\"k-icon\"\n                    [class.k-i-arrow-e]=\"!vertical\"\n                    [class.k-i-arrow-n]=\"vertical\"\n                >\n                </span>\n            </a>\n            <ul kendoSliderTicks\n                #ticks\n                *ngIf=\"tickPlacement !== 'none'\"\n                [tickTitle]=\"title\"\n                [vertical]=\"vertical\"\n                [step]=\"smallStep\"\n                [largeStep]=\"largeStep\"\n                [min]=\"min\"\n                [max]=\"max\"\n                [labelTemplate]=\"labelTemplate?.templateRef\"\n            >\n            </ul>\n        <div #track class=\"k-slider-track\">\n            <div #sliderSelection class=\"k-slider-selection\">\n            </div>\n                <a #draghandle\n                    [style.touch-action]=\"isDisabled ? '' : 'none'\"\n                    class=\"k-draghandle\"\n                    [title]=\"dragHandleMessage\"\n                    kendoDraggable\n                    (kendoPress)=\"ifEnabled(handleDragPress ,$event)\"\n                    (kendoDrag)=\"ifEnabled(onHandleDrag ,$event)\"\n                    (kendoRelease)=\"ifEnabled(onHandleRelease, $event)\"\n                ></a>\n            </div>\n\n            <kendo-resize-sensor (resize)=\"sizeComponent(false)\"></kendo-resize-sensor>\n        </div>\n  "
            }]
    }], function () { return [{ type: LocalizationService }, { type: Injector }, { type: Renderer2 }, { type: NgZone }, { type: ElementRef }]; }, { localizationService: [], injector: [], renderer: [], ngZone: [], hostElement: [], focusableId: [{
            type: Input
        }], showButtons: [{
            type: Input
        }], tickPlacement: [{
            type: Input
        }], title: [{
            type: Input
        }], vertical: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], smallStep: [{
            type: Input
        }], largeStep: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], value: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], valueChange: [{
            type: Output
        }], subscriptions: [], handleFocus: [], handleBlur: [], onWrapClick: [], ifEnabled: [], onKeyDown: [], ngChange: [], ngTouched: [], decreaseValue: [], increaseValue: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], tabIndex: [{
            type: Input
        }], tabIndex: [], horizontalClass: [{
            type: HostBinding,
            args: ['class.k-slider-horizontal']
        }], verticalClass: [{
            type: HostBinding,
            args: ['class.k-slider-vertical']
        }], sliderClass: [{
            type: HostBinding,
            args: ['class.k-slider']
        }], transitionsClass: [{
            type: HostBinding,
            args: ['class.k-slider-transitions']
        }], widgetClass: [{
            type: HostBinding,
            args: ['class.k-widget']
        }], stateDefaultClass: [{
            type: HostBinding,
            args: ['class.k-state-default']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }], ariaReadonly: [{
            type: HostBinding,
            args: ['attr.aria-readonly']
        }], ariaMin: [{
            type: HostBinding,
            args: ['attr.aria-valuemin']
        }], ariaMax: [{
            type: HostBinding,
            args: ['attr.aria-valuemax']
        }], ariaValue: [{
            type: HostBinding,
            args: ['attr.aria-valuenow']
        }], setDisabledState: [], ngOnInit: [], control: [], focus: [], blur: [], ngOnChanges: [], ngAfterViewInit: [], ngOnDestroy: [], incrementMessage: [], decrementMessage: [], dragHandleMessage: [], handleDragPress: [], onHandleDrag: [], dragging: [], onHandleRelease: [], writeValue: [], registerOnChange: [], registerOnTouched: [], changeValue: [], sizeComponent: [], isDisabled: [], isEmpty: [], reverse: [], keyBinding: [], focused: [], setValueChangeInterval: [], handleAnimation: [], getProps: [], incrementTitle: [{
            type: Input
        }], decrementTitle: [{
            type: Input
        }], dragHandleTitle: [{
            type: Input
        }], fixedTickWidth: [{
            type: Input
        }], wrapper: [{
            type: ViewChild,
            args: ['wrap']
        }], track: [{
            type: ViewChild,
            args: ['track']
        }], draghandle: [{
            type: ViewChild,
            args: ['draghandle']
        }], sliderSelection: [{
            type: ViewChild,
            args: ['sliderSelection']
        }], ticksContainer: [{
            type: ViewChild,
            args: ['ticks', { read: ElementRef }]
        }], ticks: [{
            type: ViewChild,
            args: ['ticks']
        }], decreaseButton: [{
            type: ViewChild,
            args: ['decreaseButton']
        }], increaseButton: [{
            type: ViewChild,
            args: ['increaseButton']
        }], labelTemplate: [{
            type: ContentChild,
            args: [LabelTemplateDirective]
        }] });
    return SliderComponent;
}());

var FOCUSED$1 = 'k-state-focused';
/**
 * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).
 */
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(renderer, hostElement, localizationService, injector, changeDetector, ngZone) {
        var _this = this;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.localizationService = localizationService;
        this.injector = injector;
        this.changeDetector = changeDetector;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Sets the current value of the Switch when it is initially displayed.
         */
        this.checked = false;
        /**
         * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).
         */
        this.disabled = false;
        /**
         * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).
         */
        this.readonly = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        /**
         * @hidden
         */
        this.handleFocus = function () {
            _this.focused = true;
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.focused = false;
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.onBlur.emit();
                });
            }
        };
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
        this.keyDownHandler = this.keyDownHandler.bind(this);
        this.clickHandler = this.clickHandler.bind(this);
    }
    Object.defineProperty(SwitchComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ieClass", {
        get: function () {
            return browser && browser.msie;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaReadonly", {
        get: function () {
            return this.readonly ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaChecked", {
        get: function () {
            return this.checked ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "switchOnClass", {
        get: function () {
            return this.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "switchOffClass", {
        get: function () {
            return !this.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "onLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.onLabel || this.localizationService.get('on');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "offLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.offLabel || this.localizationService.get('off');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "isEnabled", {
        get: function () {
            return !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    SwitchComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.hostElement) {
            var wrapper = this.hostElement.nativeElement;
            this.renderer.removeAttribute(wrapper, "tabindex");
        }
        this.localizationChangeSubscription = this.localizationService
            .changes
            .pipe(skip(1))
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
        this.control = this.injector.get(NgControl, null);
    };
    SwitchComponent.prototype.ngOnDestroy = function () {
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    };
    /**
     * Focuses the Switch.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    SwitchComponent.prototype.focus = function () {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.focus();
    };
    /**
     * Blurs the Switch.
     */
    SwitchComponent.prototype.blur = function () {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.blur();
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    SwitchComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.changeDetector.markForCheck();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.writeValue = function (value) {
        this.checked = value === null ? false : value;
        this.changeDetector.markForCheck();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.keyDownHandler = function (e) {
        var keyCode = e.keyCode;
        if (this.isEnabled && (keyCode === Keys.Space || keyCode === Keys.Enter)) {
            this.changeValue(!this.checked);
            e.preventDefault();
        }
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.clickHandler = function () {
        if (this.isEnabled) {
            this.changeValue(!this.checked);
        }
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    SwitchComponent.prototype.isEmpty = function () {
        return false;
    };
    SwitchComponent.prototype.changeValue = function (value) {
        var _this = this;
        if (this.checked !== value) {
            this.ngZone.run(function () {
                _this.checked = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
    };
    Object.defineProperty(SwitchComponent.prototype, "focused", {
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(element, FOCUSED$1);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED$1);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    SwitchComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: LocalizationService },
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    SwitchComponent.propDecorators = {
        focusableId: [{ type: Input }],
        onLabel: [{ type: Input }],
        offLabel: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        tabindex: [{ type: Input }],
        tabIndex: [{ type: Input }],
        onFocus: [{ type: Output, args: ['focus',] }],
        onBlur: [{ type: Output, args: ['blur',] }],
        valueChange: [{ type: Output }],
        wrapper: [{ type: ViewChild, args: ['wrapper',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        ieClass: [{ type: HostBinding, args: ['class.k-ie',] }],
        ariaDisabled: [{ type: HostBinding, args: ['attr.aria-disabled',] }],
        ariaReadonly: [{ type: HostBinding, args: ['attr.aria-readonly',] }],
        ariaChecked: [{ type: HostBinding, args: ['attr.aria-checked',] }],
        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-switch',] }],
        switchOnClass: [{ type: HostBinding, args: ['class.k-switch-on',] }],
        switchOffClass: [{ type: HostBinding, args: ['class.k-switch-off',] }],
        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]
    };
SwitchComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: SwitchComponent, selectors: [["kendo-switch"]], factory: function SwitchComponent_Factory(t) { return new (t || SwitchComponent)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NgZone)); }, viewQuery: function SwitchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c35, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.wrapper = _t.first);
    } }, hostBindings: function SwitchComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(10);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction)("aria-disabled", ctx.ariaDisabled)("aria-readonly", ctx.ariaReadonly)("aria-checked", ctx.ariaChecked);
        ɵngcc0.ɵɵclassProp("k-ie", ctx.ieClass);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-switch", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-switch-on", ctx.switchOnClass);
        ɵngcc0.ɵɵclassProp("k-switch-off", ctx.switchOffClass);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.disabledClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { focusableId: "focusableId", checked: "checked", disabled: "disabled", readonly: "readonly", tabindex: "tabindex", tabIndex: "tabIndex", onLabel: "onLabel", offLabel: "offLabel" }, outputs: { onFocus: "focus", onBlur: "blur", valueChange: "valueChange" }, exportAs: ["kendoSwitch"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            { provide: L10N_PREFIX, useValue: 'kendo.switch' },
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return SwitchComponent; }) /* tslint:disable-line */
            },
            {
                provide: KendoInput,
                useExisting: forwardRef(function () { return SwitchComponent; })
            }
        ])], consts: 9, vars: 10, template: function SwitchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, _c36);
        ɵngcc0.ɵɵi18nAttributes(1, _c41);
        ɵngcc0.ɵɵelementStart(2, "span", _c42, _c43);
        ɵngcc0.ɵɵelementStart(4, "span", _c44);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "span", _c45);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "span", _c46);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction4(5, _c47, ctx.clickHandler, ctx.keyDownHandler, ctx.handleFocus, ctx.handleBlur));
        ɵngcc0.ɵɵattribute("tabindex", ctx.disabled ? undefined : ctx.tabIndex);
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.onLabelMessage);
        ɵngcc0.ɵɵselect(7);
        ɵngcc0.ɵɵtextInterpolate(ctx.offLabelMessage);
    } }, directives: function () { return [LocalizedMessagesDirective$1, ɵngcc1.EventsOutsideAngularDirective]; }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SwitchComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoSwitch',
                providers: [
                    LocalizationService,
                    { provide: L10N_PREFIX, useValue: 'kendo.switch' },
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return SwitchComponent; }) /* tslint:disable-line */
                    },
                    {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return SwitchComponent; })
                    }
                ],
                selector: 'kendo-switch',
                template: "\n        <ng-container kendoSwitchLocalizedMessages\n            i18n-on=\"kendo.switch.on|The **On** label of the Switch.\"\n            on=\"ON\"\n            i18n-off=\"kendo.switch.off|The **Off** label of the Switch.\"\n            off=\"OFF\"\n        >\n\n        <span\n            #wrapper\n            class=\"k-switch-container\"\n            [id]=\"focusableId\"\n            [attr.tabindex]=\"(disabled ? undefined : tabIndex)\"\n            [kendoEventsOutsideAngular]=\"{ click: clickHandler, keydown: keyDownHandler, focus: handleFocus, blur: handleBlur }\"\n        >\n            <span class=\"k-switch-label-on\">{{onLabelMessage}}</span>\n            <span class=\"k-switch-label-off\">{{offLabelMessage}}</span>\n            <span class=\"k-switch-handle\"></span>\n        </span>\n  "
            }]
    }], function () { return [{ type: Renderer2 }, { type: ElementRef }, { type: LocalizationService }, { type: Injector }, { type: ChangeDetectorRef }, { type: NgZone }]; }, { renderer: [], hostElement: [], localizationService: [], injector: [], changeDetector: [], ngZone: [], focusableId: [{
            type: Input
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], valueChange: [{
            type: Output
        }], ngChange: [], ngTouched: [], handleFocus: [], handleBlur: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], keyDownHandler: [], clickHandler: [], tabIndex: [{
            type: Input
        }], tabIndex: [], ieClass: [{
            type: HostBinding,
            args: ['class.k-ie']
        }], ariaDisabled: [{
            type: HostBinding,
            args: ['attr.aria-disabled']
        }], ariaReadonly: [{
            type: HostBinding,
            args: ['attr.aria-readonly']
        }], ariaChecked: [{
            type: HostBinding,
            args: ['attr.aria-checked']
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-switch']
        }], switchOnClass: [{
            type: HostBinding,
            args: ['class.k-switch-on']
        }], switchOffClass: [{
            type: HostBinding,
            args: ['class.k-switch-off']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], onLabelMessage: [], offLabelMessage: [], isEnabled: [], ngOnInit: [], localizationChangeSubscription: [], control: [], ngOnDestroy: [], focus: [], blur: [], setDisabledState: [], writeValue: [], registerOnChange: [], registerOnTouched: [], isEmpty: [], changeValue: [], focused: [], onLabel: [{
            type: Input
        }], offLabel: [{
            type: Input
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper']
        }] });
    return SwitchComponent;
}());

/**
 * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).
 * Provides floating labels to `textarea` elements.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
var TextAreaDirective = /** @class */ (function () {
    function TextAreaDirective(renderer, element, zone, changeDetector, injector, rtl) {
        this.renderer = renderer;
        this.element = element;
        this.zone = zone;
        this.changeDetector = changeDetector;
        this.injector = injector;
        /**
         * Fires each time the textarea value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Specifies if the `textarea` element will resize its height automatically
         * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).
         *
         * @default false
         */
        this.autoSize = false;
        /**
         * @hidden
         */
        this.onFocus = new EventEmitter();
        /**
         * @hidden
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         */
        this.onValueChange = new EventEmitter();
        this.listeners = [];
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(TextAreaDirective.prototype, "elementClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaDirective.prototype, "id", {
        get: function () {
            return this.element.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.element.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TextAreaDirective.prototype.writeValue = function (value) {
        this.elementValue = value;
        this.resize();
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     */
    TextAreaDirective.prototype.setDisabledState = function (isDisabled) {
        this.setElementProperty('disabled', isDisabled);
    };
    TextAreaDirective.prototype.ngOnInit = function () {
        var _this = this;
        var element = this.element.nativeElement;
        this.zone.runOutsideAngular(function () {
            _this.listeners = [
                _this.renderer.listen(element, 'focus', _this.handleFocus.bind(_this)),
                _this.renderer.listen(element, 'blur', _this.handleBlur.bind(_this))
            ];
            _this.inputSubscription = fromEvent(element, 'input')
                .subscribe(_this.handleInput.bind(_this));
        });
        this.control = this.injector.get(NgControl, null);
    };
    TextAreaDirective.prototype.ngOnChanges = function (changes) {
        var element = this.element.nativeElement;
        if (changes.value) {
            this.elementValue = this.value;
        }
        if (changes.autoSize) {
            if (this.autoSize) {
                this.initialHeight = element.offsetHeight;
                this.renderer.setStyle(element, 'resize', 'none');
            }
            else {
                this.renderer.setStyle(element, 'overflow-y', 'auto');
                this.renderer.setStyle(element, 'resize', 'both');
                element.style.height = this.initialHeight + "px";
            }
        }
        this.resize();
    };
    TextAreaDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
        if (this.inputSubscription) {
            this.inputSubscription.unsubscribe();
        }
    };
    Object.defineProperty(TextAreaDirective.prototype, "elementValue", {
        get: function () {
            if (this.element) {
                return this.element.nativeElement.value;
            }
            return '';
        },
        set: function (value) {
            this.setElementProperty('value', (value === undefined || value === null) ? '' : value);
        },
        enumerable: true,
        configurable: true
    });
    TextAreaDirective.prototype.setElementProperty = function (name, value) {
        if (this.element) {
            this.renderer.setProperty(this.element.nativeElement, name, value);
        }
    };
    TextAreaDirective.prototype.resize = function () {
        if (!this.autoSize) {
            return;
        }
        var element = this.element.nativeElement;
        this.renderer.setStyle(element, 'overflow-y', 'hidden');
        element.style.height = this.initialHeight + "px";
        var scrollHeight = element.scrollHeight;
        if (scrollHeight > this.initialHeight) {
            element.style.height = scrollHeight + "px";
        }
    };
    TextAreaDirective.prototype.handleInput = function () {
        var _this = this;
        var value = this.elementValue;
        this.value = value;
        if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {
            this.zone.run(function () {
                _this.ngChange(value);
                _this.onValueChange.emit(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
        this.resize();
    };
    TextAreaDirective.prototype.handleFocus = function () {
        var _this = this;
        if (hasObservers(this.onFocus)) {
            this.zone.run(function () {
                _this.onFocus.emit();
            });
        }
    };
    TextAreaDirective.prototype.handleBlur = function () {
        var _this = this;
        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {
            this.zone.run(function () {
                _this.ngTouched();
                _this.onBlur.emit();
                _this.changeDetector.markForCheck();
            });
        }
    };
    /** @nocollapse */
    TextAreaDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
    ]; };
    TextAreaDirective.propDecorators = {
        elementClass: [{ type: HostBinding, args: ['class.k-textarea',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        valueChange: [{ type: Output }],
        autoSize: [{ type: Input }],
        value: [{ type: Input }]
    };
TextAreaDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: TextAreaDirective, selectors: [["textarea", "kendoTextArea", ""]], factory: function TextAreaDirective_Factory(t) { return new (t || TextAreaDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(RTL, 8)); }, hostBindings: function TextAreaDirective_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(2);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-textarea", ctx.elementClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { autoSize: "autoSize", value: "value" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return TextAreaDirective; }),
                multi: true
            }, {
                provide: KendoInput,
                useExisting: forwardRef(function () { return TextAreaDirective; })
            }]), ɵngcc0.ɵɵNgOnChangesFeature()] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TextAreaDirective, [{
        type: Directive,
        args: [{
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return TextAreaDirective; }),
                        multi: true
                    }, {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return TextAreaDirective; })
                    }],
                selector: 'textarea[kendoTextArea]'
            }]
    }], function () { return [{ type: Renderer2 }, { type: ElementRef }, { type: NgZone }, { type: ChangeDetectorRef }, { type: Injector }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, { renderer: [], element: [], zone: [], changeDetector: [], injector: [], valueChange: [{
            type: Output
        }], autoSize: [{
            type: Input
        }], onFocus: [], onBlur: [], onValueChange: [], listeners: [], ngChange: [], ngTouched: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], elementClass: [{
            type: HostBinding,
            args: ['class.k-textarea']
        }], id: [], id: [], writeValue: [], elementValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], ngOnInit: [], control: [], ngOnChanges: [], initialHeight: [], ngOnDestroy: [], setElementProperty: [], resize: [], handleInput: [], value: [{
            type: Input
        }], handleFocus: [], handleBlur: [] });
    return TextAreaDirective;
}());

var FloatingLabelInputAdapter = /** @class */ (function () {
    function FloatingLabelInputAdapter(component, formControl) {
        this.component = component;
        var isObservableOrEventEmitter = function (event) { return event instanceof Observable || event instanceof EventEmitter; };
        if (isObservableOrEventEmitter(component.onFocus)) {
            this.onFocus = component.onFocus;
        }
        if (isObservableOrEventEmitter(component.onBlur)) {
            this.onBlur = component.onBlur;
        }
        if (formControl) {
            this.onValueChange = formControl.valueChanges;
        }
        else if (component.onValueChange) {
            this.onValueChange = component.onValueChange;
        }
    }
    Object.defineProperty(FloatingLabelInputAdapter.prototype, "focusableId", {
        get: function () {
            var component = this.component;
            if ('focusableId' in component) {
                return component.focusableId;
            }
            else if ('id' in component) {
                return component.id;
            }
            return "";
        },
        set: function (value) {
            var component = this.component;
            if ('focusableId' in component) {
                component.focusableId = value;
            }
            else if ('id' in component) {
                component.id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    return FloatingLabelInputAdapter;
}());

var isFunction = function (x) { return Object.prototype.toString.call(x) === '[object Function]'; };
/**
 * Represents the [Kendo UI TextBoxContainer component for Angular]({% slug overview_textbox %}).
 * Provides floating labels to `input` elements.
 *
 * The TextBoxContainer supports both Template and Reactive Forms and
 * [can contain either of the following components]({% slug overview_textbox %}#toc-implementing-floating-labels):
 * * Kendo input components and directives such as `kendoTextBox`, `kendo-combobox`, `kendo-datepicker`, etc., or
 * * Form-bound Input components.
 *
 * @example
 * ```ts
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-textbox-container floatingLabel="First name">
 *       <input kendoTextBox />
 *     </kendo-textbox-container>
 *   `
 * })
 * class AppComponent {
 * }
 *
 * ```
 */
var TextBoxContainerComponent = /** @class */ (function () {
    function TextBoxContainerComponent(elementRef, renderer, changeDetectorRef, rtl) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * @hidden
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.empty = true;
        /**
         * @hidden
         */
        this.invalid = false;
        this._subscriptions = [];
        this.direction = rtl ? 'rtl' : 'ltr';
        this.renderer.removeAttribute(this.elementRef.nativeElement, "id");
    }
    Object.defineProperty(TextBoxContainerComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "textareaElementClass", {
        get: function () {
            return !!this.textarea;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "emptyClass", {
        get: function () {
            return this.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxContainerComponent.prototype, "invalidClass", {
        get: function () {
            return this.invalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.formControl && !this.kendoInput) {
            if (isDevMode()) {
                throw new Error("The TextBoxContainer requires a Kendo Input component" +
                    " or a forms-bound component to function properly.");
            }
            return;
        }
        // add focus/blur/valueChange handlers
        var control = new FloatingLabelInputAdapter(this.kendoInput || this.formControl.valueAccessor, this.formControl);
        var setFocus = function (isFocused) { return function () {
            _this.focused = isFocused;
            _this.updateState();
            _this.changeDetectorRef.markForCheck();
        }; };
        this.subscribe(control, 'onFocus', setFocus(true));
        this.subscribe(control, 'onBlur', setFocus(false));
        var updateState = function () { return _this.updateState(); };
        updateState();
        this.subscribe(control, 'onValueChange', updateState);
        // set label id for floating label
        if (this.id && control.focusableId) {
            // input wins
            this.id = control.focusableId;
        }
        else if (this.id) {
            control.focusableId = this.id;
        }
        else if (control.focusableId) {
            this.id = control.focusableId;
        }
        else {
            var id = "_" + guid();
            control.focusableId = id;
            this.id = id;
        }
    };
    /**
     * @hidden
     */
    TextBoxContainerComponent.prototype.ngOnDestroy = function () {
        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this._subscriptions = [];
    };
    TextBoxContainerComponent.prototype.subscribe = function (control, eventName, handler) {
        if (control[eventName] instanceof EventEmitter) {
            var subscription = control[eventName].subscribe(handler);
            this._subscriptions.push(subscription);
        }
    };
    TextBoxContainerComponent.prototype.updateState = function () {
        var empty = function (value) {
            // zero is not an empty value (e.g., NumericTextBox)
            if (value === 0 || value === false) {
                return false;
            }
            // empty arrays are an empty value (e.g., MultiSelect)
            if (Array.isArray(value) && !value.length) {
                return true;
            }
            return !value;
        };
        var formControl = this.formControl;
        if (formControl) {
            var valueAccessor = formControl.valueAccessor;
            if (isFunction(valueAccessor.isEmpty)) {
                this.empty = valueAccessor.isEmpty();
            }
            else {
                this.empty = empty(formControl.value);
            }
            this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);
        }
        else {
            this.empty = isFunction(this.kendoInput.isEmpty) ?
                this.kendoInput.isEmpty() : empty(this.kendoInput.value);
        }
        this.changeDetectorRef.markForCheck();
    };
    /** @nocollapse */
    TextBoxContainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
    ]; };
    TextBoxContainerComponent.propDecorators = {
        hostClasses: [{ type: HostBinding, args: ['class.k-textbox-container',] }],
        textareaElementClass: [{ type: HostBinding, args: ['class.k-textarea-wrapper',] }],
        focusedClass: [{ type: HostBinding, args: ['class.k-state-focused',] }],
        emptyClass: [{ type: HostBinding, args: ['class.k-state-empty',] }],
        invalidClass: [{ type: HostBinding, args: ['class.k-state-invalid',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        id: [{ type: Input }],
        floatingLabel: [{ type: Input }],
        kendoInput: [{ type: ContentChild, args: [KendoInput,] }],
        textarea: [{ type: ContentChild, args: [TextAreaDirective,] }],
        formControl: [{ type: ContentChild, args: [NgControl,] }]
    };
TextBoxContainerComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: TextBoxContainerComponent, selectors: [["kendo-textbox-container"]], factory: function TextBoxContainerComponent_Factory(t) { return new (t || TextBoxContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RTL, 8)); }, contentQueries: function TextBoxContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, KendoInput, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, TextAreaDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgControl, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx.kendoInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx.textarea = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadContentQuery()) && (ctx.formControl = _t.first);
    } }, hostBindings: function TextBoxContainerComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(6);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-textbox-container", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-textarea-wrapper", ctx.textareaElementClass);
        ɵngcc0.ɵɵclassProp("k-state-focused", ctx.focusedClass);
        ɵngcc0.ɵɵclassProp("k-state-empty", ctx.emptyClass);
        ɵngcc0.ɵɵclassProp("k-state-invalid", ctx.invalidClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { id: "id", floatingLabel: "floatingLabel" }, ngContentSelectors: _c50, consts: 2, vars: 1, template: function TextBoxContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, TextBoxContainerComponent_label_1_Template, 2, 2, "label", _c48);
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.floatingLabel);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TextBoxContainerComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-textbox-container',
                template: "\n        <ng-content></ng-content>\n        <label *ngIf=\"floatingLabel\" [for]=\"id\" class=\"k-label\">{{ floatingLabel }}</label>\n    "
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }, { type: ChangeDetectorRef }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, { elementRef: [], renderer: [], changeDetectorRef: [], focused: [], empty: [], invalid: [], _subscriptions: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-textbox-container']
        }], textareaElementClass: [{
            type: HostBinding,
            args: ['class.k-textarea-wrapper']
        }], focusedClass: [{
            type: HostBinding,
            args: ['class.k-state-focused']
        }], emptyClass: [{
            type: HostBinding,
            args: ['class.k-state-empty']
        }], invalidClass: [{
            type: HostBinding,
            args: ['class.k-state-invalid']
        }], ngAfterContentInit: [], id: [{
            type: Input
        }], ngOnDestroy: [], subscribe: [], updateState: [], floatingLabel: [{
            type: Input
        }], kendoInput: [{
            type: ContentChild,
            args: [KendoInput]
        }], textarea: [{
            type: ContentChild,
            args: [TextAreaDirective]
        }], formControl: [{
            type: ContentChild,
            args: [NgControl]
        }] });
    return TextBoxContainerComponent;
}());

/**
 * Represents the [Kendo UI TextBox directive]({% slug overview_textbox %}) for the Inputs components for Angular.
 * Used to style the textbox of any `input` element.
 *
 * @example
 * ```ts-no-run
 * <input kendoTextBox />
 * <input kendoTextBox type="email" />
 * <input kendoTextBox type="password" />
 * ```
 */
var TextBoxDirective = /** @class */ (function () {
    function TextBoxDirective(renderer, inputElement) {
        this.renderer = renderer;
        this.inputElement = inputElement;
        this.hostClass = true;
        /**
         * @hidden
         */
        this.onFocus = new EventEmitter();
        /**
         * @hidden
         */
        this.onBlur = new EventEmitter();
        /**
         * @hidden
         */
        this.onValueChange = new EventEmitter();
        this.listeners = [];
    }
    Object.defineProperty(TextBoxDirective.prototype, "value", {
        /**
         * @hidden
         */
        get: function () {
            return this.inputElement.nativeElement.value;
        },
        /**
         * @hidden
         */
        set: function (text) {
            if (!this.inputElement) {
                return;
            }
            this.inputElement.nativeElement.value = (text === undefined || text === null) ? '' : text;
            this.onValueChange.emit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxDirective.prototype, "id", {
        get: function () {
            return this.inputElement.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    TextBoxDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var input = this.inputElement.nativeElement;
        this.listeners = [
            this.renderer.listen(input, 'focus', function () { return _this.onFocus.emit(); }),
            this.renderer.listen(input, 'blur', function () { return _this.onBlur.emit(); })
        ];
    };
    TextBoxDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
    };
    /** @nocollapse */
    TextBoxDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    TextBoxDirective.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class.k-textbox',] }],
        value: [{ type: Input }]
    };
TextBoxDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: TextBoxDirective, selectors: [["input", "kendoTextBox", ""]], factory: function TextBoxDirective_Factory(t) { return new (t || TextBoxDirective)(ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, hostBindings: function TextBoxDirective_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(1);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-textbox", ctx.hostClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { value: "value" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: KendoInput,
                useExisting: forwardRef(function () { return TextBoxDirective; })
            }])] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TextBoxDirective, [{
        type: Directive,
        args: [{
                selector: 'input[kendoTextBox]',
                providers: [{
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return TextBoxDirective; })
                    }]
            }]
    }], function () { return [{ type: Renderer2 }, { type: ElementRef }]; }, { renderer: [], inputElement: [], hostClass: [{
            type: HostBinding,
            args: ['class.k-textbox']
        }], onFocus: [], onBlur: [], onValueChange: [], listeners: [], value: [{
            type: Input
        }], value: [], id: [], id: [], ngAfterViewInit: [], ngOnDestroy: [] });
    return TextBoxDirective;
}());

/**
 * @hidden
 */
var createMaxValidator = function (maxValue) {
    return function (c) {
        var err = {
            maxError: {
                maxValue: maxValue,
                value: c.value
            }
        };
        return (c.value !== null && c.value > maxValue) ? err : null;
    };
};

/**
 * @hidden
 */
var createMinValidator = function (minValue) {
    return function (c) {
        var err = {
            minError: {
                minValue: minValue,
                value: c.value
            }
        };
        return (c.value !== null && c.value < minValue) ? err : null;
    };
};

/**
 * @hidden
 */
var MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-min';
/**
 * @hidden
 */
var MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/inputs/api/NumericTextBoxComponent/#toc-max';
/**
 * @hidden
 */
var POINT = ".";
/**
 * @hidden
 */
var INITIAL_SPIN_DELAY = 500;
/**
 * @hidden
 */
var SPIN_DELAY = 50;
/**
 * @hidden
 */
var EXPONENT_REGEX = /[eE][\-+]?([0-9]+)/;

/**
 * @hidden
 */
var numericRegex = function (options) {
    var autoCorrect = options.autoCorrect, decimals = options.decimals, min = options.min;
    var separator = options.separator;
    if (separator === POINT) {
        separator = '\\' + separator;
    }
    var signPattern = autoCorrect && min !== null && min >= 0 ? '' : '-?';
    var numberPattern;
    if (decimals === 0) {
        numberPattern = '\\d*';
    }
    else {
        numberPattern = "(?:(?:\\d+(" + separator + "\\d*)?)|(?:" + separator + "\\d*))?";
    }
    return new RegExp("^" + signPattern + numberPattern + "$");
};
/**
 * @hidden
 */
var decimalPart = function (value) {
    return value >= 0 ? Math.floor(value) : Math.ceil(value);
};
/**
 * @hidden
 */
var noop = function (_) { }; // tslint:disable-line:no-empty
/**
 * @hidden
 */
var defined = function (value) {
    return typeof value !== 'undefined';
};
/**
 * @hidden
 */
var isNumber = function (value) {
    return !isNaN(value) && value !== null;
};
/**
 * @hidden
 */
function pad(value, digits) {
    var count = digits - String(value).length;
    var result = value;
    if (count > 0) {
        var padString = new Array(count + 1).join("0");
        result = parseFloat(value + padString);
    }
    return result;
}
/**
 * @hidden
 */
var getDeltaFromMouseWheel = function (e) {
    var delta = 0;
    if (e.wheelDelta) {
        delta = e.wheelDelta / 120;
        delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
    }
    else if (e.detail) {
        delta = Math.round(-e.detail / 3);
    }
    return delta;
};

/**
 * @hidden
 */
var ArrowDirection;
(function (ArrowDirection) {
    ArrowDirection[ArrowDirection["Down"] = -1] = "Down";
    ArrowDirection[ArrowDirection["None"] = 0] = "None";
    ArrowDirection[ArrowDirection["Up"] = 1] = "Up";
})(ArrowDirection || (ArrowDirection = {}));

var PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];
var PARSABLE_DEFAULTS = {
    decimals: null,
    max: null,
    min: null,
    step: 1
};
var FOCUSED$2 = 'k-state-focused';
var FORMATTED_VALUE = 'k-formatted-value';
/**
 * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).
 */
var NumericTextBoxComponent = /** @class */ (function () {
    function NumericTextBoxComponent(intl, renderer, localizationService, injector, ngZone, changeDetector, hostElement) {
        var _this = this;
        this.intl = intl;
        this.renderer = renderer;
        this.localizationService = localizationService;
        this.injector = injector;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.hostElement = hostElement;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).
         */
        this.disabled = false;
        /**
         * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).
         */
        this.readonly = false;
        /**
         * Sets the title of the `input` element of the NumericTextBox.
         */
        this.title = '';
        /**
         * Specifies whether the value will be auto-corrected based on the minimum and maximum values
         * ([see example]({% slug precision_numerictextbox %})).
         */
        this.autoCorrect = false;
        /**
         * Specifies the number of decimals that the user can enter when the input is focused
         * ([see example]({% slug precision_numerictextbox %})).
         */
        this.decimals = null;
        /**
         * Specifies the value that is used to increment or decrement the component value
         * ([see example]({% slug predefinedsteps_numerictextbox %})).
         */
        this.step = 1;
        /**
         * Specifies whether the **Up** and **Down** spin buttons will be rendered
         * ([see example]({% slug spinbuttons_numerictextbox %})).
         */
        this.spinners = true;
        /**
         * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.
         *
         * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`
         * to `false`, the built-in Angular validators will be executed.
         */
        this.rangeValidation = true;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Specifies the value of the NumericTextBox
         * ([see example]({% slug formats_numerictextbox %})).
         */
        this.value = null;
        /**
         * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * @hidden
         */
        this.ArrowDirection = ArrowDirection;
        /**
         * @hidden
         */
        this.arrowDirection = ArrowDirection.None;
        this.inputValue = '';
        this.minValidateFn = noop;
        this.maxValidateFn = noop;
        this._format = "n2";
        this.isPasted = false;
        /**
         * @hidden
         */
        this.increasePress = function (e) {
            _this.arrowPress(ArrowDirection.Up, e);
        };
        /**
         * @hidden
         */
        this.decreasePress = function (e) {
            _this.arrowPress(ArrowDirection.Down, e);
        };
        /**
         * @hidden
         */
        this.releaseArrow = function () {
            clearTimeout(_this.spinTimeout);
            if (_this.arrowDirection !== ArrowDirection.None) {
                _this.arrowDirection = ArrowDirection.None;
                _this.changeDetector.detectChanges();
            }
        };
        /**
         * @hidden
         */
        this.handlePaste = function () {
            _this.isPasted = true;
        };
        /**
         * @hidden
         */
        this.handleInput = function () {
            var input = _this.numericInput.nativeElement;
            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd, inputValue = input.value;
            if (_this.pressedKey === Keys.NumpadDecimal) {
                inputValue = _this.replaceNumpadDotValue();
            }
            if (_this.isPasted) {
                inputValue = _this.formatInputValue(_this.intl.parseNumber(inputValue));
            }
            if (!_this.isValid(inputValue)) {
                input.value = _this.inputValue;
                _this.setSelection(selectionStart - 1, selectionEnd - 1);
                return;
            }
            var parsedValue = _this.intl.parseNumber(inputValue);
            var value = _this.restrictDecimals(parsedValue);
            if (_this.autoCorrect) {
                var limited = _this.limitInputValue(value);
                value = limited.value;
                selectionStart = limited.selectionStart;
                selectionEnd = limited.selectionEnd;
            }
            if (parsedValue !== value || _this.hasTrailingZeros(inputValue) || !_this.focused) {
                _this.setInputValue(value);
                _this.setSelection(selectionStart, selectionEnd);
            }
            else {
                _this.inputValue = inputValue;
            }
            if (_this.isPasted) {
                input.value = _this.inputValue;
            }
            _this.updateValue(value);
            _this.previousSelection = null;
            _this.isPasted = false;
        };
        /**
         * @hidden
         */
        this.handleDragEnter = function () {
            if (!_this.focused && !_this.isDisabled) {
                _this.setInputValue(_this.value, true);
            }
        };
        /**
         * @hidden
         */
        this.handleFocus = function () {
            if (!_this.focused) {
                _this.focused = true;
                if (!_this.isDisabled) {
                    _this.setInputValue();
                    _this.ngZone.runOutsideAngular(function () {
                        setTimeout(function () {
                            _this.setSelection(0, _this.inputValue.length);
                        }, 0); /* tslint:disable-line  align */
                    });
                }
            }
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.focused = false;
            //blur is thrown before input when dragging the input text in IE
            if (_this.inputValue !== _this.elementValue) {
                _this.handleInput();
            }
            _this.setInputValue();
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.ngTouched();
                    _this.onBlur.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleKeyDown = function (e) {
            if (_this.isDisabled) {
                return;
            }
            var step;
            if (e.keyCode === Keys.ArrowDown) {
                step = -1;
            }
            else if (e.keyCode === Keys.ArrowUp) {
                step = 1;
            }
            if (step && _this.step) {
                e.preventDefault();
                _this.addStep(step);
            }
            var input = _this.numericInput.nativeElement;
            _this.previousSelection = {
                end: input.selectionEnd,
                start: input.selectionStart
            };
            _this.pressedKey = e.keyCode;
        };
        /**
         * @hidden
         */
        this.handleWheel = function (e) {
            if (_this.focused && !_this.isDisabled) {
                e.preventDefault();
                var delta = getDeltaFromMouseWheel(e);
                _this.addStep(delta);
            }
        };
        //TODO: disable tslint and move those to the constructor level
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        this.direction = localizationService.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(NumericTextBoxComponent.prototype, "format", {
        /**
         * Specifies the number format which is used when the NumericTextBox is not focused
         * ([see example]({% slug formats_numerictextbox %})).
         * If `format` is set to `null` or `undefined`, the default format will be used.
         */
        get: function () {
            var format = this._format;
            return format !== null && format !== undefined ? format : 'n2';
        },
        set: function (value) {
            this._format = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "widgetClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    NumericTextBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions = this.localizationService
            .changes
            .subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.ngOnChanges = function (changes) {
        if (anyChanged(PARSABLE_OPTIONS, changes, false)) {
            this.parseOptions(PARSABLE_OPTIONS.filter(function (option) { return changes[option]; }));
        }
        this.verifySettings();
        if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {
            this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;
            this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;
        }
        if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {
            delete this.numericRegex;
        }
        if (anyChanged(['value', 'format'], changes, false)) {
            this.verifyValue(this.value);
            this.value = this.restrictModelValue(this.value);
            if (!this.focused || (this.intl.parseNumber(this.elementValue) !== this.value)) {
                this.setInputValue();
            }
        }
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        clearTimeout(this.spinTimeout);
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.validate = function (control) {
        return this.minValidateFn(control) || this.maxValidateFn(control);
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.writeValue = function (value) {
        this.verifyValue(value);
        var restrictedValue = this.restrictModelValue(value);
        this.value = restrictedValue;
        this.setInputValue();
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    NumericTextBoxComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    NumericTextBoxComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Focuses the NumericTextBox.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="numerictextbox.focus()">Focus NumericTextBox</button>
     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    NumericTextBoxComponent.prototype.focus = function () {
        invokeElementMethod(this.numericInput, 'focus');
    };
    /**
     * Blurs the NumericTextBox.
     */
    NumericTextBoxComponent.prototype.blur = function () {
        invokeElementMethod(this.numericInput, 'blur');
    };
    /**
     * Notifies the `NumericTextBoxComponent` that the input value should be changed.
     * Can be used to update the input after setting the component properties directly.
     */
    NumericTextBoxComponent.prototype.notifyValueChange = function () {
        this.setInputValue();
    };
    Object.defineProperty(NumericTextBoxComponent.prototype, "incrementTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('increment');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "decrementTitle", {
        /**
         * @hidden
         */
        get: function () {
            return this.localizationService.get('decrement');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "decimalSeparator", {
        get: function () {
            var numberSymbols = this.intl.numberSymbols();
            return numberSymbols.decimal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "elementValue", {
        get: function () {
            return this.numericInput.nativeElement.value;
        },
        set: function (value) {
            this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (value) {
            if (this.isFocused !== value && this.numericWrap) {
                var wrap = this.numericWrap.nativeElement;
                var input = this.numericInput.nativeElement;
                if (value) {
                    this.renderer.addClass(wrap, FOCUSED$2);
                    if (!this.isDisabled) {
                        this.renderer.removeClass(input, FORMATTED_VALUE);
                    }
                }
                else {
                    this.renderer.removeClass(wrap, FOCUSED$2);
                    this.renderer.addClass(input, FORMATTED_VALUE);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "hasDecimals", {
        get: function () {
            return this.decimals !== null && this.decimals >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumericTextBoxComponent.prototype, "isDisabled", {
        get: function () {
            return this.disabled || this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    NumericTextBoxComponent.prototype.arrowPress = function (direction, e) {
        e.preventDefault();
        if (this.isDisabled) {
            return;
        }
        if (!mobileOS) {
            this.focused = true;
            this.focus();
        }
        if (this.arrowDirection !== direction) {
            this.arrowDirection = direction;
            this.changeDetector.detectChanges();
        }
        if (this.step) {
            this.spin(direction, INITIAL_SPIN_DELAY);
        }
        else {
            this.setInputValue();
        }
    };
    NumericTextBoxComponent.prototype.updateValue = function (value) {
        var _this = this;
        if (!areSame(this.value, value)) {
            this.ngZone.run(function () {
                _this.value = value;
                _this.ngChange(value);
                _this.valueChange.emit(value);
                _this.changeDetector.markForCheck();
            });
        }
    };
    NumericTextBoxComponent.prototype.replaceNumpadDotValue = function () {
        var value = this.inputValue || "";
        if (this.previousSelection) {
            var input = this.numericInput.nativeElement;
            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd;
            var _a = this.previousSelection, start = _a.start, end = _a.end;
            input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);
            this.setSelection(selectionStart, selectionEnd);
        }
        return value;
    };
    NumericTextBoxComponent.prototype.isValid = function (value) {
        if (!this.numericRegex) {
            this.numericRegex = numericRegex({
                autoCorrect: this.autoCorrect,
                decimals: this.decimals,
                min: this.min,
                separator: this.decimalSeparator
            });
        }
        return this.numericRegex.test(value);
    };
    NumericTextBoxComponent.prototype.spin = function (step, timeout) {
        var _this = this;
        clearTimeout(this.spinTimeout);
        this.spinTimeout = window.setTimeout(function () {
            _this.spin(step, SPIN_DELAY);
        }, timeout); /* tslint:disable-line  align */
        this.addStep(step);
    };
    NumericTextBoxComponent.prototype.addStep = function (step) {
        var value = add(this.value || 0, this.step * step);
        value = this.limitValue(value);
        value = this.restrictDecimals(value);
        this.setInputValue(value);
        this.updateValue(value);
    };
    NumericTextBoxComponent.prototype.setSelection = function (start, end) {
        if (this.focused) {
            invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);
        }
    };
    NumericTextBoxComponent.prototype.limitValue = function (value) {
        var result = value;
        if (!this.isInRange(value)) {
            if (isNumber(this.max) && value > this.max) {
                result = this.max;
            }
            if (isNumber(this.min) && value < this.min) {
                result = this.min;
            }
        }
        return result;
    };
    NumericTextBoxComponent.prototype.limitInputValue = function (value) {
        var _a = this.numericInput.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd, enteredValue = _a.value;
        var limitedValue = value;
        var selectToEnd = false;
        if (!this.isInRange(value)) {
            var lengthChange = enteredValue.length - String(this.inputValue).length;
            var _b = this, min = _b.min, max = _b.max;
            var hasMax = isNumber(max);
            var hasMin = isNumber(min);
            var padLimit = void 0, replaceNext = void 0;
            var correctedValue = value;
            if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {
                return {
                    selectionEnd: selectionEnd,
                    selectionStart: selectionStart,
                    value: null
                };
            }
            if (hasMax && value > max) {
                if (value > 0) {
                    replaceNext = true;
                }
                else {
                    padLimit = max;
                }
            }
            else if (hasMin && value < min) {
                if (value > 0) {
                    padLimit = min;
                }
                else {
                    replaceNext = true;
                }
            }
            if (padLimit) {
                var paddedValue = this.tryPadValue(value, padLimit);
                if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {
                    correctedValue = paddedValue;
                    selectToEnd = true;
                }
            }
            else if (replaceNext) {
                if (this.inputValue && selectionStart !== enteredValue.length) {
                    correctedValue = parseFloat(enteredValue.substr(0, selectionStart) +
                        enteredValue.substr(selectionStart + lengthChange));
                }
            }
            limitedValue = this.limitValue(correctedValue);
            selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection &&
                (this.previousSelection.end - this.previousSelection.start + lengthChange) > 0;
        }
        return {
            selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd,
            selectionStart: selectionStart,
            value: limitedValue
        };
    };
    NumericTextBoxComponent.prototype.tryPadValue = function (value, limit) {
        var limitLength = String(Math.floor(limit)).length;
        var zeroPadded = pad(value, limitLength);
        var zeroPaddedNext = pad(value, limitLength + 1);
        var result;
        if (this.isInRange(zeroPadded)) {
            result = zeroPadded;
        }
        else if (this.isInRange(zeroPaddedNext)) {
            result = zeroPaddedNext;
        }
        return result;
    };
    NumericTextBoxComponent.prototype.isInRange = function (value) {
        return !isNumber(value) || ((!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max));
    };
    NumericTextBoxComponent.prototype.restrictModelValue = function (value) {
        var result = this.restrictDecimals(value, true);
        if (this.autoCorrect && this.limitValue(result) !== result) {
            result = null;
        }
        return result;
    };
    NumericTextBoxComponent.prototype.restrictDecimals = function (value, round) {
        var result = value;
        if (value && this.hasDecimals) {
            var decimals = this.decimals;
            var stringValue = String(value);
            if (round || EXPONENT_REGEX.test(stringValue)) {
                result = toFixedPrecision(value, decimals);
            }
            else {
                var parts = stringValue.split(POINT);
                var fraction = parts[1];
                if (fraction && fraction.length > decimals) {
                    fraction = fraction.substr(0, decimals);
                    result = parseFloat("" + parts[0] + POINT + fraction);
                }
            }
        }
        return result;
    };
    NumericTextBoxComponent.prototype.formatInputValue = function (value) {
        var stringValue = String(value);
        var exponentMatch = EXPONENT_REGEX.exec(stringValue);
        if (exponentMatch) {
            stringValue = value.toFixed(limitPrecision(parseInt(exponentMatch[1], 10)));
        }
        return stringValue.replace(POINT, this.decimalSeparator);
    };
    NumericTextBoxComponent.prototype.formatValue = function (value, focused) {
        var formattedValue;
        if (value === null || !defined(value) || value === '') {
            formattedValue = '';
        }
        else if (focused && !this.readonly) {
            formattedValue = this.formatInputValue(value);
        }
        else {
            formattedValue = this.intl.formatNumber(value, this.format);
        }
        return formattedValue;
    };
    NumericTextBoxComponent.prototype.setInputValue = function (value, focused) {
        if (value === void 0) { value = this.value; }
        if (focused === void 0) { focused = this.focused; }
        var formattedValue = this.formatValue(value, focused);
        this.elementValue = formattedValue;
        this.inputValue = formattedValue;
    };
    NumericTextBoxComponent.prototype.verifySettings = function () {
        if (!isDevMode()) {
            return;
        }
        if (this.min !== null && this.max !== null && this.min > this.max) {
            throw new Error("The max value should be bigger than the min. See " + MIN_DOC_LINK + " and " + MAX_DOC_LINK + ".");
        }
    };
    NumericTextBoxComponent.prototype.verifyValue = function (value) {
        if (isDevMode() && value && typeof value !== 'number') {
            throw new Error("The NumericTextBox component requires value of type Number and " + JSON.stringify(value) + " was set.");
        }
    };
    NumericTextBoxComponent.prototype.parseOptions = function (options) {
        for (var idx = 0; idx < options.length; idx++) {
            var name_1 = options[idx];
            var value = this[name_1];
            if (typeof value === 'string') {
                var parsed = parseFloat(value);
                var valid = !isNaN(parsed);
                if (isDevMode() && !valid && value !== '') {
                    throw new Error('The NumericTextBox component requires value of type Number or a String representing ' +
                        ("a number for the " + name_1 + " property and " + JSON.stringify(value) + " was set."));
                }
                this[name_1] = valid ? parsed : PARSABLE_DEFAULTS[name_1];
            }
        }
    };
    NumericTextBoxComponent.prototype.intlChange = function () {
        delete this.numericRegex;
        if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {
            this.setInputValue();
        }
    };
    NumericTextBoxComponent.prototype.hasTrailingZeros = function (inputValue) {
        if (this.hasDecimals && this.focused) {
            var fraction = inputValue.split(this.decimalSeparator)[1];
            return fraction && fraction.length > this.decimals && fraction.lastIndexOf('0') === fraction.length - 1;
        }
    };
    /** @nocollapse */
    NumericTextBoxComponent.ctorParameters = function () { return [
        { type: IntlService },
        { type: Renderer2 },
        { type: LocalizationService },
        { type: Injector },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    NumericTextBoxComponent.propDecorators = {
        focusableId: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        title: [{ type: Input }],
        autoCorrect: [{ type: Input }],
        format: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        decimals: [{ type: Input }],
        placeholder: [{ type: Input }],
        step: [{ type: Input }],
        spinners: [{ type: Input }],
        rangeValidation: [{ type: Input }],
        tabindex: [{ type: Input }],
        tabIndex: [{ type: Input }],
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        onFocus: [{ type: Output, args: ['focus',] }],
        onBlur: [{ type: Output, args: ['blur',] }],
        numericInput: [{ type: ViewChild, args: ['numericInput',] }],
        numericWrap: [{ type: ViewChild, args: ['numericWrap',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-numerictextbox',] }]
    };
NumericTextBoxComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NumericTextBoxComponent, selectors: [["kendo-numerictextbox"]], factory: function NumericTextBoxComponent_Factory(t) { return new (t || NumericTextBoxComponent)(ɵngcc0.ɵɵdirectiveInject(IntlService), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, viewQuery: function NumericTextBoxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c51, true);
        ɵngcc0.ɵɵviewQuery(_c52, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.numericInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.numericWrap = _t.first);
    } }, hostBindings: function NumericTextBoxComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(3);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClasses);
        ɵngcc0.ɵɵclassProp("k-numerictextbox", ctx.widgetClasses);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { focusableId: "focusableId", disabled: "disabled", readonly: "readonly", title: "title", autoCorrect: "autoCorrect", decimals: "decimals", step: "step", spinners: "spinners", rangeValidation: "rangeValidation", tabindex: "tabindex", value: "value", format: "format", tabIndex: "tabIndex", max: "max", min: "min", placeholder: "placeholder" }, outputs: { valueChange: "valueChange", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendoNumericTextBox"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            { provide: L10N_PREFIX, useValue: 'kendo.numerictextbox' },
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return NumericTextBoxComponent; }), multi: true },
            { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return NumericTextBoxComponent; }), multi: true },
            { provide: KendoInput, useExisting: forwardRef(function () { return NumericTextBoxComponent; }) }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 7, vars: 23, template: function NumericTextBoxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, _c53);
        ɵngcc0.ɵɵi18nAttributes(1, _c58);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "span", _c59, _c60);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵelement(4, "input", _c61, _c62);
        ɵngcc0.ɵɵtemplate(6, NumericTextBoxComponent_span_6_Template, 5, 16, "span", _c63);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.disabled);
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵproperty("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(13, _c71, ctx.handleWheel, ctx.handleWheel));
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("tabindex", ctx.tabIndex)("disabled", ctx.disabled)("readonly", ctx.readonly)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction6(16, _c72, ctx.handleDragEnter, ctx.handleKeyDown, ctx.handleInput, ctx.handleFocus, ctx.handleBlur, ctx.handlePaste));
        ɵngcc0.ɵɵattribute("aria-valuemin", ctx.min)("aria-valuemax", ctx.max)("aria-valuenow", ctx.value)("title", ctx.title)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.spinners);
    } }, directives: function () { return [LocalizedMessagesDirective$2, ɵngcc1.EventsOutsideAngularDirective, ɵngcc2.NgIf]; }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NumericTextBoxComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoNumericTextBox',
                providers: [
                    LocalizationService,
                    { provide: L10N_PREFIX, useValue: 'kendo.numerictextbox' },
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return NumericTextBoxComponent; }), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return NumericTextBoxComponent; }), multi: true },
                    { provide: KendoInput, useExisting: forwardRef(function () { return NumericTextBoxComponent; }) }
                ],
                selector: 'kendo-numerictextbox',
                template: "\n        <ng-container kendoNumericTextBoxLocalizedMessages\n            i18n-increment=\"kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\"\n            increment=\"Increase value\"\n            i18n-decrement=\"kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\"\n            decrement=\"Decrease value\"\n        >\n        </ng-container>\n        <span\n            class=\"k-numeric-wrap\"\n            [class.k-state-disabled]=\"disabled\"\n            [kendoEventsOutsideAngular]=\"{ mousewheel: handleWheel, DOMMouseScroll: handleWheel }\"\n            #numericWrap>\n            <input\n            role=\"spinbutton\"\n            class=\"k-input k-formatted-value\"\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            [id]=\"focusableId\"\n            [attr.aria-valuemin]=\"min\"\n            [attr.aria-valuemax]=\"max\"\n            [attr.aria-valuenow]=\"value\"\n            [attr.title]=\"title\"\n            [attr.placeholder]=\"placeholder\"\n            [tabindex]=\"tabIndex\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                dragenter: handleDragEnter,\n                keydown: handleKeyDown,\n                input: handleInput,\n                focus: handleFocus,\n                blur: handleBlur,\n                paste: handlePaste\n            }\"\n            #numericInput />\n            <span class=\"k-select\" *ngIf=\"spinners\" [kendoEventsOutsideAngular]=\"{ mouseup: releaseArrow, mouseleave: releaseArrow }\">\n                <span\n                    [kendoEventsOutsideAngular]=\"{ mousedown: increasePress }\"\n                    [attr.aria-label]=\"incrementTitle\"\n                    [title]=\"incrementTitle\"\n                    [class.k-state-active]=\"arrowDirection === ArrowDirection.Up\"\n                    class=\"k-link k-link-increase\"\n                >\n                    <span class=\"k-icon k-i-arrow-n\"></span>\n                </span>\n                <span\n                    [kendoEventsOutsideAngular]=\"{ mousedown: decreasePress }\"\n                    [attr.aria-label]=\"decrementTitle\"\n                    [title]=\"decrementTitle\"\n                    [class.k-state-active]=\"arrowDirection === ArrowDirection.Down\"\n                    class=\"k-link k-link-decrease\"\n                >\n                    <span class=\"k-icon k-i-arrow-s\"></span>\n                </span>\n            </span>\n        </span>\n      "
            }]
    }], function () { return [{ type: IntlService }, { type: Renderer2 }, { type: LocalizationService }, { type: Injector }, { type: NgZone }, { type: ChangeDetectorRef }, { type: ElementRef }]; }, { intl: [], renderer: [], localizationService: [], injector: [], ngZone: [], changeDetector: [], hostElement: [], focusableId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], title: [{
            type: Input
        }], autoCorrect: [{
            type: Input
        }], decimals: [{
            type: Input
        }], step: [{
            type: Input
        }], spinners: [{
            type: Input
        }], rangeValidation: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], value: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], ArrowDirection: [], arrowDirection: [], inputValue: [], minValidateFn: [], maxValidateFn: [], _format: [], isPasted: [], increasePress: [], decreasePress: [], releaseArrow: [], handlePaste: [], handleInput: [], handleDragEnter: [], handleFocus: [], handleBlur: [], handleKeyDown: [], handleWheel: [], ngChange: [], ngTouched: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], format: [{
            type: Input
        }], format: [], tabIndex: [{
            type: Input
        }], tabIndex: [], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-numerictextbox']
        }], ngOnInit: [], subscriptions: [], control: [], ngOnChanges: [], ngOnDestroy: [], validate: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], focus: [], blur: [], notifyValueChange: [], incrementTitle: [], decrementTitle: [], decimalSeparator: [], elementValue: [], elementValue: [], focused: [], focused: [], hasDecimals: [], isDisabled: [], arrowPress: [], updateValue: [], replaceNumpadDotValue: [], isValid: [], numericRegex: [], spin: [], spinTimeout: [], addStep: [], setSelection: [], limitValue: [], limitInputValue: [], tryPadValue: [], isInRange: [], restrictModelValue: [], restrictDecimals: [], formatInputValue: [], formatValue: [], setInputValue: [], verifySettings: [], verifyValue: [], parseOptions: [], intlChange: [], hasTrailingZeros: [], max: [{
            type: Input
        }], min: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], numericInput: [{
            type: ViewChild,
            args: ['numericInput']
        }], numericWrap: [{
            type: ViewChild,
            args: ['numericWrap']
        }] });
    return NumericTextBoxComponent;
}());

/**
 * @hidden
 */
var Messages = /** @class */ (function (_super) {
    __extends(Messages, _super);
    function Messages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Messages.propDecorators = {
        decrement: [{ type: Input }],
        increment: [{ type: Input }]
    };
Messages.ngBaseDef = ɵngcc0.ɵɵdefineBase({ inputs: { decrement: "decrement", increment: "increment" } });
    return Messages;
}(ComponentMessages));

/**
 * Custom component messages override default component messages.
 */
var NumericTextBoxCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(NumericTextBoxCustomMessagesComponent, _super);
    function NumericTextBoxCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    Object.defineProperty(NumericTextBoxCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    NumericTextBoxCustomMessagesComponent.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
NumericTextBoxCustomMessagesComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NumericTextBoxCustomMessagesComponent, selectors: [["kendo-numerictextbox-messages"]], factory: function NumericTextBoxCustomMessagesComponent_Factory(t) { return new (t || NumericTextBoxCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(function () { return NumericTextBoxCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], consts: 0, vars: 0, template: function NumericTextBoxCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NumericTextBoxCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(function () { return NumericTextBoxCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-numerictextbox-messages',
                template: ""
            }]
    }], function () { return [{ type: LocalizationService }]; }, { override: [] });
    return NumericTextBoxCustomMessagesComponent;
}(Messages));

/**
 * @hidden
 */
var ResultType;
(function (ResultType) {
    ResultType[ResultType["Literal"] = 0] = "Literal";
    ResultType[ResultType["Mask"] = 1] = "Mask";
    ResultType[ResultType["Undefined"] = 2] = "Undefined";
})(ResultType || (ResultType = {}));
/**
 * @hidden
 */
var Result = /** @class */ (function () {
    function Result(value, rest, type) {
        if (type === void 0) { type = ResultType.Undefined; }
        this.value = value;
        this.rest = rest;
        this.type = type;
    }
    //map :: Functor f => f a ~> (a -> b) -> f b
    Result.prototype.map = function (fn) {
        return new Result(fn(this.value), this.rest);
    };
    //chain :: Chain m => m a ~> (a -> m b) -> m b
    Result.prototype.chain = function (fn) {
        return fn(this.value, this.rest);
    };
    Result.prototype.fold = function (s, _ /*we don't need it*/) {
        return s(this.value, this.rest);
    };
    Result.prototype.concat = function (r) {
        return this.map(function (vs, _) { return r.chain(function (v, __) { return vs.concat([v]); }); });
    };
    Result.prototype.toString = function () {
        return "Result({ value: '" + this.value + "', rest: " + this.rest + " })";
    };
    return Result;
}());

/**
 * @hidden
 */
var Stream = /** @class */ (function () {
    function Stream(input, control) {
        if (input === void 0) { input = []; }
        if (control === void 0) { control = []; }
        this.input = input;
        this.control = control;
        this.inputCursor = 0;
        this.controlCursor = 0;
    }
    Stream.prototype.eof = function () {
        return this.inputCursor >= this.input.length;
    };
    // Get the first value from the input.
    Stream.prototype.next = function () {
        return {
            char: this.input[this.inputCursor++],
            control: this.control[this.controlCursor++]
        };
    };
    Stream.prototype.peek = function () {
        return {
            char: this.input[this.inputCursor],
            control: this.control[this.controlCursor]
        };
    };
    Stream.prototype.eat_input = function () {
        this.inputCursor++;
    };
    Stream.prototype.eat_control = function () {
        this.controlCursor++;
    };
    Stream.prototype.eat = function () {
        this.inputCursor++;
        this.controlCursor++;
    };
    return Stream;
}());

var toArray = function (value) { return (value || '').split(''); };
var ESCAPE_CHARACTER = '\\';
/**
 * @hidden
 */
var Parser = /** @class */ (function () {
    function Parser(parse) {
        this.parse = parse;
    }
    Parser.prototype.run = function (input, control) {
        if (control === void 0) { control = ''; }
        if (input instanceof Stream) {
            return this.parse(input);
        }
        else {
            return this.parse(new Stream(toArray(input), toArray(control)));
        }
    };
    //map :: Functor f => f a ~> (a -> b) -> f b
    Parser.prototype.map = function (f) {
        var _this = this;
        return new Parser(function (stream) { return _this.parse(stream).map(f); });
    };
    //chain :: Chain m => m a ~> (a -> m b) -> m b
    Parser.prototype.chain = function (f) {
        var _this = this;
        return new Parser(function (stream) { return _this.parse(stream).chain(function (v, s) { return f(v).run(s); }); });
    };
    Parser.prototype.isLiteral = function (c) {
        return this.run(c).type === ResultType.Literal;
    };
    return Parser;
}());
/**
 * @hidden
 */
var mask = function (_a) {
    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
    return function (rule) { return new Parser(function (stream) {
        while (!stream.eof()) {
            var _a = stream.peek(), char = _a.char, control = _a.control;
            if (char === control && control === prompt) {
                stream.eat();
                return new Result(prompt, stream, ResultType.Mask);
            }
            if (rule.test(char)) {
                stream.eat();
                return new Result(char, stream, ResultType.Mask);
            }
            if (char === promptPlaceholder) {
                stream.eat();
                return new Result(prompt, stream, ResultType.Mask);
            }
            stream.eat_input();
        }
        stream.eat();
        return new Result(prompt, stream, ResultType.Mask);
    }); };
};
/**
 * @hidden
 */
var literal = function (_token) { return new Parser(function (stream) {
    //    let {char, control} = stream.peek();
    var char = stream.peek().char;
    if (char === _token) {
        stream.eat();
        return new Result(_token, stream, ResultType.Literal);
    }
    //    if (control === _token) {
    //        while (!stream.eof() && char !== _token) {
    //            stream.eat_input();
    //            char = stream.peek().char;
    //        }
    //    }
    //
    //    if (control !== undefined) {
    //        stream.eat();
    //    }
    return new Result(_token, stream, ResultType.Literal);
}); };
/**
 * @hidden
 */
var unmask = function (prompt) { return function (rule) { return new Parser(function (stream) {
    while (!stream.eof()) {
        var _a = stream.peek(), char = _a.char, control = _a.control;
        if (char === prompt && control === prompt) {
            stream.eat();
            return new Result(char, stream);
        }
        if (rule.test(char)) {
            stream.eat();
            return new Result(char, stream);
        }
        stream.eat_input();
    }
    stream.eat();
    return new Result('', stream);
}); }; };
/**
 * @hidden
 */
var unliteral = function (_token) { return new Parser(function (stream) {
    if (stream.eof()) {
        return new Result('', stream);
    }
    var char = stream.peek().char;
    if (char === _token) {
        stream.eat();
    }
    return new Result(_token, stream);
}); };
/**
 * @hidden
 */
var token = function (rules, creator) { return new Parser(function (stream) {
    var char = stream.next().char;
    var rule = rules[char];
    if (char === ESCAPE_CHARACTER) {
        char = stream.next().char;
        return new Result(creator.literal(char), stream);
    }
    if (!rule) {
        return new Result(creator.literal(char), stream);
    }
    return new Result(creator.mask(rule), stream);
}); };
/**
 * @hidden
 */
var rawMask = function (_a) {
    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
    return new Parser(function (stream) {
        var char = stream.next().char;
        if (char === prompt) {
            return new Result(promptPlaceholder, stream);
        }
        return new Result(char, stream);
    });
};
/**
 * @hidden
 */
var rawLiteral = function (includeLiterals) { return new Parser(function (stream) {
    var char = stream.next().char;
    if (includeLiterals) {
        return new Result(char, stream);
    }
    return new Result('', stream);
}); };

/**
 * @hidden
 */
var always = function (value) { return new Parser(function (stream) { return new Result(value, stream); }); };
/**
 * @hidden
 */
var append = function (p1, p2) { return p1.chain(function (vs) { return p2.map(function (v) { return vs.concat([v]); }); }); };
/**
 * @hidden
 */
var sequence = function (list) { return list.reduce(function (acc, parser) { return append(acc, parser); }, always([])); };
/**
 * @hidden
 */
var greedy = function (parser) { return new Parser(function (stream) {
    var result = new Result([], stream);
    while (!stream.eof()) {
        result = result.concat(parser.run(stream));
    }
    return result;
}); };

/**
 * @hidden
 */
var MaskingService = /** @class */ (function () {
    function MaskingService() {
        this.rules = {};
        this.prompt = "_";
        this.mask = "";
        this.promptPlaceholder = " ";
        this.includeLiterals = false;
        this.maskTokens = [];
        this.unmaskTokens = [];
        this.rawTokens = [];
        this.validationTokens = [];
    }
    MaskingService.prototype.update = function (_a) {
        var _b = _a.mask, mask$$1 = _b === void 0 ? '' : _b, _c = _a.prompt, prompt = _c === void 0 ? '' : _c, _d = _a.promptPlaceholder, promptPlaceholder = _d === void 0 ? ' ' : _d, _e = _a.rules, rules = _e === void 0 ? {} : _e, _f = _a.includeLiterals, includeLiterals = _f === void 0 ? false : _f;
        this.mask = mask$$1;
        this.prompt = prompt;
        this.promptPlaceholder = promptPlaceholder;
        this.rules = rules;
        this.includeLiterals = includeLiterals;
        this.tokenize();
    };
    MaskingService.prototype.validationValue = function (maskedValue) {
        if (maskedValue === void 0) { maskedValue = ''; }
        var value = maskedValue;
        sequence(this.validationTokens)
            .run(maskedValue)
            .fold(function (unmasked) {
            value = unmasked.join('');
        });
        return value;
    };
    MaskingService.prototype.rawValue = function (maskedValue) {
        if (maskedValue === void 0) { maskedValue = ''; }
        var value = maskedValue;
        if (!this.rawTokens.length) {
            return value;
        }
        sequence(this.rawTokens)
            .run(maskedValue)
            .fold(function (unmasked) {
            value = unmasked.join('');
        });
        return value;
    };
    /**
     * @hidden
     */
    MaskingService.prototype.maskRaw = function (rawValue) {
        if (rawValue === void 0) { rawValue = ''; }
        var value = rawValue;
        if (!this.maskTokens.length) {
            return value;
        }
        sequence(this.maskTokens)
            .run(rawValue)
            .fold(function (masked) {
            value = masked.join('');
        });
        return value;
    };
    MaskingService.prototype.maskInput = function (input, control, splitPoint) {
        if (input.length < control.length) {
            return this.maskRemoved(input, control, splitPoint);
        }
        return this.maskInserted(input, control, splitPoint);
    };
    MaskingService.prototype.maskInRange = function (pasted, oldValue, start, end) {
        var value = '';
        var selection = end;
        var beforeChange = oldValue.split('').slice(0, start);
        var afterChange = oldValue.split('').slice(end);
        sequence(this.maskTokens.slice(start, end))
            .run(pasted)
            .fold(function (masked) {
            value = beforeChange
                .concat(masked)
                .concat(afterChange)
                .join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    MaskingService.prototype.maskRemoved = function (input, control, splitPoint) {
        var _this = this;
        var value = '';
        var selection = splitPoint;
        var unchanged = input.split('').slice(splitPoint);
        var changed = input.split('').slice(0, splitPoint).join('');
        var take = this.maskTokens.length - (input.length - splitPoint);
        sequence(this.maskTokens.slice(0, take))
            .run(changed, control)
            .fold(function (masked) {
            selection = _this.adjustPosition(masked, selection);
            value = masked.concat(unchanged).join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    MaskingService.prototype.adjustPosition = function (input, selection) {
        var caretChar = input[selection];
        var isLiteral = this.maskTokens[selection].isLiteral(caretChar);
        if (!isLiteral && caretChar !== this.prompt) {
            return selection + 1;
        }
        return selection;
    };
    MaskingService.prototype.maskInserted = function (input, control, splitPoint) {
        var _this = this;
        var value = '';
        var selection = splitPoint;
        var changed = input.slice(0, splitPoint);
        sequence(this.unmaskTokens)
            .run(changed, control)
            .chain(function (unmasked) {
            selection = unmasked.join('').length;
            var unchanged = control.slice(selection);
            return sequence(_this.maskTokens)
                .run(unmasked.join('') + unchanged, control);
        })
            .fold(function (masked) {
            value = masked.join('');
        });
        return {
            selection: selection,
            value: value
        };
    };
    Object.defineProperty(MaskingService.prototype, "maskTokenCreator", {
        get: function () {
            var _a = this, prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;
            return {
                literal: function (rule) { return literal(rule); },
                mask: function (rule) { return mask({ prompt: prompt, promptPlaceholder: promptPlaceholder })(rule); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "unmaskTokenCreator", {
        get: function () {
            var _this = this;
            return {
                literal: function (rule) { return unliteral(rule); },
                mask: function (rule) { return unmask(_this.prompt)(rule); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "rawTokenCreator", {
        get: function () {
            var _a = this, prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder, includeLiterals = _a.includeLiterals;
            return {
                literal: function (_) { return rawLiteral(includeLiterals); },
                mask: function (_) { return rawMask({ prompt: prompt, promptPlaceholder: promptPlaceholder }); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskingService.prototype, "validationTokenCreator", {
        get: function () {
            var prompt = this.prompt;
            return {
                literal: function (_) { return rawLiteral(false); },
                mask: function (_) { return rawMask({ prompt: prompt, promptPlaceholder: '' }); }
            };
        },
        enumerable: true,
        configurable: true
    });
    MaskingService.prototype.tokenize = function () {
        var _this = this;
        greedy(token(this.rules, this.maskTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.maskTokens = tokens;
        });
        greedy(token(this.rules, this.unmaskTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.unmaskTokens = tokens;
        });
        greedy(token(this.rules, this.rawTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.rawTokens = tokens;
        });
        greedy(token(this.rules, this.validationTokenCreator))
            .run(this.mask)
            .fold(function (tokens, _) {
            _this.validationTokens = tokens;
        });
    };
MaskingService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: MaskingService, factory: function MaskingService_Factory(t) { return new (t || MaskingService)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MaskingService, [{
        type: Injectable
    }], function () { return []; }, { rules: [], prompt: [], mask: [], promptPlaceholder: [], includeLiterals: [], maskTokens: [], unmaskTokens: [], rawTokens: [], validationTokens: [], update: [], validationValue: [], rawValue: [], maskRaw: [], maskInput: [], maskInRange: [], maskRemoved: [], adjustPosition: [], maskInserted: [], maskTokenCreator: [], unmaskTokenCreator: [], rawTokenCreator: [], validationTokenCreator: [], tokenize: [] });
    return MaskingService;
}());

var resolvedPromise = Promise.resolve(null);
var FOCUSED$3 = 'k-state-focused';
/**
 * Represents the [Kendo UI MaskedTextBox component for Angular]({% slug overview_maskedtextbox %}).
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *      <kendo-maskedtextbox
 *          [mask]="mask"
 *          [value]="value">
 *      </kendo-maskedtextbox>
 *     `
 * })
 *
 * class AppComponent {
 *  public value: string = "9580128055807792";
 *  public mask: string = "0000-0000-0000-0000";
 * }
 * ```
 */
var MaskedTextBoxComponent = /** @class */ (function () {
    function MaskedTextBoxComponent(service, renderer, hostElement, ngZone, injector, rtl) {
        var _this = this;
        this.service = service;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.injector = injector;
        /**
         * @hidden
         */
        this.focusableId = "k-" + guid();
        /**
         * Determines whether the MaskedTextBox is disabled ([see example]({% slug disabled_maskedtextbox %})).
         */
        this.disabled = false;
        /**
         * Determines whether the MaskedTextBox is in its read-only state ([see example]({% slug readonly_maskedtextbox %})).
         */
        this.readonly = false;
        this.hostClasses = true;
        /**
         * Represents a prompt character for the masked value.
         * @default `_`
         */
        this.prompt = '_';
        /**
         * Indicates a character which represents an empty position in the raw value.
         * @default ' '
         */
        this.promptPlaceholder = ' ';
        /**
         * Indicates whether to include literals in the raw value  ([see example]({% slug value_maskedtextbox %})).
         * @default false
         */
        this.includeLiterals = false;
        /**
         * Specifies if the mask should be shown on focus for empty value.
         */
        this.maskOnFocus = false;
        /**
         * Determines whether the built-in mask validator is enforced when a form is validated
         * ([see example]({% slug validation_maskedtextbox %})).
         * @default true
         */
        this.maskValidation = true;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the `input` element.
         *
         * > To wire the event programmatically, use the `onFocus` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-maskedtextbox (focus)="handleFocus()"></kendo-maskedtextbox>
         * `
         * })
         * class AppComponent {
         *   public handleFocus(): void {
         *      console.log("Component is focused");
         *   }
         * }
         * ```
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `input` element gets blurred.
         *
         * > To wire the event programmatically, use the `onBlur` property.
         *
         * @example
         * ```ts
         * _@Component({
         * selector: 'my-app',
         * template: `
         *  <kendo-maskedtextbox (blur)="handleBlur()"></kendo-maskedtextbox>
         * `
         * })
         * class AppComponent {
         *   public handleBlur(): void {
         *      console.log("Component is blurred");
         *   }
         * }
         * ```
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the value changes.
         */
        this.valueChange = new EventEmitter();
        this.focusClick = false;
        this.defaultRules = {
            "#": /[\d\s\+\-]/,
            "&": /[\S]/,
            "0": /[\d]/,
            "9": /[\d\s]/,
            "?": /[a-zA-Z\s]/,
            "A": /[a-zA-Z0-9]/,
            "C": /./,
            "L": /[a-zA-Z]/,
            "a": /[a-zA-Z0-9\s]/
        };
        this.isPasted = false;
        this.selection = [0, 0];
        /**
         * @hidden
         */
        this.handleFocus = function () {
            _this.focused = true;
            if (_this.maskOnFocus && _this.emptyMask) {
                _this.updateInput(_this.service.maskRaw(_this.value));
                _this.ngZone.runOutsideAngular(function () {
                    setTimeout(function () { _this.setSelection(0, 0); }, 0);
                });
            }
            if (hasObservers(_this.onFocus)) {
                _this.ngZone.run(function () {
                    _this.onFocus.emit();
                });
            }
        };
        /**
         * @hidden
         */
        this.handleClick = function () {
            if (_this.focused && !_this.focusClick) {
                _this.focusClick = true;
                var _a = _this.input.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
                if (selectionStart === selectionEnd) {
                    _this.setFocusSelection();
                }
            }
        };
        /**
         * @hidden
         */
        this.handleBlur = function () {
            _this.focused = false;
            _this.focusClick = false;
            if (_this.maskOnFocus && _this.emptyMask) {
                _this.updateInput(_this.maskedValue);
            }
            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {
                _this.ngZone.run(function () {
                    _this.onTouched();
                    _this.onBlur.emit();
                });
            }
        };
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this.direction = rtl ? 'rtl' : 'ltr';
        this.updateService();
    }
    Object.defineProperty(MaskedTextBoxComponent.prototype, "hostDisabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "rules", {
        /**
         * Exposes the RegExp-based mask validation array ([see example]({% slug masks_maskedtextbox %})).
         */
        get: function () {
            return this._rules || this.defaultRules;
        },
        set: function (value) {
            this._rules = Object.assign({}, this.defaultRules, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskedTextBoxComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.ngOnInit = function () {
        if (this.hostElement) {
            this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        }
        this.control = this.injector.get(NgControl, null);
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the MaskedTextBox is empty.
     */
    MaskedTextBoxComponent.prototype.isEmpty = function () {
        if (this.input) {
            return !Boolean(this.input.nativeElement.value);
        }
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.handleDragDrop = function () {
        return false;
    };
    /**
     * Focuses the MaskedTextBox.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="maskedinput.focus()">Focus the input</button>
     *  <kendo-maskedtextbox #maskedinput></kendo-maskedtextbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    MaskedTextBoxComponent.prototype.focus = function () {
        if (!this.input) {
            return;
        }
        this.input.nativeElement.focus();
    };
    /**
     * Blurs the MaskedTextBox.
     */
    MaskedTextBoxComponent.prototype.blur = function () {
        if (!this.input) {
            return;
        }
        this.input.nativeElement.blur();
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.pasteHandler = function (e) {
        var _a = e.target, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;
        if (selectionEnd === selectionStart) {
            return;
        }
        this.isPasted = true;
        this.selection = [selectionStart, selectionEnd];
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.inputHandler = function (e) {
        var value = e.target.value;
        var _a = this.selection, start = _a[0], end = _a[1];
        if (!this.mask) {
            this.updateValue(value);
            this.isPasted = false;
            return;
        }
        var result;
        if (this.isPasted) {
            this.isPasted = false;
            var rightPart = this.maskedValue.length - end;
            var to = value.length - rightPart;
            result = this.service.maskInRange(value.slice(start, to), this.maskedValue, start, end);
        }
        else {
            result = this.service.maskInput(value, this.maskedValue, e.target.selectionStart);
        }
        this.updateInput(result.value, result.selection);
        this.updateValue(result.value);
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.value) {
            this.value = this.normalizeValue();
        }
        if (!this.mask) {
            this.updateInput(this.value);
            return;
        }
        var next = this.extractChanges(changes);
        this.updateService(next);
        if (isChanged('value', changes)) {
            var maskedValue = this.service.maskRaw(this.value);
            if (maskedValue !== this.maskedValue) {
                this.updateInput(maskedValue);
            }
        }
        else if (anyChanged(['promptPlaceholder', 'includeLiterals'], changes)) {
            resolvedPromise.then(function () {
                _this.updateValue(_this.maskedValue);
            });
        }
        else {
            this.updateInput(this.service.maskRaw(this.value));
        }
    };
    /**
     * @hidden
     * Writes a new value to the element.
     */
    MaskedTextBoxComponent.prototype.writeValue = function (value) {
        this.value = this.normalizeValue(value);
        this.updateInput(this.service.maskRaw(this.value));
    };
    /**
     * @hidden
     * Sets the function that will be called when a `change` event is triggered.
     */
    MaskedTextBoxComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @hidden
     * Sets the function that will be called when a `touch` event is triggered.
     */
    MaskedTextBoxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    MaskedTextBoxComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.validate = function (_) {
        if (this.maskValidation === false || !this.mask) {
            return null;
        }
        if (!this.service.validationValue(this.maskedValue)) {
            return null;
        }
        if (this.maskedValue.indexOf(this.prompt) !== -1) {
            return {
                patternError: {
                    mask: this.mask,
                    maskedValue: this.maskedValue,
                    value: this.value
                }
            };
        }
        return null;
    };
    /**
     * @hidden
     */
    MaskedTextBoxComponent.prototype.updateValue = function (maskedValue) {
        if (this.mask && !this.service.validationValue(maskedValue)) {
            this.value = '';
        }
        else {
            this.value = this.service.rawValue(maskedValue);
        }
        this.onChange(this.value);
        this.valueChange.emit(this.value);
    };
    MaskedTextBoxComponent.prototype.updateInput = function (maskedValue, selection) {
        if (maskedValue === void 0) { maskedValue = ''; }
        this.maskedValue = maskedValue;
        var value = this.maskOnFocus && !this.focused && this.emptyMask ? '' : maskedValue;
        this.renderer.setProperty(this.input.nativeElement, "value", value);
        if (selection !== undefined) {
            this.setSelection(selection, selection);
        }
    };
    MaskedTextBoxComponent.prototype.extractChanges = function (changes) {
        return Object.keys(changes).filter(function (key) { return key !== 'rules'; }).reduce(function (obj, key) {
            obj[key] = changes[key].currentValue;
            return obj;
        }, {}); // tslint:disable-line:align
    };
    MaskedTextBoxComponent.prototype.updateService = function (extra) {
        var config = Object.assign({
            includeLiterals: this.includeLiterals,
            mask: this.mask,
            prompt: this.prompt,
            promptPlaceholder: this.promptPlaceholder,
            rules: this.rules
        }, extra); // tslint:disable-line:align
        this.service.update(config);
    };
    MaskedTextBoxComponent.prototype.setSelection = function (start, end) {
        if (start === void 0) { start = this.selection[0]; }
        if (end === void 0) { end = this.selection[1]; }
        if (this.focused) {
            invokeElementMethod(this.input, 'setSelectionRange', start, end);
        }
    };
    Object.defineProperty(MaskedTextBoxComponent.prototype, "emptyMask", {
        get: function () {
            return this.service.maskRaw() === this.maskedValue;
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.setFocusSelection = function () {
        var selectionStart = this.input.nativeElement.selectionStart;
        var index = this.maskedValue.indexOf(this.prompt);
        if (index >= 0 && index < selectionStart) {
            this.selection = [index, index];
            this.setSelection();
        }
    };
    Object.defineProperty(MaskedTextBoxComponent.prototype, "focused", {
        get: function () {
            return this.isFocused;
        },
        set: function (value) {
            if (this.isFocused !== value && this.hostElement) {
                var element = this.hostElement.nativeElement;
                if (value) {
                    this.renderer.addClass(element, FOCUSED$3);
                }
                else {
                    this.renderer.removeClass(element, FOCUSED$3);
                }
                this.isFocused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    MaskedTextBoxComponent.prototype.normalizeValue = function (value) {
        if (value === void 0) { value = this.value; }
        var present = isPresent(value);
        if (present && typeof value !== 'string') {
            if (isDevMode()) {
                throw new Error('The MaskedTextBox component supports only string values.');
            }
            return String(value);
        }
        return present ? value : '';
    };
    /** @nocollapse */
    MaskedTextBoxComponent.ctorParameters = function () { return [
        { type: MaskingService },
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
    ]; };
    MaskedTextBoxComponent.propDecorators = {
        focusableId: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        title: [{ type: Input }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-maskedtextbox',] }],
        hostDisabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],
        mask: [{ type: Input }],
        value: [{ type: Input }],
        rules: [{ type: Input }],
        prompt: [{ type: Input }],
        promptPlaceholder: [{ type: Input }],
        includeLiterals: [{ type: Input }],
        maskOnFocus: [{ type: Input }],
        maskValidation: [{ type: Input }],
        tabindex: [{ type: Input }],
        tabIndex: [{ type: Input }],
        onFocus: [{ type: Output, args: ['focus',] }],
        onBlur: [{ type: Output, args: ['blur',] }],
        valueChange: [{ type: Output }],
        input: [{ type: ViewChild, args: ['input',] }],
        pasteHandler: [{ type: HostListener, args: ['paste', ['$event'],] }],
        inputHandler: [{ type: HostListener, args: ['input', ['$event'],] }]
    };
MaskedTextBoxComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: MaskedTextBoxComponent, selectors: [["kendo-maskedtextbox"]], factory: function MaskedTextBoxComponent_Factory(t) { return new (t || MaskedTextBoxComponent)(ɵngcc0.ɵɵdirectiveInject(MaskingService), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Injector), ɵngcc0.ɵɵdirectiveInject(RTL, 8)); }, viewQuery: function MaskedTextBoxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c73, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.input = _t.first);
    } }, hostBindings: function MaskedTextBoxComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(4);
        ɵngcc0.ɵɵlistener("paste", function MaskedTextBoxComponent_paste_HostBindingHandler($event) { return ctx.pasteHandler($event); });
        ɵngcc0.ɵɵlistener("input", function MaskedTextBoxComponent_input_HostBindingHandler($event) { return ctx.inputHandler($event); });
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-maskedtextbox", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.hostDisabledClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { focusableId: "focusableId", disabled: "disabled", readonly: "readonly", prompt: "prompt", promptPlaceholder: "promptPlaceholder", includeLiterals: "includeLiterals", maskOnFocus: "maskOnFocus", maskValidation: "maskValidation", tabindex: "tabindex", rules: "rules", tabIndex: "tabIndex", value: "value", title: "title", mask: "mask" }, outputs: { onFocus: "focus", onBlur: "blur", valueChange: "valueChange" }, exportAs: ["kendoMaskedTextBox"], features: [ɵngcc0.ɵɵProvidersFeature([
            MaskingService,
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return MaskedTextBoxComponent; }) /* tslint:disable-line */
            },
            {
                multi: true,
                provide: NG_VALIDATORS,
                useExisting: forwardRef(function () { return MaskedTextBoxComponent; }) /* tslint:disable-line */
            },
            {
                provide: KendoInput,
                useExisting: forwardRef(function () { return MaskedTextBoxComponent; })
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 2, vars: 12, template: function MaskedTextBoxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "input", _c74, _c75);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("tabindex", ctx.tabIndex)("disabled", ctx.disabled)("readonly", ctx.readonly)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction5(6, _c76, ctx.handleFocus, ctx.handleBlur, ctx.handleClick, ctx.handleDragDrop, ctx.handleDragDrop));
        ɵngcc0.ɵɵattribute("title", ctx.title);
    } }, directives: [ɵngcc1.EventsOutsideAngularDirective], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MaskedTextBoxComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoMaskedTextBox',
                providers: [
                    MaskingService,
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return MaskedTextBoxComponent; }) /* tslint:disable-line */
                    },
                    {
                        multi: true,
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(function () { return MaskedTextBoxComponent; }) /* tslint:disable-line */
                    },
                    {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return MaskedTextBoxComponent; })
                    }
                ],
                selector: 'kendo-maskedtextbox',
                template: "\n        <input type=\"text\"\n            #input\n            autocomplete=\"off\"\n            autocorrect=\"off\"\n            autocapitalize=\"off\"\n            spellcheck=\"false\"\n            class=\"k-textbox\"\n            [id]=\"focusableId\"\n            [tabindex]=\"tabIndex\"\n            [attr.title]=\"title\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            [kendoEventsOutsideAngular]=\"{\n                focus: handleFocus,\n                blur: handleBlur,\n                click: handleClick,\n                dragstart: handleDragDrop,\n                drop: handleDragDrop\n            }\"\n        />\n    "
            }]
    }], function () { return [{ type: MaskingService }, { type: Renderer2 }, { type: ElementRef }, { type: NgZone }, { type: Injector }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, { service: [], renderer: [], hostElement: [], ngZone: [], injector: [], focusableId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-maskedtextbox']
        }], prompt: [{
            type: Input
        }], promptPlaceholder: [{
            type: Input
        }], includeLiterals: [{
            type: Input
        }], maskOnFocus: [{
            type: Input
        }], maskValidation: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], valueChange: [{
            type: Output
        }], focusClick: [], defaultRules: [], isPasted: [], selection: [], handleFocus: [], handleClick: [], handleBlur: [], onChange: [], onTouched: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], hostDisabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], rules: [{
            type: Input
        }], rules: [], tabIndex: [{
            type: Input
        }], tabIndex: [], ngOnInit: [], control: [], isEmpty: [], handleDragDrop: [], focus: [], blur: [], pasteHandler: [{
            type: HostListener,
            args: ['paste', ['$event']]
        }], inputHandler: [{
            type: HostListener,
            args: ['input', ['$event']]
        }], ngOnChanges: [], value: [{
            type: Input
        }], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], validate: [], updateValue: [], updateInput: [], maskedValue: [], extractChanges: [], updateService: [], setSelection: [], emptyMask: [], setFocusSelection: [], focused: [], focused: [], normalizeValue: [], title: [{
            type: Input
        }], mask: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ['input']
        }] });
    return MaskedTextBoxComponent;
}());

/* tslint:disable:component-selector */
/**
 * @hidden
 */
var SliderTick = /** @class */ (function () {
    function SliderTick(value) {
        this.value = value;
        this.classes = {
            'k-tick': true
        };
    }
    return SliderTick;
}());
/**
 * @hidden
 */
var SliderTicksComponent = /** @class */ (function () {
    function SliderTicksComponent(rtl) {
        this.rtl = rtl;
        this.wrapperClasses = 'k-reset k-slider-items';
        this.ticks = [];
    }
    SliderTicksComponent.prototype.ngOnChanges = function (_) {
        this.createTicks();
    };
    SliderTicksComponent.prototype.createTicks = function () {
        var count = calculateTicksCount(this.min, this.max, this.step);
        var largeStep = this.largeStep;
        var tickValueProps = {
            max: this.max,
            min: this.min,
            smallStep: this.step
        };
        var result = [];
        for (var i = 0; i < count; i++) {
            result.push(new SliderTick(calculateValueFromTick(i, tickValueProps)));
            if (largeStep && i % largeStep === 0) {
                result[i].large = true;
                result[i].classes['k-tick-large'] = true;
            }
        }
        if (this.rtl || this.vertical) {
            result = result.reverse();
        }
        if (result.length > 0) {
            Object.assign(result[0].classes, this.endTickClasses(true));
            Object.assign(result[result.length - 1].classes, this.endTickClasses(false));
        }
        this.ticks = result;
    };
    SliderTicksComponent.prototype.endTickClasses = function (first) {
        return {
            'k-first': (first && !this.vertical) || (!first && this.vertical),
            'k-last': (!first && !this.vertical) || (first && this.vertical)
        };
    };
    /** @nocollapse */
    SliderTicksComponent.ctorParameters = function () { return [
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
    ]; };
    SliderTicksComponent.propDecorators = {
        wrapperClasses: [{ type: HostBinding, args: ['class',] }],
        tickTitle: [{ type: Input }],
        vertical: [{ type: Input }],
        step: [{ type: Input }],
        largeStep: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        labelTemplate: [{ type: Input }],
        tickElements: [{ type: ViewChildren, args: ['tickElement',] }]
    };
SliderTicksComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: SliderTicksComponent, selectors: [["", "kendoSliderTicks", ""]], factory: function SliderTicksComponent_Factory(t) { return new (t || SliderTicksComponent)(ɵngcc0.ɵɵdirectiveInject(RTL, 8)); }, viewQuery: function SliderTicksComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c77, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.tickElements = _t);
    } }, hostBindings: function SliderTicksComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(1);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.wrapperClasses);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { tickTitle: "tickTitle", vertical: "vertical", step: "step", largeStep: "largeStep", min: "min", max: "max", labelTemplate: "labelTemplate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], attrs: _c78, consts: 3, vars: 1, template: function SliderTicksComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SliderTicksComponent_li_0_Template, 5, 5, "li", _c79);
        ɵngcc0.ɵɵtemplate(1, SliderTicksComponent_ng_template_1_Template, 1, 1, "ng-template", null, _c80, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgClass, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgTemplateOutlet], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SliderTicksComponent, [{
        type: Component,
        args: [{
                selector: '[kendoSliderTicks]',
                template: "\n    <li #tickElement *ngFor=\"let tick of ticks;\"\n        [ngClass]=\"tick.classes\"\n        title=\"{{ tickTitle(tick.value) }}\"\n        role=\"presentation\"\n     >\n         <ng-container [ngSwitch]=\"tick.large\">\n            <span class=\"k-label\" *ngSwitchCase=\"true\">\n                <ng-container [ngTemplateOutlet]=\"labelTemplate || defaultLabel\" [ngTemplateOutletContext]=\"tick\">\n                </ng-container>\n            </span>\n            <ng-container *ngSwitchCase=\"false\">&nbsp;</ng-container>\n         </ng-container>\n     </li>\n\n     <ng-template #defaultLabel let-value=\"value\">\n        {{ tickTitle(value) }}\n     </ng-template>\n  "
            }]
    }], function () { return [{ type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, { rtl: [], wrapperClasses: [{
            type: HostBinding,
            args: ['class']
        }], ticks: [], ngOnChanges: [], createTicks: [], endTickClasses: [], tickTitle: [{
            type: Input
        }], vertical: [{
            type: Input
        }], step: [{
            type: Input
        }], largeStep: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], labelTemplate: [{
            type: Input
        }], tickElements: [{
            type: ViewChildren,
            args: ['tickElement']
        }] });
    return SliderTicksComponent;
}());

/**
 * @hidden
 */
var Messages$1 = /** @class */ (function (_super) {
    __extends(Messages, _super);
    function Messages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Messages.propDecorators = {
        decrement: [{ type: Input }],
        increment: [{ type: Input }],
        dragHandle: [{ type: Input }]
    };
Messages$1.ngBaseDef = ɵngcc0.ɵɵdefineBase({ inputs: { decrement: "decrement", increment: "increment", dragHandle: "dragHandle" } });
    return Messages;
}(ComponentMessages));

/**
 * @hidden
 */
var LocalizedMessagesDirective = /** @class */ (function (_super) {
    __extends(LocalizedMessagesDirective, _super);
    function LocalizedMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    /** @nocollapse */
    LocalizedMessagesDirective.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
LocalizedMessagesDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective, selectors: [["", "kendoSliderLocalizedMessages", ""]], factory: function LocalizedMessagesDirective_Factory(t) { return new (t || LocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$1,
                useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages$1,
                        useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoSliderLocalizedMessages]'
            }]
    }], function () { return [{ type: LocalizationService }]; }, null);
    return LocalizedMessagesDirective;
}(Messages$1));

/**
 * Custom component messages override default component messages.
 */
var SliderCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(SliderCustomMessagesComponent, _super);
    function SliderCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    Object.defineProperty(SliderCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    SliderCustomMessagesComponent.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
SliderCustomMessagesComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: SliderCustomMessagesComponent, selectors: [["kendo-slider-messages"]], factory: function SliderCustomMessagesComponent_Factory(t) { return new (t || SliderCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$1,
                useExisting: forwardRef(function () { return SliderCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], consts: 0, vars: 0, template: function SliderCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SliderCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages$1,
                        useExisting: forwardRef(function () { return SliderCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-slider-messages',
                template: ""
            }]
    }], function () { return [{ type: LocalizationService }]; }, { override: [] });
    return SliderCustomMessagesComponent;
}(Messages$1));

var COMPONENT_DIRECTIVES = [
    SliderComponent,
    SliderTicksComponent,
    SliderCustomMessagesComponent,
    LocalizedMessagesDirective,
    LabelTemplateDirective
];
var COMPONENT_EXPORTS = [
    SliderComponent,
    SliderCustomMessagesComponent,
    LocalizedMessagesDirective,
    LabelTemplateDirective
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Slider component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Inputs module
 * import { SliderModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BrowserAnimationsModule, SliderModule], // import Slider module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var SliderModule = /** @class */ (function () {
    function SliderModule() {
    }
SliderModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: SliderModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(SliderModule, { declarations: function () { return [SliderComponent,
        SliderTicksComponent,
        SliderCustomMessagesComponent,
        LocalizedMessagesDirective,
        LabelTemplateDirective]; }, imports: function () { return [CommonModule, DraggableModule, EventsModule, ResizeSensorModule]; }, exports: function () { return [SliderComponent,
        SliderCustomMessagesComponent,
        LocalizedMessagesDirective,
        LabelTemplateDirective]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SliderModule, [{
        type: NgModule,
        args: [{
                declarations: COMPONENT_DIRECTIVES,
                exports: COMPONENT_EXPORTS,
                imports: [CommonModule, DraggableModule, EventsModule, ResizeSensorModule]
            }]
    }], function () { return []; }, null);
SliderModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function SliderModule_Factory(t) { return new (t || SliderModule)(); }, imports: [[CommonModule, DraggableModule, EventsModule, ResizeSensorModule]] });
    return SliderModule;
}());

/**
 * @hidden
 */
var Messages$2 = /** @class */ (function (_super) {
    __extends(Messages, _super);
    function Messages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Messages.propDecorators = {
        on: [{ type: Input }],
        off: [{ type: Input }]
    };
Messages$2.ngBaseDef = ɵngcc0.ɵɵdefineBase({ inputs: { on: "on", off: "off" } });
    return Messages;
}(ComponentMessages));

/**
 * @hidden
 */
var LocalizedMessagesDirective$1 = /** @class */ (function (_super) {
    __extends(LocalizedMessagesDirective, _super);
    function LocalizedMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    /** @nocollapse */
    LocalizedMessagesDirective.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
LocalizedMessagesDirective$1.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective$1, selectors: [["", "kendoSwitchLocalizedMessages", ""]], factory: function LocalizedMessagesDirective$1_Factory(t) { return new (t || LocalizedMessagesDirective$1)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$2,
                useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective$1, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages$2,
                        useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoSwitchLocalizedMessages]'
            }]
    }], function () { return [{ type: LocalizationService }]; }, null);
    return LocalizedMessagesDirective;
}(Messages$2));

/**
 * Custom component messages override default component messages.
 */
var SwitchCustomMessagesComponent = /** @class */ (function (_super) {
    __extends(SwitchCustomMessagesComponent, _super);
    function SwitchCustomMessagesComponent(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    Object.defineProperty(SwitchCustomMessagesComponent.prototype, "override", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    SwitchCustomMessagesComponent.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
SwitchCustomMessagesComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: SwitchCustomMessagesComponent, selectors: [["kendo-switch-messages"]], factory: function SwitchCustomMessagesComponent_Factory(t) { return new (t || SwitchCustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages$2,
                useExisting: forwardRef(function () { return SwitchCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], consts: 0, vars: 0, template: function SwitchCustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SwitchCustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages$2,
                        useExisting: forwardRef(function () { return SwitchCustomMessagesComponent; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: 'kendo-switch-messages',
                template: ""
            }]
    }], function () { return [{ type: LocalizationService }]; }, { override: [] });
    return SwitchCustomMessagesComponent;
}(Messages$2));

var COMPONENT_DIRECTIVES$1 = [
    SwitchComponent,
    SwitchCustomMessagesComponent,
    LocalizedMessagesDirective$1
];
var COMPONENT_EXPORTS$1 = [
    SwitchComponent,
    SwitchCustomMessagesComponent,
    LocalizedMessagesDirective$1
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Switch component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Switch module
 * import { SwitchModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, SwitchModule], // import Switch module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var SwitchModule = /** @class */ (function () {
    function SwitchModule() {
    }
SwitchModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: SwitchModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(SwitchModule, { declarations: function () { return [SwitchComponent,
        SwitchCustomMessagesComponent,
        LocalizedMessagesDirective$1]; }, imports: function () { return [CommonModule, EventsModule, ResizeSensorModule]; }, exports: function () { return [SwitchComponent,
        SwitchCustomMessagesComponent,
        LocalizedMessagesDirective$1]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SwitchModule, [{
        type: NgModule,
        args: [{
                declarations: COMPONENT_DIRECTIVES$1,
                exports: COMPONENT_EXPORTS$1,
                imports: [CommonModule, EventsModule, ResizeSensorModule]
            }]
    }], function () { return []; }, null);
SwitchModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function SwitchModule_Factory(t) { return new (t || SwitchModule)(); }, imports: [[CommonModule, EventsModule, ResizeSensorModule]] });
    return SwitchModule;
}());

/**
 * @hidden
 */
var LocalizedMessagesDirective$2 = /** @class */ (function (_super) {
    __extends(LocalizedMessagesDirective, _super);
    function LocalizedMessagesDirective(service) {
        var _this = _super.call(this) || this;
        _this.service = service;
        return _this;
    }
    /** @nocollapse */
    LocalizedMessagesDirective.ctorParameters = function () { return [
        { type: LocalizationService }
    ]; };
LocalizedMessagesDirective$2.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective$2, selectors: [["", "kendoNumericTextBoxLocalizedMessages", ""]], factory: function LocalizedMessagesDirective$2_Factory(t) { return new (t || LocalizedMessagesDirective$2)(ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective$2, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(function () { return LocalizedMessagesDirective; }) // tslint:disable-line:no-forward-ref
                    }
                ],
                selector: '[kendoNumericTextBoxLocalizedMessages]'
            }]
    }], function () { return [{ type: LocalizationService }]; }, null);
    return LocalizedMessagesDirective;
}(Messages));

var COMPONENT_EXPORTS$2 = [
    NumericTextBoxComponent,
    NumericTextBoxCustomMessagesComponent
];
var COMPONENT_DIRECTIVES$2 = [
    LocalizedMessagesDirective$2
].concat(COMPONENT_EXPORTS$2);
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the NumericTextBox component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the NumericTextBox module
 * import { NumericTextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, NumericTextBoxModule], // import NumericTextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var NumericTextBoxModule = /** @class */ (function () {
    function NumericTextBoxModule() {
    }
NumericTextBoxModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: NumericTextBoxModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(NumericTextBoxModule, { declarations: function () { return [LocalizedMessagesDirective$2,
        NumericTextBoxComponent,
        NumericTextBoxCustomMessagesComponent]; }, imports: function () { return [CommonModule, EventsModule]; }, exports: function () { return [NumericTextBoxComponent,
        NumericTextBoxCustomMessagesComponent]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NumericTextBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [COMPONENT_DIRECTIVES$2],
                exports: [COMPONENT_EXPORTS$2],
                imports: [CommonModule, EventsModule]
            }]
    }], function () { return []; }, null);
NumericTextBoxModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function NumericTextBoxModule_Factory(t) { return new (t || NumericTextBoxModule)(); }, imports: [[CommonModule, EventsModule]] });
    return NumericTextBoxModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the MaskedTextBox component.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the MaskedTextBox module
 * import { MaskedTextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, MaskedTextBoxModule], // import MaskedTextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var MaskedTextBoxModule = /** @class */ (function () {
    function MaskedTextBoxModule() {
    }
MaskedTextBoxModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: MaskedTextBoxModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(MaskedTextBoxModule, { declarations: function () { return [MaskedTextBoxComponent]; }, imports: function () { return [CommonModule, EventsModule]; }, exports: function () { return [MaskedTextBoxComponent]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MaskedTextBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [MaskedTextBoxComponent],
                exports: [MaskedTextBoxComponent],
                imports: [CommonModule, EventsModule]
            }]
    }], function () { return []; }, null);
MaskedTextBoxModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function MaskedTextBoxModule_Factory(t) { return new (t || MaskedTextBoxModule)(); }, imports: [[CommonModule, EventsModule]] });
    return MaskedTextBoxModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the TextBox directive.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the TextBox module
 * import { TextBoxModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, TextBoxModule], // import TextBox module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var TextBoxModule = /** @class */ (function () {
    function TextBoxModule() {
    }
TextBoxModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: TextBoxModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(TextBoxModule, { declarations: function () { return [TextBoxDirective,
        TextAreaDirective,
        TextBoxContainerComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TextBoxDirective,
        TextAreaDirective,
        TextBoxContainerComponent]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TextBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent],
                exports: [TextBoxDirective, TextAreaDirective, TextBoxContainerComponent],
                imports: [CommonModule]
            }]
    }], function () { return []; }, null);
TextBoxModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function TextBoxModule_Factory(t) { return new (t || TextBoxModule)(); }, imports: [[CommonModule]] });
    return TextBoxModule;
}());

/**
 * @hidden
 */
var PreventableEvent = /** @class */ (function () {
    function PreventableEvent() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    PreventableEvent.prototype.preventDefault = function () {
        this.prevented = true;
    };
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns - `true` if the default action was prevented. Otherwise, returns `false`.
     */
    PreventableEvent.prototype.isDefaultPrevented = function () {
        return this.prevented;
    };
    return PreventableEvent;
}());

/**
 * Fires each time the left side of the ColorPicker wrapper is clicked.
 * The event is triggered regardless of whether a ColorPicker icon is set or not.
 *
 * Provides information about the current active color and gives the option to prevent the opening of the popup.
 *
 * @example
 *
 * ```ts
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *       <kendo-colorpicker
 *           [icon]="'edit-tools'"
 *           [value]="'#900'"
 *           (activeColorClick)="handleActiveColorClick($event)"
 *       >
 *       </kendo-colorpicker>
 *   `
 * })
 * class AppComponent {
 *     public handleActiveColorClick(event: ActiveColorClickEvent): void {
 *         event.preventOpen();
 *
 *         console.log('Open prevented:', event.isOpenPrevented());
 *         console.log('Current color:', event.color);
 *     }
 *  }
 * ```
 */
var ActiveColorClickEvent = /** @class */ (function () {
    /**
     * @hidden
     * @param color Represents the current value of the ColorPicker.
     */
    function ActiveColorClickEvent(color) {
        this.color = color;
        this.openPrevented = false;
    }
    /**
     * Prevents the opening of the popup.
     */
    ActiveColorClickEvent.prototype.preventOpen = function () {
        this.openPrevented = true;
    };
    /**
     * Returns `true` if the popup opening is prevented by any of its subscribers.
     *
     * @returns - Returns `true` if the open action was prevented. Otherwise, returns `false`.
     */
    ActiveColorClickEvent.prototype.isOpenPrevented = function () {
        return this.openPrevented;
    };
    return ActiveColorClickEvent;
}());

/**
 * @hidden
 *
 * Returns the hex or rgba string representation of the color.
 */
var parseColor$1 = function (value, format, safe) {
    if (safe === void 0) { safe = true; }
    var allowedFormats = ['hex', 'rgba', 'name'];
    if (allowedFormats.indexOf(format) === -1) {
        throw new Error("Unsupported color output format '" + format + "'. The available options are 'hex', 'rgba' or 'name'.");
    }
    if (!isPresent(value)) {
        return;
    }
    if (format === 'name') {
        return nameFormat(value, safe);
    }
    var parsedColor = parseColor(value.trim(), safe);
    if (!isPresent(parsedColor)) {
        return;
    }
    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();
};
/**
 * @hidden
 *
 * Returns an HSV object representation of the color string.
 */
var getHSV = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = parseColor(value, safe);
    if (!isPresent(parsed)) {
        return {};
    }
    return parsed.toHSV();
};
/**
 * @hidden
 *
 * Returns an RGBA object representation of the color string.
 */
var getRGBA = function (value, safe) {
    if (safe === void 0) { safe = true; }
    var parsed = parseColor(value, safe);
    if (!isPresent(parsed)) {
        return {};
    }
    return parsed.toBytes();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
var getColorFromHSV = function (hsva) {
    var hue = fitIntoBounds(hsva.h, 0, 359.9);
    var saturation = fitIntoBounds(hsva.s, 0, 1);
    var value = fitIntoBounds(hsva.v, 0, 1);
    var alpha = fitIntoBounds(hsva.a, 0, 1);
    return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color based on the `hue`, assuming the `value`, `saturation` and `alpha` have value of `1`.
 */
var getColorFromHue = function (hue) {
    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });
};
/**
 * @hidden
 *
 * Returns the RGBA string representation of the color.
 */
var getColorFromRGBA = function (rgba) {
    var red = fitIntoBounds(rgba.r, 0, 255);
    var green = fitIntoBounds(rgba.g, 0, 255);
    var blue = fitIntoBounds(rgba.b, 0, 255);
    var alpha = fitIntoBounds(rgba.a, 0, 1);
    return Color.fromBytes(red, green, blue, alpha).toCssRgba();
};
/**
 *
 * @hidden
 */
function nameFormat(value, safe) {
    value = value.toLowerCase().trim();
    if (isPresent(namedColors[value])) {
        return value;
    }
    if (parseColor(value, safe)) {
        value = parseColor(value, safe).toHex();
    }
    var key = Object.keys(namedColors).find(function (key) { return namedColors[key] === value; });
    if (!key && !safe) {
        throw new Error("The provided color " + value + " is not supported for 'format=\"name\"' property.To display " + value + " color, the component 'format' property shoud be set to 'hex' or 'rgba' ");
    }
    return key;
}

// tslint:disable:max-line-length
/**
 * @hidden
 */
var PALETTEPRESETS = {
    basic: {
        colors: '000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7',
        columns: 10
    },
    office: {
        colors: 'ffffff, 000000, e6e6e6, 435569, 4371c4, ed7e32, a5a4a5, febf04, 5a9bd5, 71ae48, f2f2f3, 7f7f7f, d1cece, d5dde3, dae1f4, fce5d4, deeded, fff2cc, deeaf6, e1efd9, d7d8d8, 585959, aeabab, adbaca, b4c5e7, f6caac, dbdbdb, ffe498, bcd6ee, c5e0b2, bfbfc0, 3f3f3f, 767070, 8595b1, 8fabdb, f5b183, c9c8c9, fed965, 9bc4e5, a8d08d, a5a5a6, 262625, 393939, 334050, 2e5496, c45a11, 7b7b7a, bf9000, 2f75b5, 548235, 7f7f7f, 0b0c0c, 161616, 222a34, 203764, 843d0b, 525252, 7f6000, 1d4d79, 375623',
        columns: 10
    },
    apex: {
        colors: 'ffffff, 000000, c9c2d1, 69676d, ceb966, 9cb084, 6bb1c9, 6585cf, 7e6bc9, a379bb, f2f2f2, 7f7f7f, f4f2f5, e0e0e2, f5f1e0, ebefe6, e1eff4, e0e6f5, e5e1f4, ece4f1, d8d8d8, 595959, e9e6ec, c2c1c5, ebe3c1, d7dfcd, c3dfe9, c1ceeb, cbc3e9, dac9e3, bfbfbf, 3f3f3f, dedae3, a4a3a8, e1d5a3, c3cfb5, a6d0de, a2b5e2, b1a6de, c7aed6, a5a5a5, 262626, 9688a5, 4e4d51, ae9638, 758c5a, 3d8da9, 365bb0, 533da9, 7d4d99, 7f7f7f, 0c0c0c, 635672, 343336, 746425, 4e5d3c, 295e70, 243c75, 372970, 533366',
        columns: 10
    },
    austin: {
        colors: 'ffffff, 000000, caf278, 3e3d2d, 94c600, 71685a, ff6700, 909465, 956b43, fea022, f2f2f2, 7f7f7f, f4fce4, dddcd0, efffc0, e3e1dc, ffe0cb, e8e9df, ece1d6, feecd2, d8d8d8, 595959, e9f9c9, bbb9a1, dfff82, c8c3ba, ffc299, d2d4c0, dac3ad, fed9a6, bfbfbf, 3f3f3f, dff7ae, ada598, cfff43, ada598, ffa365, bcbfa1, c8a585, fec67a, a5a5a5, 262626, a9ea25, 2e2d21, 6f9400, 544e43, bf4d00, 6c6f4b, 6f5032, d77b00, 7f7f7f, 0c0c0c, 74a50f, 1f1e16, 4a6300, 38342d, 7f3300, 484a32, 4a3521, 8f5200',
        columns: 10
    },
    clarity: {
        colors: 'ffffff, 292934, f3f2dc, d2533c, 93a299, ad8f67, 726056, 4c5a6a, 808da0, 79463d, f2f2f2, e7e7ec, e7e5b9, f6dcd8, e9ecea, eee8e0, e4dedb, d8dde3, e5e8ec, e9d6d3, d8d8d8, c4c4d1, d5d185, edbab1, d3d9d6, ded2c2, c9beb8, b2bcc8, ccd1d9, d3aea7, bfbfbf, 8a8aa3, aca73b, e4978a, bec7c1, cdbba3, af9e94, 8c9bac, b2bac6, bd857c, a5a5a5, 56566e, 56531d, a43925, 6b7c72, 866b48, 554840, 39434f, 5c697b, 5a342d, 7f7f7f, 3b3b4b, 22210b, 6d2619, 47534c, 594730, 39302b, 262d35, 3d4652, 3c231e',
        columns: 10
    },
    slipstream: {
        colors: 'ffffff, 000000, b4dcfa, 212745, 4e67c8, 5eccf3, a7ea52, 5dceaf, ff8021, f14124, f2f2f2, 7f7f7f, 8bc9f7, c7cce4, dbe0f4, def4fc, edfadc, def5ef, ffe5d2, fcd9d3, d8d8d8, 595959, 4facf3, 909aca, b8c2e9, beeafa, dbf6b9, beebdf, ffcca6, f9b3a7, bfbfbf, 3f3f3f, 0d78c9, 5967af, 94a3de, 9ee0f7, caf297, 9de1cf, ffb279, f68d7b, a5a5a5, 262626, 063c64, 181d33, 31479f, 11b2eb, 81d319, 34ac8b, d85c00, c3260c, 7f7f7f, 0c0c0c, 021828, 101322, 202f6a, 0b769c, 568c11, 22725c, 903d00, 821908',
        columns: 10
    },
    metro: {
        colors: 'ffffff, 000000, d6ecff, 4e5b6f, 7fd13b, ea157a, feb80a, 00addc, 738ac8, 1ab39f, f2f2f2, 7f7f7f, a7d6ff, d9dde4, e5f5d7, fad0e4, fef0cd, c5f2ff, e2e7f4, c9f7f1, d8d8d8, 595959, 60b5ff, b3bcca, cbecb0, f6a1c9, fee29c, 8be6ff, c7d0e9, 94efe3, bfbfbf, 3f3f3f, 007dea, 8d9baf, b2e389, f272af, fed46b, 51d9ff, aab8de, 5fe7d5, a5a5a5, 262626, 003e75, 3a4453, 5ea226, af0f5b, c58c00, 0081a5, 425ea9, 138677, 7f7f7f, 0c0c0c, 00192e, 272d37, 3f6c19, 750a3d, 835d00, 00566e, 2c3f71, 0c594f',
        columns: 10
    },
    flow: {
        colors: 'ffffff, 000000, dbf5f9, 04617b, 0f6fc6, 009dd9, 0bd0d9, 10cf9b, 7cca62, a5c249, f2f2f2, 7f7f7f, b2e9f2, b4ecfc, c7e2fa, c4eeff, c9fafc, c9faed, e4f4df, edf2da, d8d8d8, 595959, 76d9e8, 6adafa, 90c6f6, 89deff, 93f5f9, 94f6db, cae9c0, dbe6b6, bfbfbf, 3f3f3f, 21b2c8, 20c8f7, 59a9f2, 4fceff, 5df0f6, 5ff2ca, b0dfa0, c9da91, a5a5a5, 262626, 105964, 02485c, 0b5394, 0075a2, 089ca2, 0b9b74, 54a838, 7e9532, 7f7f7f, 0c0c0c, 062328, 01303d, 073763, 004e6c, 05686c, 07674d, 387025, 546321',
        columns: 10
    },
    hardcover: {
        colors: 'ffffff, 000000, ece9c6, 895d1d, 873624, d6862d, d0be40, 877f6c, 972109, aeb795, f2f2f2, 7f7f7f, e1dca5, f2e0c6, f0d0c9, f6e6d5, f5f2d8, e7e5e1, fbc7bc, eef0e9, d8d8d8, 595959, d0c974, e6c28d, e2a293, eeceaa, ece5b2, cfccc3, f78f7a, dee2d4, bfbfbf, 3f3f3f, a29a36, daa454, d4735e, e6b681, e2d88c, b7b2a5, f35838, ced3bf, a5a5a5, 262626, 514d1b, 664515, 65281a, a2641f, a39428, 655f50, 711806, 879464, 7f7f7f, 0c0c0c, 201e0a, 442e0e, 431b11, 6c4315, 6d621a, 433f35, 4b1004, 5a6243',
        columns: 10
    },
    trek: {
        colors: 'ffffff, 000000, fbeec9, 4e3b30, f0a22e, a5644e, b58b80, c3986d, a19574, c17529, f2f2f2, 7f7f7f, f7e09e, e1d6cf, fcecd5, eddfda, f0e7e5, f3eae1, ece9e3, f5e3d1, d8d8d8, 595959, f3cc5f, c4ad9f, f9d9ab, dcc0b6, e1d0cc, e7d5c4, d9d4c7, ebc7a3, bfbfbf, 3f3f3f, d29f0f, a78470, f6c781, cba092, d2b9b2, dbc1a7, c6bfab, e1ac76, a5a5a5, 262626, 694f07, 3a2c24, c87d0e, 7b4b3a, 926255, a17242, 7b7153, 90571e, 7f7f7f, 0c0c0c, 2a1f03, 271d18, 855309, 523226, 614138, 6b4c2c, 524b37, 603a14',
        columns: 10
    },
    verve: {
        colors: 'ffffff, 000000, d2d2d2, 666666, ff388c, e40059, 9c007f, 68007f, 005bd3, 00349e, f2f2f2, 7f7f7f, bdbdbd, e0e0e0, ffd7e8, ffc6dc, ffb8f1, f1b2ff, c3dcff, b8cfff, d8d8d8, 595959, 9d9d9d, c1c1c1, ffafd1, ff8eba, ff71e4, e365ff, 87baff, 72a0ff, bfbfbf, 3f3f3f, 696969, a3a3a3, ff87ba, ff5597, ff2ad7, d519ff, 4b98ff, 2b71ff, a5a5a5, 262626, 343434, 4c4c4c, e90062, ab0042, 75005f, 4e005f, 00449e, 002676, 7f7f7f, 0c0c0c, 151515, 333333, 9b0041, 72002c, 4e003f, 34003f, 002d69, 00194f',
        columns: 10
    },
    monochrome: {
        colors: '000000, 1a1a1a, 333333, 4d4d4d, 666666, 808080, 999999, b3b3b3, cccccc, e6e6e6, f2f2f2, ffffff',
        columns: 12
    },
    accessible: {
        colors: 'black, grey, darkred, red, darkorange, gold, green, blue, darkblue, purple, white, darkgrey, saddlebrown, pink, orange, yellow, lightgreen, lightskyblue, lightblue, mediumpurple',
        columns: 10
    }
};

var DEFAULT_PRESET = 'office';
var DEFAULT_ACCESSIBLE_PRESET = 'accessible';
/**
 * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).
 * Designed to replace the `<input type="color">` HTML5 tag which is not widely supported in browsers.
 */
var ColorPickerComponent = /** @class */ (function () {
    function ColorPickerComponent(popupService, localizationService) {
        var _this = this;
        this.popupService = popupService;
        /**
         * @hidden
         */
        this.hostClasses = true;
        /**
         * Sets what view the ColorPicker will render in the popup.
         */
        this.view = 'gradient';
        /**
         * Sets the read-only state of the ColorPicker.
         */
        this.readonly = false;
        /**
         * Sets the disabled state of the ColorPicker.
         */
        this.disabled = false;
        /**
         * Specifies the output format of the ColorPicker.
         * The input value may be in a different format. However, it will be parsed into the output `format`
         * after the component processes it.
         *
         * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.
         *
         * The supported values are:
         * * `rgba` (default)
         * * `hex`
         * * [`name`](https://www.w3.org/wiki/CSS/Properties/color/keywords)
         */
        this.format = 'rgba';
        /**
         * Fires each time the value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time ColorPicker is focused.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the ColorPicker is blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the left side of the ColorPicker wrapper is clicked.
         * The event is triggered regardless of whether a ColorPicker icon is set or not.
         *
         * The [`ActiveColorClickEvent`]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.
         */
        this.activeColorClick = new EventEmitter();
        this._tabindex = 0;
        this._popupSettings = { animate: true };
        this._paletteSettings = {};
        this._gradientSettings = { opacity: true };
        this.notifyNgTouched = function () { };
        this.notifyNgChanged = function () { };
        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    Object.defineProperty(ColorPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the ColorPicker.
         */
        set: function (value) {
            this._popupSettings = Object.assign(this._popupSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "paletteSettings", {
        get: function () {
            return this._paletteSettings;
        },
        /**
         * Configures the palette that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._paletteSettings = Object.assign(this._paletteSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "gradientSettings", {
        get: function () {
            return this._gradientSettings;
        },
        /**
         * Configures the gradient that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._gradientSettings = Object.assign(this._gradientSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "isOpen", {
        /**
         * Indicates whether the ColorPicker popup is open.
         */
        get: function () {
            return isPresent(this.popupRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "iconStyles", {
        /**
         * @hidden
         */
        get: function () {
            if (isPresent(this.iconClass)) {
                return this.iconClass;
            }
            if (isPresent(this.icon)) {
                return "k-icon k-i-" + this.icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    ColorPickerComponent.prototype.ngOnInit = function () {
        var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;
        var settingsPalette = this._paletteSettings.palette;
        var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?
            PALETTEPRESETS[settingsPalette].columns :
            undefined;
        this._paletteSettings = {
            palette: settingsPalette || defaultPreset,
            tileSize: this._paletteSettings.tileSize || 24,
            columns: this._paletteSettings.columns || presetColumns || 10
        };
    };
    ColorPickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.format && changes.format.currentValue === 'name') {
            this.view = 'palette';
        }
        if (this.view === 'gradient' && this.gradientSettings.opacity) {
            this.format = 'rgba';
            this.value = parseColor$1(this.value, this.format);
        }
    };
    ColorPickerComponent.prototype.ngOnDestroy = function () {
        this.closePopup();
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperClick = function () {
        this.toggleWithEvents(!this.isOpen);
        this.focus();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleActiveColorClick = function () {
        this.focus();
        var event = new ActiveColorClickEvent(this.value);
        this.activeColorClick.emit(event);
        if (!event.isOpenPrevented() || this.isOpen) {
            this.handleWrapperClick();
        }
    };
    /**
     * Focuses the wrapper of the ColorPicker.
     */
    ColorPickerComponent.prototype.focus = function () {
        if (this.disabled) {
            return;
        }
        this.wrapper.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperFocus = function () {
        if (isPresent(this.palette)) {
            this.palette.nativeElement.focus();
        }
        if (this.isFocused) {
            return;
        }
        this.isFocused = true;
        this.onFocus.emit();
    };
    /**
     * Blurs the ColorPicker.
     */
    ColorPickerComponent.prototype.blur = function () {
        this.wrapper.nativeElement.blur();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperBlur = function () {
        if (this.isOpen) {
            return;
        }
        this.isFocused = false;
        this.onBlur.emit();
        this.notifyNgTouched();
    };
    /**
     * Clears the color value of the ColorPicker.
     */
    ColorPickerComponent.prototype.reset = function () {
        if (!isPresent(this.value)) {
            return;
        }
        this._value = undefined;
        this.notifyNgChanged(undefined);
    };
    /**
     * Toggles the popup of the ColorPicker.
     * Does not trigger the `open` and `close` events of the component.
     *
     * @param open An optional parameter. Specifies whether the popup will be opened or closed.
     */
    ColorPickerComponent.prototype.toggle = function (open) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.closePopup();
        open = isPresent(open) ? open : !this.isOpen;
        if (open) {
            this.openPopup();
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleValueChange = function (color, closePopup) {
        var parsedColor = parseColor$1(color, this.format);
        var valueChange = parsedColor !== this.value;
        if (closePopup) {
            this.toggleWithEvents(false);
            this.focus();
        }
        if (valueChange) {
            this.value = parsedColor;
            this.valueChange.emit(parsedColor);
            this.notifyNgChanged(parsedColor);
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupBlur = function (event) {
        var focusInPopupElement = this.popupRef.popupElement.contains(event.relatedTarget);
        var wrapperClicked = event.relatedTarget === this.wrapper.nativeElement;
        if (!this.isFocused || wrapperClicked || focusInPopupElement) {
            return;
        }
        this.isFocused = false;
        this.onBlur.emit();
        this.notifyNgTouched();
        this.toggleWithEvents(false);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperKeyDown = function (event) {
        if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {
            event.preventDefault();
            this.toggleWithEvents(true);
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupKeyDown = function (keyCode) {
        if (keyCode === Keys.Tab || keyCode === Keys.Escape) {
            this.toggleWithEvents(false);
            this.wrapper.nativeElement.focus();
        }
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    ColorPickerComponent.prototype.isEmpty = function () {
        return false;
    };
    ColorPickerComponent.prototype.toggleWithEvents = function (open) {
        var sameState = this.isOpen === open;
        if (this.disabled || this.readonly || sameState) {
            return;
        }
        var eventArgs = new PreventableEvent();
        open ? this.open.emit(eventArgs) : this.close.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.toggle(open);
        }
    };
    ColorPickerComponent.prototype.openPopup = function () {
        var _this = this;
        var horizontalAlign = this.direction === "rtl" ? "right" : "left";
        var anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        var popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            animate: this.popupSettings.animate,
            appendTo: this.popupSettings.appendTo,
            popupAlign: popupPosition,
            anchorAlign: anchorPosition,
            popupClass: 'k-colorpicker-popup',
            content: this.popupTemplate,
            positionMode: 'absolute'
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(function () {
            _this.toggleWithEvents(false);
            if (!_this.isOpen) {
                _this.wrapper.nativeElement.focus({
                    preventScroll: true
                });
            }
        });
    };
    ColorPickerComponent.prototype.closePopup = function () {
        if (!this.isOpen) {
            return;
        }
        this.popupRef.close();
        this.popupRef = null;
        this.palette = null;
    };
    /** @nocollapse */
    ColorPickerComponent.ctorParameters = function () { return [
        { type: PopupService },
        { type: LocalizationService }
    ]; };
    ColorPickerComponent.propDecorators = {
        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-colorpicker',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        view: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        format: [{ type: Input }],
        value: [{ type: Input }],
        popupSettings: [{ type: Input }],
        paletteSettings: [{ type: Input }],
        gradientSettings: [{ type: Input }],
        icon: [{ type: Input }],
        iconClass: [{ type: Input }],
        tabindex: [{ type: Input }],
        valueChange: [{ type: Output }],
        open: [{ type: Output }],
        close: [{ type: Output }],
        onFocus: [{ type: Output, args: ['focus',] }],
        onBlur: [{ type: Output, args: ['blur',] }],
        activeColorClick: [{ type: Output }],
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        wrapper: [{ type: ViewChild, args: ['wrapper',] }],
        popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
        palette: [{ type: ViewChild, args: ['palette', { read: ElementRef },] }]
    };
ColorPickerComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorPickerComponent, selectors: [["kendo-colorpicker"]], factory: function ColorPickerComponent_Factory(t) { return new (t || ColorPickerComponent)(ɵngcc0.ɵɵdirectiveInject(PopupService), ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, viewQuery: function ColorPickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c88, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c89, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c35, true);
        ɵngcc0.ɵɵviewQuery(_c90, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.palette = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.wrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.popupTemplate = _t.first);
    } }, hostBindings: function ColorPickerComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(3);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-colorpicker", ctx.hostClasses);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { view: "view", readonly: "readonly", disabled: "disabled", format: "format", value: "value", popupSettings: "popupSettings", paletteSettings: "paletteSettings", gradientSettings: "gradientSettings", tabindex: "tabindex", icon: "icon", iconClass: "iconClass" }, outputs: { valueChange: "valueChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur", activeColorClick: "activeColorClick" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ColorPickerComponent; }) // tslint:disable-line:no-forward-ref
            }, {
                provide: KendoInput,
                useExisting: forwardRef(function () { return ColorPickerComponent; })
            },
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.colorpicker'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 10, vars: 8, template: function ColorPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", _c91, _c43);
        ɵngcc0.ɵɵlistener("focus", function ColorPickerComponent_Template_span_focus_0_listener($event) { return ctx.handleWrapperFocus(); });
        ɵngcc0.ɵɵlistener("blur", function ColorPickerComponent_Template_span_blur_0_listener($event) { return ctx.handleWrapperBlur(); });
        ɵngcc0.ɵɵlistener("mousedown", function ColorPickerComponent_Template_span_mousedown_0_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_Template_span_keydown_0_listener($event) { return ctx.handleWrapperKeyDown($event); });
        ɵngcc0.ɵɵtemplate(2, ColorPickerComponent_span_2_Template, 2, 2, "span", _c92);
        ɵngcc0.ɵɵtemplate(3, ColorPickerComponent_span_3_Template, 2, 2, "span", _c93);
        ɵngcc0.ɵɵelementStart(4, "span", _c94);
        ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_Template_span_click_4_listener($event) { return ctx.handleWrapperClick(); });
        ɵngcc0.ɵɵelement(5, "span", _c68);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ColorPickerComponent_ng_template_6_Template, 2, 2, "ng-template", null, _c95, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(8, null, _c96);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction3(4, _c107, !ctx.disabled, ctx.disabled, ctx.isFocused));
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.iconStyles);
        ɵngcc0.ɵɵselect(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.iconStyles);
    } }, directives: function () { return [ɵngcc2.NgClass, ɵngcc2.NgIf, ColorGradientComponent,
        FocusOnDomReadyDirective,
        ColorPaletteComponent]; }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorPickerComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorpicker',
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ColorPickerComponent; }) // tslint:disable-line:no-forward-ref
                    }, {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return ColorPickerComponent; })
                    },
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.colorpicker'
                    }
                ],
                template: "\n        <span\n            #wrapper\n            [ngClass]=\"{\n                'k-picker-wrap': true,\n                'k-state-default': !this.disabled,\n                'k-state-disabled': this.disabled,\n                'k-state-focused': this.isFocused\n            }\"\n            [attr.tabindex]=\"tabindex\"\n            (focus)=\"handleWrapperFocus()\"\n            (blur)=\"handleWrapperBlur()\"\n            (mousedown)=\"$event.preventDefault()\"\n            (keydown)=\"handleWrapperKeyDown($event)\"\n        >\n            <span *ngIf=\"!iconStyles\" class=\"k-selected-color\" [style.background-color]=\"value\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-icon k-i-line\" *ngIf=\"!value\"></span>\n            </span>\n            <span *ngIf=\"iconStyles\" class=\"k-tool-icon\" [ngClass]=\"iconStyles\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-selected-color\" [style.background-color]=\"value\"></span>\n            </span>\n            <span class=\"k-select\" (click)=\"handleWrapperClick()\">\n                <span class=\"k-icon k-i-arrow-s\"></span>\n            </span>\n        </span>\n        <ng-template #popupTemplate>\n            <kendo-colorgradient\n                *ngIf=\"view === 'gradient' || view === 'combo'\"\n                kendoFocusOnDomReady\n                [value]=\"value\"\n                [format]=\"format\"\n                [opacity]=\"gradientSettings.opacity\"\n                (focusout)=\"handlePopupBlur($event)\"\n                (valueChange)=\"handleValueChange($event, false)\"\n                (keydown)=\"handlePopupKeyDown($event.keyCode)\"\n            >\n            </kendo-colorgradient>\n            <kendo-colorpalette\n                #palette\n                *ngIf=\"view === 'palette' || view === 'combo'\"\n                kendoFocusOnDomReady\n                [palette]=\"paletteSettings.palette\"\n                [columns]=\"paletteSettings.columns\"\n                [tileSize]=\"paletteSettings.tileSize\"\n                [format]=\"format\"\n                [value]=\"value\"\n                (blur)=\"handlePopupBlur($event)\"\n                (cellSelection)=\"handleValueChange($event, true)\"\n                (mousedown)=\"$event.preventDefault()\"\n                (keydown)=\"handlePopupKeyDown($event.keyCode)\"\n            >\n            </kendo-colorpalette>\n        </ng-template>\n        <ng-container #container></ng-container>\n    "
            }]
    }], function () { return [{ type: PopupService }, { type: LocalizationService }]; }, { popupService: [], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-colorpicker']
        }], view: [{
            type: Input
        }], readonly: [{
            type: Input
        }], disabled: [{
            type: Input
        }], format: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], activeColorClick: [{
            type: Output
        }], _tabindex: [], _popupSettings: [], _paletteSettings: [], _gradientSettings: [], notifyNgTouched: [], notifyNgChanged: [], dynamicRTLSubscription: [], value: [{
            type: Input
        }], value: [], popupSettings: [{
            type: Input
        }], popupSettings: [], paletteSettings: [{
            type: Input
        }], paletteSettings: [], gradientSettings: [{
            type: Input
        }], gradientSettings: [], tabindex: [{
            type: Input
        }], tabindex: [], isOpen: [], iconStyles: [], ngOnInit: [], ngOnChanges: [], ngOnDestroy: [], handleWrapperClick: [], handleActiveColorClick: [], focus: [], handleWrapperFocus: [], isFocused: [], blur: [], handleWrapperBlur: [], reset: [], _value: [], toggle: [], handleValueChange: [], handlePopupBlur: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], handleWrapperKeyDown: [], handlePopupKeyDown: [], isEmpty: [], toggleWithEvents: [], openPopup: [], popupRef: [], closePopup: [], palette: [{
            type: ViewChild,
            args: ['palette', { read: ElementRef }]
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper']
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate']
        }] });
    return ColorPickerComponent;
}());

/**
 * @hidden
 */
var ColorPaletteService = /** @class */ (function () {
    function ColorPaletteService() {
        this.colorRows = [];
    }
    ColorPaletteService.prototype.setColorMatrix = function (palette, columns) {
        this.colorRows = [];
        if (!(isPresent(palette) && palette.length)) {
            return;
        }
        columns = columns || palette.length;
        for (var start = 0; start < palette.length; start += columns) {
            var row = palette.slice(start, columns + start);
            this.colorRows.push(row);
        }
    };
    ColorPaletteService.prototype.getCellCoordsFor = function (color) {
        if (!isPresent(color)) {
            return;
        }
        for (var row = 0; row < this.colorRows.length; row++) {
            for (var col = 0; col < this.colorRows[row].length; col++) {
                if (this.colorRows[row][col] === color) {
                    return { row: row, col: col };
                }
            }
        }
    };
    ColorPaletteService.prototype.getColorAt = function (cellCoords) {
        if (!(isPresent(cellCoords) && isPresent(this.colorRows[cellCoords.row]))) {
            return;
        }
        return this.colorRows[cellCoords.row][cellCoords.col];
    };
    ColorPaletteService.prototype.getNextCell = function (current, horizontalStep, verticalStep) {
        if (!(isPresent(current) && isPresent(current.row) && isPresent(current.col))) {
            return { row: 0, col: 0 };
        }
        var row = this.clampIndex(current.row + verticalStep, this.colorRows.length - 1);
        var col = this.clampIndex(current.col + horizontalStep, this.colorRows[row].length - 1);
        return { row: row, col: col };
    };
    ColorPaletteService.prototype.clampIndex = function (index, max) {
        var minArrayIndex = 0;
        if (index < minArrayIndex) {
            return minArrayIndex;
        }
        if (index > max) {
            return max;
        }
        return index;
    };
ColorPaletteService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ColorPaletteService, factory: function ColorPaletteService_Factory(t) { return new (t || ColorPaletteService)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorPaletteService, [{
        type: Injectable
    }], function () { return []; }, { colorRows: [], setColorMatrix: [], getCellCoordsFor: [], getColorAt: [], getNextCell: [], clampIndex: [] });
    return ColorPaletteService;
}());

var DEFAULT_TILE_SIZE = 24;
var DEFAULT_COLUMNS_COUNT = 10;
var DEFAULT_PRESET$1 = 'office';
var DEFAULT_ACCESSIBLE_PRESET$1 = 'accessible';
/**
 * The ColorPalette component provides a set of predefined palette presets and enables you to implement a custom color palette.
 * The ColorPalette is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
var ColorPaletteComponent = /** @class */ (function () {
    function ColorPaletteComponent(service, localizationService) {
        var _this = this;
        this.service = service;
        /**
         * Specifies the output format of the ColorPaletteComponent.
         * The input value may be in a different format. However, it will be parsed into the output `format`
         * after the component processes it.
         *
         * The supported values are:
         * * (Default) `hex`
         * * `rgba`
         * * `name`
         */
        this.format = 'hex';
        /**
         * Specifies the size of a color cell.
         *
         * The possible values are:
         * * (Default) `tileSize = 24`
         * * `{ width: number, height: number }`
         */
        this.tileSize = { width: DEFAULT_TILE_SIZE, height: DEFAULT_TILE_SIZE };
        /**
         * Fires each time the color selection is changed.
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires each time the value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user selects a cell with the mouse or presses `Enter`.
         *
         * @hidden
         */
        this.cellSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.hostClasses = true;
        this._tabindex = 0;
        this.notifyNgTouched = function () { };
        this.notifyNgChanged = function () { };
        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    Object.defineProperty(ColorPaletteComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        /**
         * Specifies the number of columns that will be displayed.
         * Defaults to `10`.
         */
        set: function (value) {
            var minColumnsCount = 1;
            this._columns = value > minColumnsCount ? value : minColumnsCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "palette", {
        get: function () {
            return this._palette;
        },
        /**
         * The color palette that will be displayed.
         *
         * The supported values are:
         * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).
         * * A string with comma-separated colors.
         * * A string array.
         */
        set: function (value) {
            var _this = this;
            if (!isPresent(value)) {
                value = DEFAULT_PRESET$1;
            }
            if (typeof value === 'string' && isPresent(PALETTEPRESETS[value])) {
                this.columns = this.columns || PALETTEPRESETS[value].columns;
                value = PALETTEPRESETS[value].colors;
            }
            var colors = (typeof value === 'string') ? value.split(',') : value;
            this._palette = colors.map(function (color) { return parseColor$1(color, _this.format, false); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "tileLayout", {
        /**
         * @hidden
         */
        get: function () {
            if (typeof this.tileSize !== 'number') {
                return this.tileSize;
            }
            return { width: this.tileSize, height: this.tileSize };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "colorRows", {
        /**
         * @hidden
         */
        get: function () {
            return this.service.colorRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "hostTabindex", {
        /**
         * @hidden
         */
        get: function () { return this.tabindex; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPaletteComponent.prototype, "disabledClass", {
        /**
         * @hidden
         */
        get: function () { return this.disabled; },
        enumerable: true,
        configurable: true
    });
    ColorPaletteComponent.prototype.ngOnInit = function () {
        if (this.colorRows.length === 0) {
            var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET$1 : DEFAULT_ACCESSIBLE_PRESET$1;
            this.palette = this.palette || defaultPreset;
            this.setRows();
            this.focusedCell = this.service.getCellCoordsFor(this.value);
        }
    };
    ColorPaletteComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    ColorPaletteComponent.prototype.ngOnChanges = function (changes) {
        if (changes.palette || changes.columns) {
            this.setRows();
        }
        if (changes.palette || changes.value || changes.columns) {
            this.focusedCell = this.service.getCellCoordsFor(this.value);
        }
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleKeydown = function (event) {
        var isRTL = this.direction === 'rtl';
        switch (event.keyCode) {
            case Keys.ArrowDown:
                this.handleCellNavigation(0, 1);
                break;
            case Keys.ArrowUp:
                this.handleCellNavigation(0, -1);
                break;
            case Keys.ArrowRight:
                this.handleCellNavigation(isRTL ? -1 : 1, 0);
                break;
            case Keys.ArrowLeft:
                this.handleCellNavigation(isRTL ? 1 : -1, 0);
                break;
            case Keys.Enter:
                this.handleEnter();
                break;
            default: return;
        }
        event.preventDefault();
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleHostBlur = function () {
        this.notifyNgTouched();
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.handleCellSelection = function (value, focusedCell) {
        if (this.readonly) {
            return;
        }
        this.focusedCell = focusedCell;
        var parsedColor = parseColor$1(value, this.format, false);
        this.cellSelection.emit(parsedColor);
        if (this.value !== parsedColor) {
            this.value = parsedColor;
            this.valueChange.emit(parsedColor);
            this.notifyNgChanged(parsedColor);
        }
        if (this.selection !== parsedColor) {
            this.selection = parsedColor;
            this.selectionChange.emit(parsedColor);
        }
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.writeValue = function (value) {
        this.value = value;
        this.focusedCell = this.service.getCellCoordsFor(this.value);
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorPaletteComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    ColorPaletteComponent.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Clears the color value of the ColorPalette.
     */
    ColorPaletteComponent.prototype.reset = function () {
        this.focusedCell = null;
        if (isPresent(this.value)) {
            this._value = undefined;
            this.notifyNgChanged(undefined);
        }
    };
    ColorPaletteComponent.prototype.setRows = function () {
        if (!isPresent(this.palette)) {
            return;
        }
        this.columns = this.columns || DEFAULT_COLUMNS_COUNT;
        this.service.setColorMatrix(this.palette, this.columns);
    };
    ColorPaletteComponent.prototype.handleCellNavigation = function (horizontalStep, verticalStep) {
        if (this.readonly) {
            return;
        }
        this.focusedCell = this.service.getNextCell(this.focusedCell, horizontalStep, verticalStep);
        var selection = this.service.getColorAt(this.focusedCell);
        if (this.selection !== selection) {
            this.selection = selection;
            this.selectionChange.emit(selection);
        }
    };
    ColorPaletteComponent.prototype.handleEnter = function () {
        if (!isPresent(this.focusedCell)) {
            return;
        }
        var selectedColor = this.service.getColorAt(this.focusedCell);
        this.handleCellSelection(selectedColor, this.focusedCell);
    };
    /** @nocollapse */
    ColorPaletteComponent.ctorParameters = function () { return [
        { type: ColorPaletteService },
        { type: LocalizationService }
    ]; };
    ColorPaletteComponent.propDecorators = {
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        format: [{ type: Input }],
        value: [{ type: Input }],
        columns: [{ type: Input }],
        palette: [{ type: Input }],
        tabindex: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        tileSize: [{ type: Input }],
        selectionChange: [{ type: Output }],
        valueChange: [{ type: Output }],
        cellSelection: [{ type: Output }],
        hostTabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-colorpalette',] }],
        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],
        handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        handleHostBlur: [{ type: HostListener, args: ['blur',] }]
    };
ColorPaletteComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorPaletteComponent, selectors: [["kendo-colorpalette"]], factory: function ColorPaletteComponent_Factory(t) { return new (t || ColorPaletteComponent)(ɵngcc0.ɵɵdirectiveInject(ColorPaletteService), ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, hostBindings: function ColorPaletteComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(5);
        ɵngcc0.ɵɵlistener("keydown", function ColorPaletteComponent_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); });
        ɵngcc0.ɵɵlistener("blur", function ColorPaletteComponent_blur_HostBindingHandler($event) { return ctx.handleHostBlur(); });
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.hostTabindex)("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-colorpalette", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.disabledClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { format: "format", tileSize: "tileSize", value: "value", columns: "columns", palette: "palette", tabindex: "tabindex", disabled: "disabled", readonly: "readonly" }, outputs: { selectionChange: "selectionChange", valueChange: "valueChange", cellSelection: "cellSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ColorPaletteComponent; }) // tslint:disable-line:no-forward-ref
            }, {
                provide: KendoInput,
                useExisting: forwardRef(function () { return ColorPaletteComponent; })
            },
            ColorPaletteService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.colorpalette'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 4, vars: 1, template: function ColorPaletteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", _c108);
        ɵngcc0.ɵɵelementStart(1, "table", _c109);
        ɵngcc0.ɵɵelementStart(2, "tbody");
        ɵngcc0.ɵɵtemplate(3, ColorPaletteComponent_tr_3_Template, 2, 1, "tr", _c110);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.colorRows);
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgStyle], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorPaletteComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorpalette',
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ColorPaletteComponent; }) // tslint:disable-line:no-forward-ref
                    }, {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return ColorPaletteComponent; })
                    },
                    ColorPaletteService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.colorpalette'
                    }
                ],
                template: "\n        <div role=\"grid\">\n            <table class=\"k-palette k-reset\" role=\"presentation\">\n                <tbody>\n                    <tr role=\"row\" *ngFor=\"let row of colorRows; let rowIndex = index\">\n                        <td *ngFor=\"let color of row; let colIndex = index\"\n                            [class.k-state-selected]=\"focusedCell?.row === rowIndex && focusedCell?.col === colIndex\"\n                            class=\"k-item\"\n                            [attr.value]=\"color\"\n                            (click)=\"handleCellSelection(color, { row: rowIndex, col: colIndex })\"\n                            [ngStyle]=\"{\n                                backgroundColor: color,\n                                width: tileLayout.width + 'px',\n                                height: tileLayout.height + 'px',\n                                minWidth: tileLayout.width + 'px'\n                            }\">\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    "
            }]
    }], function () { return [{ type: ColorPaletteService }, { type: LocalizationService }]; }, { service: [], format: [{
            type: Input
        }], tileSize: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], cellSelection: [{
            type: Output
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-colorpalette']
        }], _tabindex: [], notifyNgTouched: [], notifyNgChanged: [], dynamicRTLSubscription: [], value: [{
            type: Input
        }], value: [], columns: [{
            type: Input
        }], columns: [], palette: [{
            type: Input
        }], palette: [], tabindex: [{
            type: Input
        }], tabindex: [], tileLayout: [], colorRows: [], hostTabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], ngOnInit: [], focusedCell: [], ngOnDestroy: [], ngOnChanges: [], handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], handleHostBlur: [{
            type: HostListener,
            args: ['blur']
        }], handleCellSelection: [], selection: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], disabled: [{
            type: Input
        }], isEmpty: [], reset: [], _value: [], setRows: [], handleCellNavigation: [], handleEnter: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], readonly: [{
            type: Input
        }] });
    return ColorPaletteComponent;
}());

var DEFAULT_OUTPUT_FORMAT = 'rgba';
var DEFAULT_BACKGROUND_COLOR = 'rgba(255, 0, 0, 1)';
var DEFAULT_SELECTED_COLOR = 'rgba(255, 255, 255, 1)';
/**
 * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.
 * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
var ColorGradientComponent = /** @class */ (function () {
    function ColorGradientComponent(host, ngZone, renderer, cdr, localizationService) {
        var _this = this;
        this.host = host;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.cdr = cdr;
        this.hostClasses = true;
        /**
         * Defines whether the alpha slider will be displayed.
         */
        this.opacity = true;
        /**
         * Sets the disabled state of the ColorGradient.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorGradient.
         */
        this.readonly = false;
        /**
         * Fires each time the user selects a new color.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.backgroundColor = DEFAULT_BACKGROUND_COLOR;
        /**
         * @hidden
         *
         * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.
         * The values are initially set in `ngOnInit` or in `ngOnChanges` and are
         * updated on moving the drag handle or the sliders.
         */
        this.hsva = {};
        /**
         * Specifies the output format of the ColorGradientComponent.
         * The input value may be in a different format. However, it will be parsed into the output `format`
         * after the component processes it.
         *
         * The supported values are:
         * * (Default) `rgba`
         * * `hex`
         */
        this.format = DEFAULT_OUTPUT_FORMAT;
        this._tabindex = 0;
        this.listeners = [];
        this.notifyNgChanged = function () { };
        this.notifyNgTouched = function () { };
        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    Object.defineProperty(ColorGradientComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "hostTabindex", {
        get: function () {
            return this.tabindex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "value", {
        get: function () {
            return this._value || parseColor$1(DEFAULT_SELECTED_COLOR, this.format);
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor$1(value, this.format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "isFocused", {
        /**
         * Indicates whether the ColorGradient or any of its content is focused.
         */
        get: function () {
            if (!(isDocumentAvailable() && isPresent(this.host))) {
                return false;
            }
            return this.host.nativeElement === document.activeElement || this.host.nativeElement.contains(document.activeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "alphaSliderValue", {
        /**
         * @hidden
         */
        get: function () {
            return isPresent(this.hsva.a) ? this.hsva.a * 100 : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGradientComponent.prototype, "gradientRect", {
        get: function () {
            return this.gradientWrapper.nativeElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    ColorGradientComponent.prototype.ngAfterViewInit = function () {
        this.updateUI();
        this.cdr.detectChanges();
        this.addEventListeners();
    };
    ColorGradientComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged('value', changes) && !this.isFocused) {
            this.updateUI();
        }
    };
    ColorGradientComponent.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (removeListener) { return removeListener(); });
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    /**
     * Focuses the component.
     */
    ColorGradientComponent.prototype.focus = function () {
        if (this.disabled) {
            return;
        }
        this.host.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleDragPress = function (args) {
        if (this.disabled || this.readonly || !isPresent(args.originalEvent)) {
            return;
        }
        this.focus();
        args.originalEvent.preventDefault();
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.onHandleDrag = function (args) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');
        this.changePosition(args);
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.onHandleRelease = function () {
        if (this.disabled || this.readonly) {
            return;
        }
        this.renderer.removeClass(this.gradientWrapper.nativeElement, 'k-dragging');
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.changePosition = function (position) {
        var _this = this;
        if (this.disabled || this.readonly) {
            return;
        }
        this.ngZone.run(function () { return _this.moveDragHandle(position); });
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleHueSliderChange = function (hue) {
        this.handleValueChange(getColorFromHSV(this.hsva));
        this.backgroundColor = getColorFromHue(hue);
        this.setAlphaSliderBackground(this.backgroundColor);
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleAlphaSliderChange = function (alpha) {
        this.hsva.a = alpha / 100;
        this.handleValueChange(getColorFromHSV(this.hsva));
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.handleInputsValueChange = function (color) {
        var parsed = parseColor$1(color, this.format);
        if (this.value !== parsed) {
            this.handleValueChange(parsed);
            this.updateUI();
        }
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (isPresent(this.gradientWrapper)) {
            this.updateUI();
        }
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorGradientComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    ColorGradientComponent.prototype.isEmpty = function () {
        return false;
    };
    ColorGradientComponent.prototype.moveDragHandle = function (position) {
        var deltaX = position.clientX - this.gradientRect.left;
        var deltaY = position.clientY - this.gradientRect.top;
        var top = fitIntoBounds(deltaY, 0, this.gradientRect.height);
        var left = fitIntoBounds(deltaX, 0, this.gradientRect.width);
        this.setDragHandleElementPosition(top, left);
        this.hsva.s = left / this.gradientRect.width;
        this.hsva.v = 1 - top / this.gradientRect.height;
        this.handleValueChange(getColorFromHSV(this.hsva));
    };
    ColorGradientComponent.prototype.updateUI = function () {
        if (!isDocumentAvailable()) {
            return;
        }
        this.hsva = getHSV(this.value);
        var top = (1 - this.hsva.v) * this.gradientRect.height;
        var left = this.hsva.s * this.gradientRect.width;
        this.setDragHandleElementPosition(top, left);
        this.backgroundColor = getColorFromHue(this.hsva.h);
        this.setAlphaSliderBackground(this.backgroundColor);
    };
    ColorGradientComponent.prototype.handleValueChange = function (color) {
        if (this.value === color) {
            return;
        }
        this.value = color;
        this.valueChange.emit(color);
        this.notifyNgChanged(color);
    };
    ColorGradientComponent.prototype.setDragHandleElementPosition = function (top, left) {
        var dragHandle = this.dragHandle.nativeElement;
        this.renderer.setStyle(dragHandle, 'top', top + "px");
        this.renderer.setStyle(dragHandle, 'left', left + "px");
    };
    ColorGradientComponent.prototype.setAlphaSliderBackground = function (backgroundColor) {
        if (!isPresent(this.alphaSlider)) {
            return;
        }
        var sliderTrack = this.alphaSlider.track.nativeElement;
        this.renderer.setStyle(sliderTrack, 'background', "linear-gradient(to top, transparent, " + backgroundColor + ")");
    };
    ColorGradientComponent.prototype.addEventListeners = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            var focusOutListener = _this.renderer.listen(_this.host.nativeElement, 'focusout', function (event) {
                if (!containsFocus(_this.host.nativeElement, event.relatedTarget) && isUntouched(_this.host)) {
                    _this.ngZone.run(function () { return _this.notifyNgTouched(); });
                }
            });
            _this.listeners.push(focusOutListener);
        });
    };
    /** @nocollapse */
    ColorGradientComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: LocalizationService }
    ]; };
    ColorGradientComponent.propDecorators = {
        hostClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-flatcolorpicker',] }],
        disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }],
        hostTabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        direction: [{ type: HostBinding, args: ['attr.dir',] }],
        opacity: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        value: [{ type: Input }],
        tabindex: [{ type: Input }],
        valueChange: [{ type: Output }],
        format: [{ type: Input }],
        alphaSlider: [{ type: ViewChild, args: ['alphaSlider',] }],
        gradientWrapper: [{ type: ViewChild, args: ['gradientWrapper',] }],
        dragHandle: [{ type: ViewChild, args: ['dragHandle',] }]
    };
ColorGradientComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorGradientComponent, selectors: [["kendo-colorgradient"]], factory: function ColorGradientComponent_Factory(t) { return new (t || ColorGradientComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(LocalizationService)); }, viewQuery: function ColorGradientComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c115, true);
        ɵngcc0.ɵɵviewQuery(_c116, true);
        ɵngcc0.ɵɵviewQuery(_c117, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.alphaSlider = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.gradientWrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.dragHandle = _t.first);
    } }, hostBindings: function ColorGradientComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(5);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("tabindex", ctx.hostTabindex)("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-flatcolorpicker", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-state-disabled", ctx.disabledClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { opacity: "opacity", disabled: "disabled", readonly: "readonly", format: "format", value: "value", tabindex: "tabindex" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ColorGradientComponent; })
            }, {
                provide: KendoInput,
                useExisting: forwardRef(function () { return ColorGradientComponent; })
            },
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.colorgradient'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 9, vars: 16, template: function ColorGradientComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", _c118);
        ɵngcc0.ɵɵelementStart(1, "div", _c119);
        ɵngcc0.ɵɵstyling();
        ɵngcc0.ɵɵelementStart(2, "div", _c120, _c121);
        ɵngcc0.ɵɵlistener("click", function ColorGradientComponent_Template_div_click_2_listener($event) { return ctx.changePosition($event); });
        ɵngcc0.ɵɵlistener("kendoPress", function ColorGradientComponent_Template_div_kendoPress_2_listener($event) { return ctx.handleDragPress($event); });
        ɵngcc0.ɵɵlistener("kendoDrag", function ColorGradientComponent_Template_div_kendoDrag_2_listener($event) { return ctx.onHandleDrag($event); });
        ɵngcc0.ɵɵlistener("kendoRelease", function ColorGradientComponent_Template_div_kendoRelease_2_listener($event) { return ctx.onHandleRelease(); });
        ɵngcc0.ɵɵelement(4, "div", _c122, _c123);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "kendo-slider", _c124);
        ɵngcc0.ɵɵlistener("valueChange", function ColorGradientComponent_Template_kendo_slider_valueChange_6_listener($event) { return ctx.hsva.h = $event; });
        ɵngcc0.ɵɵlistener("valueChange", function ColorGradientComponent_Template_kendo_slider_valueChange_6_listener($event) { return ctx.handleHueSliderChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ColorGradientComponent_kendo_slider_7_Template, 2, 10, "kendo-slider", _c125);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "kendo-colorinput", _c126);
        ɵngcc0.ɵɵlistener("valueChange", function ColorGradientComponent_Template_kendo_colorinput_valueChange_8_listener($event) { return ctx.handleInputsValueChange($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵstyleProp("background-color", ctx.backgroundColor);
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx.readonly)("showButtons", false)("tickPlacement", "none")("vertical", true)("min", 0)("max", 360)("smallStep", 5)("largeStep", 10)("value", ctx.hsva.h);
        ɵngcc0.ɵɵselect(7);
        ɵngcc0.ɵɵproperty("ngIf", ctx.opacity && ctx.format === "rgba");
        ɵngcc0.ɵɵselect(8);
        ɵngcc0.ɵɵproperty("opacity", ctx.opacity)("value", ctx.value)("disabled", ctx.disabled)("readonly", ctx.readonly);
    } }, directives: function () { return [ɵngcc1.DraggableDirective, SliderComponent, ɵngcc2.NgIf, ColorInputComponent]; }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorGradientComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorgradient',
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ColorGradientComponent; })
                    }, {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return ColorGradientComponent; })
                    },
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.colorgradient'
                    }
                ],
                template: "\n        <div class=\"k-hsv-wrap k-horizontal\">\n            <div class=\"k-hsv-rectangle\" [style.background-color]=\"backgroundColor\">\n                <div\n                    #gradientWrapper\n                    kendoDraggable\n                    class=\"k-hsv-gradient\"\n                    (click)=\"changePosition($event)\"\n                    (kendoPress)=\"handleDragPress($event)\"\n                    (kendoDrag)=\"onHandleDrag($event)\"\n                    (kendoRelease)=\"onHandleRelease()\">\n                    <div\n                        #dragHandle\n                        class=\"k-draghandle\"\n                    >\n                    </div>\n                </div>\n            </div>\n            <kendo-slider\n                class=\"k-hue-slider\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [showButtons]=\"false\"\n                [tickPlacement]=\"'none'\"\n                [vertical]=\"true\"\n                [min]=\"0\"\n                [max]=\"360\"\n                [smallStep]=\"5\"\n                [largeStep]=\"10\"\n                [(value)]=\"hsva.h\"\n                (valueChange)=\"handleHueSliderChange($event)\"\n            >\n            </kendo-slider>\n            <kendo-slider\n                *ngIf=\"opacity && format === 'rgba'\"\n                #alphaSlider\n                class=\"k-transparency-slider k-alpha-slider\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [showButtons]=\"false\"\n                [tickPlacement]=\"'none'\"\n                [vertical]=\"true\"\n                [min]=\"0\"\n                [max]=\"100\"\n                [smallStep]=\"1\"\n                [largeStep]=\"10\"\n                [value]=\"alphaSliderValue\"\n                (valueChange)=\"handleAlphaSliderChange($event)\"\n            >\n            </kendo-slider>\n        </div>\n        <kendo-colorinput\n            [opacity]=\"opacity\"\n            [value]=\"value\"\n            [disabled]=\"disabled\"\n            [readonly]=\"readonly\"\n            (valueChange)=\"handleInputsValueChange($event)\"\n        >\n        </kendo-colorinput>\n"
            }]
    }], function () { return [{ type: ElementRef }, { type: NgZone }, { type: Renderer2 }, { type: ChangeDetectorRef }, { type: LocalizationService }]; }, { host: [], ngZone: [], renderer: [], cdr: [], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-flatcolorpicker']
        }], opacity: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], backgroundColor: [], hsva: [], format: [{
            type: Input
        }], _tabindex: [], listeners: [], notifyNgChanged: [], notifyNgTouched: [], dynamicRTLSubscription: [], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], hostTabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], value: [{
            type: Input
        }], value: [], tabindex: [{
            type: Input
        }], tabindex: [], isFocused: [], alphaSliderValue: [], gradientRect: [], ngAfterViewInit: [], ngOnChanges: [], ngOnDestroy: [], focus: [], handleDragPress: [], onHandleDrag: [], onHandleRelease: [], changePosition: [], handleHueSliderChange: [], handleAlphaSliderChange: [], handleInputsValueChange: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], isEmpty: [], moveDragHandle: [], updateUI: [], handleValueChange: [], setDragHandleElementPosition: [], setAlphaSliderBackground: [], addEventListeners: [], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], alphaSlider: [{
            type: ViewChild,
            args: ['alphaSlider']
        }], gradientWrapper: [{
            type: ViewChild,
            args: ['gradientWrapper']
        }], dragHandle: [{
            type: ViewChild,
            args: ['dragHandle']
        }] });
    return ColorGradientComponent;
}());

/**
 * @hidden
 */
var ColorInputComponent = /** @class */ (function () {
    function ColorInputComponent(host) {
        this.host = host;
        /**
         * Sets whether the alpha slider will be shown.
         */
        this.opacity = true;
        /**
         * Sets the disabled state of the ColorInput.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorInput.
         */
        this.readonly = false;
        /**
         * Emits a parsed rgba string color.
         */
        this.valueChange = new EventEmitter();
        /**
         * The rgba inputs values.
         */
        this.rgba = {};
    }
    Object.defineProperty(ColorInputComponent.prototype, "isFocused", {
        /**
         * Indicates whether any of the inputs are focused.
         */
        get: function () {
            if (!(isDocumentAvailable() && isPresent(this.host))) {
                return false;
            }
            var activeElement = document.activeElement;
            return this.host.nativeElement.contains(activeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorInputComponent.prototype, "rgbaInputValid", {
        /**
         * Indicates whether any of the rgba inputs have value.
         */
        get: function () {
            var _this = this;
            return Object.keys(this.rgba).every(function (key) { return isPresent(_this.rgba[key]); });
        },
        enumerable: true,
        configurable: true
    });
    ColorInputComponent.prototype.ngOnChanges = function (changes) {
        if (isPresent(changes.value) && !this.isFocused) {
            this.hex = parseColor$1(this.value, 'hex');
            this.rgba = getRGBA(this.value);
        }
    };
    ColorInputComponent.prototype.handleRgbaValueChange = function () {
        var color = getColorFromRGBA(this.rgba);
        if (!this.rgbaInputValid || color === this.value) {
            return;
        }
        this.value = color;
        this.hex = parseColor$1(color, 'hex');
        this.valueChange.emit(color);
    };
    ColorInputComponent.prototype.handleHexValueChange = function (hex) {
        this.hex = hex;
        var color = parseColor$1(hex, 'rgba');
        if (!isPresent(color) || color === this.value) {
            return;
        }
        this.value = color;
        this.rgba = getRGBA(color);
        this.valueChange.emit(color);
    };
    ColorInputComponent.prototype.handleRgbaInputBlur = function () {
        if (!this.rgbaInputValid) {
            this.rgba = getRGBA(this.value);
        }
    };
    ColorInputComponent.prototype.handleHexInputBlur = function () {
        this.hex = parseColor$1(this.value, 'hex');
    };
    /** @nocollapse */
    ColorInputComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ColorInputComponent.propDecorators = {
        value: [{ type: Input }],
        opacity: [{ type: Input }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
ColorInputComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorInputComponent, selectors: [["kendo-colorinput"]], factory: function ColorInputComponent_Factory(t) { return new (t || ColorInputComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, inputs: { opacity: "opacity", disabled: "disabled", readonly: "readonly", value: "value" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], consts: 17, vars: 32, template: function ColorInputComponent_Template(rf, ctx) { if (rf & 1) {
        const _r223 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "div", _c129);
        ɵngcc0.ɵɵelementStart(1, "input", _c130, _c131);
        ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_Template_input_blur_1_listener($event) { return ctx.handleHexInputBlur(); });
        ɵngcc0.ɵɵlistener("input", function ColorInputComponent_Template_input_input_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r223); const _r216 = ɵngcc0.ɵɵreference(2); return ctx.handleHexValueChange(_r216.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "kendo-numerictextbox", _c132);
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_3_listener($event) { return ctx.rgba.r = $event; });
        ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_Template_kendo_numerictextbox_blur_3_listener($event) { return ctx.handleRgbaInputBlur(); });
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_3_listener($event) { return ctx.handleRgbaValueChange(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "kendo-numerictextbox", _c132);
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_4_listener($event) { return ctx.rgba.g = $event; });
        ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_Template_kendo_numerictextbox_blur_4_listener($event) { return ctx.handleRgbaInputBlur(); });
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_4_listener($event) { return ctx.handleRgbaValueChange(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "kendo-numerictextbox", _c132);
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_5_listener($event) { return ctx.rgba.b = $event; });
        ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_Template_kendo_numerictextbox_blur_5_listener($event) { return ctx.handleRgbaInputBlur(); });
        ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_Template_kendo_numerictextbox_valueChange_5_listener($event) { return ctx.handleRgbaValueChange(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ColorInputComponent_kendo_numerictextbox_6_Template, 1, 10, "kendo-numerictextbox", _c133);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", _c129);
        ɵngcc0.ɵɵelementStart(8, "div", _c134);
        ɵngcc0.ɵɵtext(9, "hex");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div");
        ɵngcc0.ɵɵtext(11, "r");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div");
        ɵngcc0.ɵɵtext(13, "g");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div");
        ɵngcc0.ɵɵtext(15, "b");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, ColorInputComponent_div_16_Template, 2, 0, "div", _c135);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx.readonly)("value", ctx.hex || "");
        ɵngcc0.ɵɵselect(3);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx.readonly)("min", 0)("max", 255)("value", ctx.rgba.r)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx.readonly)("min", 0)("max", 255)("value", ctx.rgba.g)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx.readonly)("min", 0)("max", 255)("value", ctx.rgba.b)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
        ɵngcc0.ɵɵselect(6);
        ɵngcc0.ɵɵproperty("ngIf", ctx.opacity);
        ɵngcc0.ɵɵselect(16);
        ɵngcc0.ɵɵproperty("ngIf", ctx.opacity);
    } }, directives: [NumericTextBoxComponent, ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorInputComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorinput',
                template: "\n        <div class=\"k-horizontal k-gradient-values\">\n            <input\n                #hexInput\n                class=\"k-textbox k-hex-value\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [value]=\"hex || ''\"\n                (blur)=\"handleHexInputBlur()\"\n                (input)=\"handleHexValueChange(hexInput.value)\"\n            />\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                [(value)]=\"rgba.r\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                [(value)]=\"rgba.g\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"255\"\n                [(value)]=\"rgba.b\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [format]=\"'n'\"\n                [decimals]=\"0\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n            <kendo-numerictextbox\n                *ngIf=\"opacity\"\n                [disabled]=\"disabled\"\n                [readonly]=\"readonly\"\n                [min]=\"0\"\n                [max]=\"1\"\n                [(value)]=\"rgba.a\"\n                [autoCorrect]=\"true\"\n                [spinners]=\"false\"\n                [step]=\"0.01\"\n                [format]=\"'n2'\"\n                [decimals]=\"2\"\n                (blur)=\"handleRgbaInputBlur()\"\n                (valueChange)=\"handleRgbaValueChange()\"\n            >\n            </kendo-numerictextbox>\n        </div>\n        <div class=\"k-horizontal k-gradient-values\">\n            <div class=\"k-hex-value\">hex</div>\n            <div>r</div>\n            <div>g</div>\n            <div>b</div>\n            <div *ngIf=\"opacity\">a</div>\n        </div>\n    "
            }]
    }], function () { return [{ type: ElementRef }]; }, { host: [], opacity: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], rgba: [], isFocused: [], rgbaInputValid: [], ngOnChanges: [], hex: [], handleRgbaValueChange: [], value: [{
            type: Input
        }], handleHexValueChange: [], handleRgbaInputBlur: [], handleHexInputBlur: [] });
    return ColorInputComponent;
}());

/**
 * @hidden
 */
var FocusOnDomReadyDirective = /** @class */ (function () {
    function FocusOnDomReadyDirective(host, ngZone) {
        this.host = host;
        this.ngZone = ngZone;
    }
    FocusOnDomReadyDirective.prototype.ngAfterContentInit = function () {
        this.focusOnNextTick();
    };
    FocusOnDomReadyDirective.prototype.focusOnNextTick = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () { return setTimeout(function () { return _this.host.nativeElement.focus(); }); });
    };
    /** @nocollapse */
    FocusOnDomReadyDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
FocusOnDomReadyDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: FocusOnDomReadyDirective, selectors: [["", "kendoFocusOnDomReady", ""]], factory: function FocusOnDomReadyDirective_Factory(t) { return new (t || FocusOnDomReadyDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(NgZone)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(FocusOnDomReadyDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoFocusOnDomReady]'
            }]
    }], function () { return [{ type: ElementRef }, { type: NgZone }]; }, { host: [], ngZone: [], ngAfterContentInit: [], focusOnNextTick: [] });
    return FocusOnDomReadyDirective;
}());

var PUBLIC_DIRECTIVES = [
    ColorPickerComponent,
    ColorPaletteComponent,
    ColorGradientComponent
];
var INTERNAL_DIRECTIVES = [
    ColorInputComponent,
    FocusOnDomReadyDirective
];
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the ColorPicker.
 */
var ColorPickerModule = /** @class */ (function () {
    function ColorPickerModule() {
    }
ColorPickerModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: ColorPickerModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(ColorPickerModule, { declarations: function () { return [ColorPickerComponent,
        ColorPaletteComponent,
        ColorGradientComponent,
        ColorInputComponent,
        FocusOnDomReadyDirective]; }, imports: function () { return [SliderModule,
        NumericTextBoxModule,
        CommonModule,
        PopupModule,
        DraggableModule]; }, exports: function () { return [ColorPickerComponent,
        ColorPaletteComponent,
        ColorGradientComponent]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorPickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    PUBLIC_DIRECTIVES,
                    INTERNAL_DIRECTIVES
                ],
                exports: [PUBLIC_DIRECTIVES],
                imports: [
                    SliderModule,
                    NumericTextBoxModule,
                    CommonModule,
                    PopupModule,
                    DraggableModule
                ]
            }]
    }], function () { return []; }, null);
ColorPickerModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function ColorPickerModule_Factory(t) { return new (t || ColorPickerModule)(); }, imports: [[
            SliderModule,
            NumericTextBoxModule,
            CommonModule,
            PopupModule,
            DraggableModule
        ]] });
    return ColorPickerModule;
}());

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Inputs components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Inputs module
 * import { InputsModule } from '@progress/kendo-angular-inputs';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BrowserAnimationsModule, InputsModule], // import Inputs module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var InputsModule = /** @class */ (function () {
    function InputsModule() {
    }
InputsModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: InputsModule });
/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(InputsModule, { imports: function () { return [CommonModule]; }, exports: function () { return [TextBoxModule,
        SliderModule,
        SwitchModule,
        NumericTextBoxModule,
        MaskedTextBoxModule,
        ColorPickerModule]; } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(InputsModule, [{
        type: NgModule,
        args: [{
                exports: [TextBoxModule, SliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, ColorPickerModule],
                imports: [CommonModule]
            }]
    }], function () { return []; }, null);
InputsModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function InputsModule_Factory(t) { return new (t || InputsModule)(); }, imports: [[CommonModule],
        TextBoxModule,
        SliderModule,
        SwitchModule,
        NumericTextBoxModule,
        MaskedTextBoxModule,
        ColorPickerModule] });
    return InputsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ColorInputComponent, FocusOnDomReadyDirective, ColorPaletteService, MaskingService, LocalizedMessagesDirective$2 as LocalizedMessagesDirective, Messages, SliderCustomMessagesComponent, LocalizedMessagesDirective as LocalizedMessagesDirective$1, Messages$1, SwitchCustomMessagesComponent, LocalizedMessagesDirective$1 as LocalizedMessagesDirective$2, Messages$2, SliderComponent, LabelTemplateDirective, SwitchComponent, TextBoxContainerComponent, TextBoxDirective, TextAreaDirective, NumericTextBoxComponent, NumericTextBoxCustomMessagesComponent, MaskedTextBoxComponent, InputsModule, SliderTicksComponent, SliderModule, SwitchModule, NumericTextBoxModule, MaskedTextBoxModule, TextBoxModule, ColorPickerComponent, ColorPaletteComponent, ColorGradientComponent, ColorPickerModule, ActiveColorClickEvent };

export {LocalizedMessagesDirective};
export {LocalizedMessagesDirective$1};
//# sourceMappingURL=index.js.map