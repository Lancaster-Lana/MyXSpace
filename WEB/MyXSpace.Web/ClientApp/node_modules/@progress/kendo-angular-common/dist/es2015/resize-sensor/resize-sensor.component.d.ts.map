{"version":3,"file":"resize-sensor.component.d.ts","sources":["F:/Projects/Adequat.MyX-MY/WEB/MyXSpace.Web/ClientApp/node_modules/@progress/kendo-angular-common/dist/es2015/resize-sensor/resize-sensor.component.d.ts"],"sourcesContent":["import { ElementRef, EventEmitter, NgZone, AfterViewChecked, AfterViewInit, OnDestroy, Renderer2 } from '@angular/core';\nimport { ResizeBatchService } from './resize-batch.service';\n/**\n * Resize Sensor Component\n *\n * Triggers a \"resize\" event whenever the parent DOM element size changes.\n */\nexport declare class ResizeSensorComponent implements AfterViewChecked, AfterViewInit, OnDestroy {\n    private resizeBatchService;\n    private element;\n    private zone;\n    private renderer;\n    /**\n     * The maximum number of resize events to emit per second.\n     *\n     * Defaults to 10.\n     */\n    rateLimit: number;\n    /**\n     * Fires when the parent DOM element has been resized.\n     */\n    resize: EventEmitter<any>;\n    /**\n     * @hidden\n     */\n    expand: ElementRef;\n    /**\n     * @hidden\n     */\n    expandChild: ElementRef;\n    /**\n     * @hidden\n     */\n    shrink: ElementRef;\n    private subscription;\n    private source;\n    private parentElement;\n    private lastWidth;\n    private lastHeight;\n    private state;\n    private detachScrollHandlers;\n    private acceptedSize;\n    constructor(resizeBatchService: ResizeBatchService, element: ElementRef, zone: NgZone, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sets the passed size or the element size as current.\n     */\n    acceptSize(size?: any): void;\n    /**\n     * @hidden\n     */\n    scroll(_event?: any): void;\n    private init;\n    private reset;\n    private measure;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;"}