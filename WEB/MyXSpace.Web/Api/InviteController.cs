using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Security.Claims;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using MyXSpace.AppServices.Sessions;
using MyXSpace.Core.Entities;
using MyXSpace.Web.ViewModels;

namespace MyXSpace.WebSPA.Api
{
    #region Helper classes - Invite result
    public enum UserAIPStatus
    {
        UserNotRegisteredOnAIP = 0,
        UserRegisteredInOtherTenant = 1,
        UserRegisteredInTenant = 2
    }

    /// <summary>
    /// Result that came from AIP about user auth
    /// </summary>
    public class AIPUserResult
    {
        public string TenantId { get; set; }
        public UserAIPStatus UserStatus { get; set; }

        /// <summary>
        /// Link that will be return by AIP to MyX 
        /// on request check 'if user exists in AIP' (try invite to join)
        /// </summary>
        public string ActivateAccountURL { get; set; }

        /// <summary>
        /// Activation token for AIP user, generated by AIP to join new user to tenant 
        /// </summary>
        public string InvitationToken { get; set; }
    }

    #endregion 

    // [Authorize("Consultant, TenantAdmin")]
    [Route("api/[controller]")]
    [ApiController]
    //[AutoValidateAntiforgeryToken]
    public class InviteController : Controller
    {
        const string AIPHostUrl = "http://localhost:5000/"; //"TODO:" from application.config;

        private readonly Tenant _currentTenant;

        private readonly string _currentUserName;
        //private readonly IUser _currentUser;
        //private readonly AppUser _currentUser;
        private readonly ClaimsPrincipal _currentUserPrincipal;

        private readonly ISessionAppService _sessionAppService;
        //private readonly IUserActivityLogAppService _userActivityService;
        //private readonly ILogger _logger;

        public InviteController(
            ISessionAppService sessionAppService
            //,ICandidateAppService candidateAppService,
            //IUserActivityLogAppService userActivityService,ILogger<InviteController> logger
            )
        {
            _sessionAppService = sessionAppService; //base.SessionAppService; 

            _currentTenant = _sessionAppService.GetCurrentTenant();  //NOTE: invitation must be from specific tenant
            _currentUserName = _sessionAppService.GetUserName();

            //_candidateAppService = candidateAppService; //To manage candidate activity: job offers, documents
            //_userActivityService = userActivityService; //to save user\cadidate activity : offer accepted\ rejected, etc

            //_logger = logger; - LogService from AbstractController
        }

        /// <summary>
        /// Invite candidate\client user to register to tenant\brand
        /// TODO: EmailService, WorkflowMessageManager, MessageTemplateManager
        /// </summary>
        /// <param name="candidateId"></param>
        /// <param name="internalUser">Consultant who invites the candidate(s) to</param>
        /// <param name="tenantName">Target Tenant where the candidate invited to be registered in</param>
        /// <param name="roleName">Role to be assigned to User in the Tenant</param>
        /// <returns></returns>
        [HttpPost]
        [Route("InviteCandidate")]
        [Route("InviteClient")]
        //public IActionResult InviteCandidate(Guid candidateId, Guid invitedBy, string toTenant)  
        public async Task<IActionResult> Invite([FromBody] InviteViewModel model) //InviteCandidate(CandidateDto model)
        {
            string roleName = model.Role;
            bool inviteEmailSent = false;

            //TODO: aipApiService.TryInviteToTenant(user, toTenant);           
            //AIP will return "invitation tocken" (aipInviteResult) with details : UserStatus (registered,not registered, registered in other tenant) 
            string AIPinviteUserToTenantUrl = string.Format(@"{0}/check_account?tenant={1}&user_email={2}&roleName={3}", AIPHostUrl, model.TenantName, model.ToEmail, model.Role);//AIPHostUrl + "/Account/InviteUser?user=";

            AIPUserResult aipInviteResult = null;
            try
            {
                aipInviteResult = await GetFromExternalServerAsync(AIPinviteUserToTenantUrl);
                // new AIPUserResult { UserStatus = UserAIPStatus.UserNotRegisteredOnAIP,  InvitationToken ="LALA_Invitationtocken", ActivateAccountURL = string.Format(@"https://{0}/activate_account?client_id={1}&tenant={2}&token={3}", AIPHostUrl, candidateId, toTenant, inviteToken)}; 

                if (aipInviteResult != null)// && aipInviteResult.RedirectUrl)
                {
                    //var inviteToken = inviteTicket.RegistractionToken;// -it will came from AIP return link (generated by AIP Token Service)
                    //inviteTicket.aipInviteAcceptURL OR registrationContinueUrl = string.Format(@"https://{0}/activate_account?client_id={1}&tenant={2}&token={3}", AIPHostUrl, candidateId, toTenant, inviteToken);

                    switch (aipInviteResult.UserStatus)
                    {
                        case UserAIPStatus.UserRegisteredInTenant:
                            //TODO: THERE no need to register user in Tenant again. But only add to other ROLE 
                            //SO, aipActivateAccountURL will have OTHER message like 'Please, join a Role '{RoleName}' in {TenantName}' 

                            // inviteEmailSent = WorkflowMessageManager.SendCandidateUserInviteJoinRoleMessage(candidateId, invitedBy, toTenant, aipActivateAccountURL);    //var emailTmpl = MessageTemplateManager.FindEmailByName(<CandidateInvitationEmail>);
                            break;

                        case UserAIPStatus.UserRegisteredInOtherTenant:
                        case UserAIPStatus.UserNotRegisteredOnAIP:
                            //TODO: there will be message 'Please, join {Tenant} and {Role}'
                            // inviteEmailSent = WorkflowMessageManager.SendCandidateUserInviteMessage(candidateId, invitedBy, toTenant, inviteTicket.aipActivateAccountURL);    //var emailTmpl = MessageTemplateManager.FindEmailByName(<CandidateInvitationEmail>);
                            break;

                        default:
                            //TODO: not result
                            break;
                    }
                }

                if (inviteEmailSent)
                {
                    string activityMsg = string.Format("User {0} invited to join tenant {1} as {2}", model.ToEmail, _currentTenant?.Name, model.Role);
                    //_userActivityService.RecordActivity(Consultant.Consultant_Sent_CandidateInvite,
                    //                                    nameof(Candidate), candidateId.ToString(),
                    //                                    _currentUserName, _currentTenant?.Name,
                    //                                    activityMsg);
                    //_logger.LogInformation(UserActivityLogTypes.Consultant.Consultant_Sent_CandidateInvite);

                    //ScopedMediator.Publish<InvitationSent>(inviteSent);
                }
                return Ok(inviteEmailSent);
            }
            catch (Exception ex)
            {
                //return InternalServerError(new ApplicationException("Error to send letter exception: " + ex.Message));
                //var response = new HttpResponseMessage(HttpStatusCode.BadRequest)
                //{
                //     Content = new HttpContent(ex.InnerException);
                //};
                //return response;

                return BadRequest(ex.Message);
            }
        }

        #region Http calls helper

        //https://johnthiriet.com/efficient-api-calls/#
        static async Task<AIPUserResult> GetFromExternalServerAsync(string url)
        {
            AIPUserResult userResult = null;
            using (var client = new HttpClient())
            {
                HttpResponseMessage response = await client.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    userResult = await response.Content.ReadAsAsync<AIPUserResult>();
                }
            }
            return userResult;
        }

        static async Task<ActionResult> CallExternalService(string url)
        {
            using (var http = new HttpClient())
            {
                //var header = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(Encoding.ASCII.GetBytes(< username:password for auth >)));///username:password for auth
                //http.DefaultRequestHeaders.Authorization = header;
                return JsonConvert.DeserializeObject<dynamic>(await http.GetStringAsync(url));
            }
        }

        /*
        static T DeserializeJsonFromStream<T>(Stream stream)
        {
            if (stream == null || stream.CanRead == false)
                return default(T);

            using (var sr = new StreamReader(stream))
            using (var jtr = new JsonTextReader(sr))
            {
                var js = new JsonSerializer();
                var searchResult = js.Deserialize<T>(jtr);
                return searchResult;
            }
        }

        static async Task<List<Model>> DeserializeOptimizedFromStreamCallAsync(CancellationToken cancellationToken)
        {
            using (var client = new HttpClient())
            using (var request = new HttpRequestMessage(HttpMethod.Get, Url))
            using (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken))
            {
                var stream = await response.Content.ReadAsStreamAsync();

                if (response.IsSuccessStatusCode)
                    return DeserializeJsonFromStream<List<Model>>(stream);

                var content = await StreamToStringAsync(stream);
                throw new ApiException
                {
                    StatusCode = (int)response.StatusCode,
                    Content = content
                };
            }
        }*/

        #endregion


        /*
               [AllowAnonymous]
               public async Task<IActionResult> VerifyCandidateUserInvite(InvitecandidateUserViewModel model)
               {
                   var tenantId = model.TenantId.To<int>();
                   var userId = SimpleStringCipher.Instance.Decrypt(model.UserId).To<long>();
                   var candidateId = SimpleStringCipher.Instance.Decrypt(model.candidateId).To<long>();
                   var user = await _userManager.GetUserByIdAsync(userId);

                   if (user == null || user.EmailConfirmationCode.IsNullOrEmpty())
                       return RedirectToAction("Login", "Account");
                   else
                   {
                       model.ShouldChangePassword = user.ShouldChangePasswordOnNextLogin;
                       model.InviteNoLongerValid = false;
                       model.FirstName = user.Name;
                       model.LastName = user.Surname;
                       model.EmailAddress = user.EmailAddress;
                       model.TimeZones = _timezoneManager.GetSystemTimeZones().ToList();
                   }
                   return View(model);
               }

               [HttpPost]
               [UnitOfWork]
               [AllowAnonymous]
               public async Task<IActionResult> CompleteCandidateUserInvite(InviteCandidateUserModel model)
               {
                   var tenantId = model.TenantId.To<int>();
                   var candidateId = SimpleStringCipher.Instance.Decrypt(model.candidateId).To<long>();
                   var userId = SimpleStringCipher.Instance.Decrypt(model.UserId).To<long>();
                   var activationCode = model.InviteActivationCode;

                   using (UnitOfWorkManager.Current.SetTenantId(tenantId))
                   {
                       var tenant = await _tenantManager.FindByIdAsync(tenantId);
                       var user = await _userManager.FindByIdAsync(userId);
                       var candidate = _candidateManager.GetCandidateById(candidateId);

                       if (tenant == null || user == null || candidate == null || user.EmailConfirmationCode != activationCode)
                       {
                           return Json(new AjaxResponse()
                           {
                               Error = new ErrorInfo(L("Candidate.Invite.Verify.Error"), L("Candidate.Invite.Verify.Error_Details")),
                               Success = false
                           });
                       }

                       candidate.IsActive = true;
                       candidate.InviteActivationCode = null;
                       candidate.Candidate.IsActive = true;

                       user.Name = model.FirstName;
                       user.Surname = model.LastName;
                       user.UserName = user.FullName.ToLower().TrimSpaces();
                       user.IsActive = true;
                       user.IsEmailConfirmed = true;
                       user.EmailConfirmationCode = null;

                       //if user is coming in for the first time, then make sure to set the password
                       if (!model.Password.IsNullOrEmpty())
                       {
                           user.Password = new PasswordHasher().HashPassword(model.Password);
                           user.PasswordResetCode = null;
                           user.ShouldChangePasswordOnNextLogin = false;
                       }
                       await UnitOfWorkManager.Current.SaveChangesAsync();

                       //log user into the application if we have their password,
                       //otherwise just direct them to their landing page
                       if (!model.Password.IsNullOrEmpty())
                       {
                           var loginResult = await _authHelper.GetLoginResultAsync(
                               user.EmailAddress,
                               model.Password,
                               tenant.TenancyName);
                           await _authHelper.SignInAsync(loginResult.User, loginResult.Identity, false);
                       }

                       var target = "/invite/verifycandidateconsentform?candidateId=" + candidateId;
                       return Json(new AjaxResponse()
                       {
                           TargetUrl = target
                       });
                   }
               }

               [AllowAnonymous]
               public IActionResult VerifyCandidateConsentForm(Guid id)
               {
                   var candidate = _candidateAppService.GetCandidateById(id);
                   return View(candidate.MapTo<CandidateDto>());
               }
               
         */

    }
}

